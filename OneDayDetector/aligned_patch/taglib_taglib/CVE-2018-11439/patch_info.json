{
    "CVE_id": "CVE-2018-11439",
    "CPE": [
        "1.11.1"
    ],
    "modified_items": {
        "tstring.cpp": {
            "copyFromUTF8": "function",
            "copyFromUTF16": "function",
            "data": "function",
            "UTF16toUTF8": "function",
            "UTF8toUTF16": "function"
        },
        "unicode.h": {
            "TAGLIB_UNICODE_H": "other",
            "UNI_REPLACEMENT_CHAR": "other",
            "UNI_MAX_BMP": "other",
            "UNI_MAX_UTF16": "other",
            "UNI_MAX_UTF32": "other",
            "Unicode": "other",
            "UTF32": "other",
            "UTF16": "other",
            "UTF8": "other",
            "Boolean": "other",
            "__anon04c2d3ed0103": "other",
            "conversionOK": "other",
            "sourceExhausted": "other",
            "targetExhausted": "other",
            "sourceIllegal": "other",
            "ConversionResult": "other",
            "__anon04c2d3ed0203": "other",
            "strictConversion": "other",
            "lenientConversion": "other",
            "ConversionFlags": "other"
        },
        "checked.h": {
            "UTF8_FOR_CPP_CHECKED_H_2675DCD0_9480_4c0c_B92A_CC14C027B731": "other",
            "utf8": "other",
            "exception": "other",
            "invalid_code_point": "function",
            "cp": "other",
            "what": "function",
            "code_point": "function",
            "invalid_utf8": "function",
            "u8": "other",
            "utf8_octet": "function",
            "invalid_utf16": "function",
            "u16": "other",
            "utf16_word": "function",
            "not_enough_room": "other",
            "append": "function",
            "replace_invalid": "function",
            "next": "function",
            "peek_next": "function",
            "prior": "function",
            "previous": "function",
            "advance": "function",
            "distance": "function",
            "utf16to8": "function",
            "utf8to16": "function",
            "utf32to8": "function",
            "utf8to32": "function",
            "iterator": "function",
            "it": "other",
            "range_start": "other",
            "range_end": "other",
            "base": "function",
            "operator *": "function",
            "operator ==": "function",
            "operator !=": "function",
            "operator ++": "function",
            "operator --": "function"
        },
        "core.h": {
            "UTF8_FOR_CPP_CORE_H_2675DCD0_9480_4c0c_B92A_CC14C027B731": "other",
            "utf8": "other",
            "uint8_t": "other",
            "uint16_t": "other",
            "uint32_t": "other",
            "internal": "other",
            "mask8": "function",
            "mask16": "function",
            "is_trail": "function",
            "is_lead_surrogate": "function",
            "is_trail_surrogate": "function",
            "is_surrogate": "function",
            "is_code_point_valid": "function",
            "sequence_length": "function",
            "is_overlong_sequence": "function",
            "INCOMPLETE_SEQUENCE": "other",
            "increase_safely": "function",
            "UTF8_CPP_INCREASE_AND_RETURN_ON_ERROR": "other",
            "get_sequence_1": "function",
            "get_sequence_2": "function",
            "get_sequence_3": "function",
            "get_sequence_4": "function",
            "validate_next": "function",
            "octet_difference_type": "other",
            "find_invalid": "function",
            "is_valid": "function",
            "starts_with_bom": "function",
            "is_bom": "function"
        },
        "test_string.cpp": {
            "testEncodeNonBMP": "function"
        },
        "unicode.cpp": {
            "UNI_SUR_HIGH_START": "other",
            "UNI_SUR_HIGH_END": "other",
            "UNI_SUR_LOW_START": "other",
            "UNI_SUR_LOW_END": "other",
            "false": "other",
            "true": "other",
            "Unicode": "other",
            "ConvertUTF16toUTF8": "function",
            "isLegalUTF8": "function",
            "isLegalUTF8Sequence": "function",
            "ConvertUTF8toUTF16": "function"
        },
        "CMakeLists.txt": {
            "unicode_SRCS": "other"
        }
    }
}