int test2(struct Options options)
{
    int rc = 0;
    unsigned char buf[100];
    int buflen = sizeof(buf);

    unsigned char dup = 0;
    int qos = 2;
    unsigned char retained = 0;
    unsigned short msgid = 23;
    MQTTString topicString = MQTTString_initializer;
    unsigned char *payload = (unsigned char *)"kkhkhkjkj jkjjk jk jk ";
    int payloadlen = strlen((char *)payload);

    unsigned char dup2 = 1;
    int qos2 = 1;
    unsigned char retained2 = 1;
    unsigned short msgid2 = 3243;
    MQTTString topicString2 = MQTTString_initializer;
    unsigned char *payload2 = NULL;
    int payloadlen2 = 0;

    fprintf(xml, "<testcase classname=\"test1\" name=\"de/serialization\"");
    global_start_time = start_clock();
    failures = 0;
    MyLog(LOGA_INFO, "Starting test 2 - serialization of publish and back");

    topicString.cstring = "mytopic";
    rc = MQTTSerialize_publish(buf, buflen, dup, qos, retained, msgid, topicString,
                               payload, payloadlen);
    assert("good rc from serialize publish", rc > 0, "rc was %d\n", rc);

    rc = MQTTDeserialize_publish(&dup2, &qos2, &retained2, &msgid2, &topicString2,
                                 &payload2, &payloadlen2, buf, buflen);
    assert("good rc from deserialize publish", rc == 1, "rc was %d\n", rc);

    /* data after should be the same as data before */
    assert("dups should be the same", dup == dup2, "dups were different %d\n", dup2);
    assert("qoss should be the same", qos == qos2, "qoss were different %d\n", qos2);
    assert("retaineds should be the same", retained == retained2, "retaineds were different %d\n", retained2);
    assert("msgids should be the same", msgid == msgid2, "msgids were different %d\n", msgid2);

    assert("topics should be the same",
           checkMQTTStrings(topicString, topicString2), "topics were different %s\n", ""); //topicString2);

    assert("payload lengths should be the same",
           payloadlen == payloadlen2, "payload lengths were different %d\n", payloadlen2);

    assert("payloads should be the same",
           memcmp(payload, payload2, payloadlen) == 0, "payloads were different %s\n", "");

    /*exit:*/
    MyLog(LOGA_INFO, "TEST2: test %s. %d tests run, %d failures.",
          (failures == 0) ? "passed" : "failed", tests, failures);
    write_test_result();
    return failures;
}
