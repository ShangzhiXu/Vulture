int lwm2m_stringToUri(const char *buffer,
                      size_t buffer_len,
                      lwm2m_uri_t *uriP)
{
    size_t head;
    int readNum;

    LOG_ARG("buffer_len: %u, buffer: \"%.*s\"", buffer_len, buffer_len, buffer);

    if (buffer == NULL || buffer_len == 0 || uriP == NULL) return 0;

    memset(uriP, 0, sizeof(lwm2m_uri_t));

    // Skip any white space
    head = 0;
    while (head < buffer_len && isspace(buffer[head] & 0xFF))
    {
        head++;
    }
    if (head == buffer_len) return 0;

    // Check the URI start with a '/'
    if (buffer[head] != '/') return 0;
    head++;
    if (head == buffer_len) return 0;

    // Read object ID
    readNum = prv_parseNumber((uint8_t *)buffer, buffer_len, &head);
    if (readNum < 0 || readNum > LWM2M_MAX_ID) return 0;
    uriP->objectId = (uint16_t)readNum;
    uriP->flag |= LWM2M_URI_FLAG_OBJECT_ID;

    if (buffer[head] == '/') head += 1;
    if (head >= buffer_len)
    {
        LOG_ARG("Parsed characters: %u", head);
        LOG_URI(uriP);
        return head;
    }

    readNum = prv_parseNumber((uint8_t *)buffer, buffer_len, &head);
    if (readNum < 0 || readNum >= LWM2M_MAX_ID) return 0;
    uriP->instanceId = (uint16_t)readNum;
    uriP->flag |= LWM2M_URI_FLAG_INSTANCE_ID;

    if (buffer[head] == '/') head += 1;
    if (head >= buffer_len)
    {
        LOG_ARG("Parsed characters: %u", head);
        LOG_URI(uriP);
        return head;
    }

    readNum = prv_parseNumber((uint8_t *)buffer, buffer_len, &head);
    if (readNum < 0 || readNum >= LWM2M_MAX_ID) return 0;
    uriP->resourceId = (uint16_t)readNum;
    uriP->flag |= LWM2M_URI_FLAG_RESOURCE_ID;

    if (head != buffer_len) return 0;

    LOG_ARG("Parsed characters: %u", head);
    LOG_URI(uriP);

    return head;
}
