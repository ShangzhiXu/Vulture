s32_t SPIFFS_vis(spiffs *fs)
{
    s32_t res = SPIFFS_OK;
    SPIFFS_API_CHECK_CFG(fs);
    SPIFFS_API_CHECK_MOUNT(fs);
    SPIFFS_LOCK(fs);

    int entries_per_page = (SPIFFS_CFG_LOG_PAGE_SZ(fs) / sizeof(spiffs_obj_id));
    spiffs_obj_id *obj_lu_buf = (spiffs_obj_id *)fs->lu_work;
    spiffs_block_ix bix = 0;

    while (bix < fs->block_count)
    {
        // check each object lookup page
        int obj_lookup_page = 0;
        int cur_entry = 0;

        while (res == SPIFFS_OK && obj_lookup_page < (int)SPIFFS_OBJ_LOOKUP_PAGES(fs))
        {
            int entry_offset = obj_lookup_page * entries_per_page;
            res = _spiffs_rd(fs, SPIFFS_OP_T_OBJ_LU | SPIFFS_OP_C_READ,
                             0, bix * SPIFFS_CFG_LOG_BLOCK_SZ(fs) + SPIFFS_PAGE_TO_PADDR(fs, obj_lookup_page), SPIFFS_CFG_LOG_PAGE_SZ(fs), fs->lu_work);
            // check each entry
            while (res == SPIFFS_OK &&
                    cur_entry - entry_offset < entries_per_page && cur_entry < (int)(SPIFFS_PAGES_PER_BLOCK(fs) - SPIFFS_OBJ_LOOKUP_PAGES(fs)))
            {
                spiffs_obj_id obj_id = obj_lu_buf[cur_entry - entry_offset];
                if (cur_entry == 0)
                {
                    spiffs_printf(_SPIPRIbl" ", bix);
                }
                else if ((cur_entry & 0x3f) == 0)
                {
                    spiffs_printf("     ");
                }
                if (obj_id == SPIFFS_OBJ_ID_FREE)
                {
                    spiffs_printf(SPIFFS_TEST_VIS_FREE_STR);
                }
                else if (obj_id == SPIFFS_OBJ_ID_DELETED)
                {
                    spiffs_printf(SPIFFS_TEST_VIS_DELE_STR);
                }
                else if (obj_id & SPIFFS_OBJ_ID_IX_FLAG)
                {
                    spiffs_printf(SPIFFS_TEST_VIS_INDX_STR(obj_id));
                }
                else
                {
                    spiffs_printf(SPIFFS_TEST_VIS_DATA_STR(obj_id));
                }
                cur_entry++;
                if ((cur_entry & 0x3f) == 0)
                {
                    spiffs_printf("\n");
                }
            } // per entry
            obj_lookup_page++;
        } // per object lookup page

        spiffs_obj_id erase_count;
        res = _spiffs_rd(fs, SPIFFS_OP_C_READ | SPIFFS_OP_T_OBJ_LU2, 0,
                         SPIFFS_ERASE_COUNT_PADDR(fs, bix),
                         sizeof(spiffs_obj_id), (u8_t *)&erase_count);
        SPIFFS_CHECK_RES(res);

        if (erase_count != (spiffs_obj_id) - 1)
        {
            spiffs_printf("\tera_cnt: %d\n", erase_count);
        }
        else
        {
            spiffs_printf("\tera_cnt: N/A\n");
        }

        bix++;
    } // per block

    spiffs_printf("era_cnt_max: %d\n", fs->max_erase_count);
    spiffs_printf("last_errno:  "_SPIPRIi"\n", fs->err_code);
    spiffs_printf("blocks:      "_SPIPRIi"\n", fs->block_count);
    spiffs_printf("free_blocks: "_SPIPRIi"\n", fs->free_blocks);
    spiffs_printf("page_alloc:  "_SPIPRIi"\n", fs->stats_p_allocated);
    spiffs_printf("page_delet:  "_SPIPRIi"\n", fs->stats_p_deleted);
    SPIFFS_UNLOCK(fs);
    u32_t total, used;
    SPIFFS_info(fs, &total, &used);
    spiffs_printf("used:        "_SPIPRIi" of "_SPIPRIi"\n", used, total);
    return res;
}
