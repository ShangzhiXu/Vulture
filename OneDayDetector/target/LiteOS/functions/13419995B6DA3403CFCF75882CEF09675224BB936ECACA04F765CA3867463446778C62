static lv_res_t lv_textarea_signal(lv_obj_t * ta, lv_signal_t sign, void * param)
{
    lv_res_t res;
    if(sign == LV_SIGNAL_GET_STYLE) {
        lv_get_style_info_t * info = param;
        info->result = lv_textarea_get_style(ta, info->part);
        if(info->result != NULL) return LV_RES_OK;
        else return ancestor_signal(ta, sign, param);
    }
    else if(sign == LV_SIGNAL_GET_STATE_DSC) {
        return ancestor_signal(ta, sign, param);
    }

    /* Include the ancient signal function */
    res = ancestor_signal(ta, sign, param);
    if(res != LV_RES_OK) return res;
    if(sign == LV_SIGNAL_GET_TYPE) return lv_obj_handle_get_type_signal(param, LV_OBJX_NAME);

    lv_textarea_ext_t * ext = lv_obj_get_ext_attr(ta);
    if(sign == LV_SIGNAL_CLEANUP) {
        if(ext->pwd_tmp != NULL) lv_mem_free(ext->pwd_tmp);
        if(ext->placeholder_txt != NULL) lv_mem_free(ext->placeholder_txt);

        ext->pwd_tmp = NULL;
        ext->placeholder_txt = NULL;

        lv_obj_clean_style_list(ta, LV_TEXTAREA_PART_CURSOR);
        lv_obj_clean_style_list(ta, LV_TEXTAREA_PART_PLACEHOLDER);

        /* (The created label will be deleted automatically) */

    }
    else if(sign == LV_SIGNAL_STYLE_CHG) {
        if(ext->label) {
            if(ext->one_line) {
                lv_style_int_t top = lv_obj_get_style_pad_top(ta, LV_TEXTAREA_PART_BG);
                lv_style_int_t bottom = lv_obj_get_style_pad_bottom(ta, LV_TEXTAREA_PART_BG);
                const lv_font_t * font = lv_obj_get_style_text_font(ta, LV_TEXTAREA_PART_BG);

                /*In one line mode refresh the Text Area height because 'vpad' can modify it*/
                lv_coord_t font_h              = lv_font_get_line_height(font);
                lv_obj_set_height(ext->label, font_h);
                lv_obj_set_height(ta, font_h + top + bottom);
            }
            else {
                /*In not one line mode refresh the Label width because 'hpad' can modify it*/
                lv_obj_set_width(ext->label, lv_page_get_width_fit(ta));
                lv_obj_set_pos(ext->label, 0, 0); /*Be sure the Label is in the correct position*/

            }
            lv_label_set_text(ext->label, NULL);
            refr_cursor_area(ta);
        }
    }
    else if(sign == LV_SIGNAL_COORD_CHG) {
        /*Set the label width according to the text area width*/
        if(ext->label) {
            if(lv_obj_get_width(ta) != lv_area_get_width(param) || lv_obj_get_height(ta) != lv_area_get_height(param)) {
                lv_obj_set_width(ext->label, lv_page_get_width_fit(ta));
                lv_obj_set_pos(ext->label, 0, 0);
                lv_label_set_text(ext->label, NULL); /*Refresh the label*/

                refr_cursor_area(ta);
            }
        }
    }
    else if(sign == LV_SIGNAL_CONTROL) {
        uint32_t c = *((uint32_t *)param); /*uint32_t because can be UTF-8*/
        if(c == LV_KEY_RIGHT)
            lv_textarea_cursor_right(ta);
        else if(c == LV_KEY_LEFT)
            lv_textarea_cursor_left(ta);
        else if(c == LV_KEY_UP)
            lv_textarea_cursor_up(ta);
        else if(c == LV_KEY_DOWN)
            lv_textarea_cursor_down(ta);
        else if(c == LV_KEY_BACKSPACE)
            lv_textarea_del_char(ta);
        else if(c == LV_KEY_DEL)
            lv_textarea_del_char_forward(ta);
        else if(c == LV_KEY_HOME)
            lv_textarea_set_cursor_pos(ta, 0);
        else if(c == LV_KEY_END)
            lv_textarea_set_cursor_pos(ta, LV_TEXTAREA_CURSOR_LAST);
        else {
            lv_textarea_add_char(ta, c);
        }
    }
    else if(sign == LV_SIGNAL_GET_EDITABLE) {
        bool * editable = (bool *)param;
        *editable       = true;
    }
    else if(sign == LV_SIGNAL_PRESSED || sign == LV_SIGNAL_PRESSING || sign == LV_SIGNAL_PRESS_LOST ||
            sign == LV_SIGNAL_RELEASED) {
        update_cursor_position_on_click(ta, sign, (lv_indev_t *)param);
    }
    return res;
}
