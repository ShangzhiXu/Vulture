lv_obj_t * lv_led_create(lv_obj_t * par, const lv_obj_t * copy)
{
    LV_LOG_TRACE("led create started");

    /*Create the ancestor basic object*/
    lv_obj_t * led = lv_obj_create(par, copy);
    LV_ASSERT_MEM(led);
    if(led == NULL) return NULL;

    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_cb(led);
    if(ancestor_design == NULL) ancestor_design = lv_obj_get_design_cb(led);

    /*Allocate the object type specific extended data*/
    lv_led_ext_t * ext = lv_obj_allocate_ext_attr(led, sizeof(lv_led_ext_t));
    LV_ASSERT_MEM(ext);
    if(ext == NULL) {
        lv_obj_del(led);
        return NULL;
    }

    ext->bright = LV_LED_BRIGHT_MAX;

    lv_obj_set_signal_cb(led, lv_led_signal);
    lv_obj_set_design_cb(led, lv_led_design);

    /*Init the new led object*/
    if(copy == NULL) {
        lv_obj_set_size(led, LV_LED_WIDTH_DEF, LV_LED_HEIGHT_DEF);

        lv_theme_apply(led, LV_THEME_LED);
    }
    /*Copy an existing object*/
    else {
        lv_led_ext_t * copy_ext = lv_obj_get_ext_attr(copy);
        ext->bright             = copy_ext->bright;

        /*Refresh the style with new signal function*/
        lv_obj_refresh_style(led, LV_STYLE_PROP_ALL);
    }

    LV_LOG_INFO("led created");

    return led;
}
