HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
  /* Check the USART handle allocation */
  if (husart == NULL)
  {
    return HAL_ERROR;
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;

#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
    USART_InitCallbacksToDefault(husart);

    if (husart->MspInitCallback == NULL)
    {
      husart->MspInitCallback = HAL_USART_MspInit;
    }

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;

  /* Disable the Peripheral */
  __HAL_USART_DISABLE(husart);

  /* Set the Usart Communication parameters */
  if (USART_SetConfig(husart) == HAL_ERROR)
  {
    return HAL_ERROR;
  }

  /* In Synchronous mode, the following bits must be kept cleared:
  - LINEN bit (if LIN is supported) in the USART_CR2 register
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported) bits in the USART_CR3 register. 
  */
#if  defined (USART_CR2_LINEN)
  husart->Instance->CR2 &= ~USART_CR2_LINEN;
#endif /* USART_CR2_LINEN */
#if  defined (USART_CR3_SCEN)
#if  defined (USART_CR3_IREN)
  husart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
#else
  husart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL);
#endif /* USART_CR3_IREN */
#else
#if  defined (USART_CR3_IREN)
  husart->Instance->CR3 &= ~(USART_CR3_HDSEL | USART_CR3_IREN);
#else
  husart->Instance->CR3 &= ~(USART_CR3_HDSEL);
#endif /* USART_CR3_IREN */
#endif /* USART_CR3_SCEN */

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);

  /* TEACK and/or REACK to check before moving husart->State to Ready */
  return (USART_CheckIdleState(husart));
}
