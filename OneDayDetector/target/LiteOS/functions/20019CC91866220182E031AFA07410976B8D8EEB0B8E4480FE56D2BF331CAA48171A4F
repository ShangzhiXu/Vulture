int pthread_mutex_timedlock(pthread_mutex_t *mutex, const struct timespec *absTime)
{
    MuxBaseCB *muxPended = NULL;
    LosTaskCB *runTask = NULL;
    UINT32 ret;
    UINT32 absTicks;
    struct timespec to = {0};

    runTask = (LosTaskCB*)OsCurrTaskGet();
    ret = OsMuxPreCheck(mutex, runTask);
    if (ret != ENOERR) {
        return (INT32)ret;
    }

    muxPended = &mutex->stLock;

    if ((mutex->stAttr.type == PTHREAD_MUTEX_ERRORCHECK) &&
        (muxPended->muxCount != 0) &&
        (muxPended->owner == runTask)) {
        return EDEADLK;
    }

    if ((absTime == NULL) || (!ValidTimespec(absTime)) || clock_gettime(CLOCK_REALTIME, &to)) {
        return EINVAL;
    }

    /* calculate abs time */
    to.tv_sec = absTime->tv_sec - to.tv_sec;
    to.tv_nsec = absTime->tv_nsec - to.tv_nsec;
    if (to.tv_nsec < 0) {
        to.tv_sec--;
        to.tv_nsec += OS_SYS_NS_PER_SECOND;
    }
    if (to.tv_sec < 0) {
        return ETIMEDOUT;
    }
    /* convert to tick */
    absTicks = OsTimespec2Tick(&to);

    ret = OsMuxPendForPosix(mutex, absTicks);
    return map_errno(ret);
}
