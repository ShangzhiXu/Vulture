coap_parse_message(void *packet, uint8_t *data, uint16_t data_len)
{
    coap_packet_t *const coap_pkt = (coap_packet_t *) packet;
    uint8_t *current_option;
    unsigned int option_number = 0;
    unsigned int option_delta = 0;
    size_t option_length = 0;
    unsigned int *x;

    /* Initialize packet */
    memset(coap_pkt, 0, sizeof(coap_packet_t));

    /* pointer to packet bytes */
    coap_pkt->buffer = data;

    /* parse header fields */
    coap_pkt->version = (COAP_HEADER_VERSION_MASK & coap_pkt->buffer[0]) >> COAP_HEADER_VERSION_POSITION;
    coap_pkt->type = (coap_message_type_t)((COAP_HEADER_TYPE_MASK & coap_pkt->buffer[0]) >> COAP_HEADER_TYPE_POSITION);
    coap_pkt->token_len = MIN(COAP_TOKEN_LEN, (COAP_HEADER_TOKEN_LEN_MASK & coap_pkt->buffer[0]) >> COAP_HEADER_TOKEN_LEN_POSITION);
    coap_pkt->code = coap_pkt->buffer[1];
    coap_pkt->mid = coap_pkt->buffer[2] << 8 | coap_pkt->buffer[3];

    if (coap_pkt->version != 1)
    {
        coap_error_message = "CoAP version must be 1";
        return BAD_REQUEST_4_00;
    }

    current_option = data + COAP_HEADER_LEN;

    if (coap_pkt->token_len != 0)
    {
        memcpy(coap_pkt->token, current_option, coap_pkt->token_len);
        SET_OPTION(coap_pkt, COAP_OPTION_TOKEN);

        PRINTF("Token (len %u) [0x%02X%02X%02X%02X%02X%02X%02X%02X]\n", coap_pkt->token_len,
               coap_pkt->token[0],
               coap_pkt->token[1],
               coap_pkt->token[2],
               coap_pkt->token[3],
               coap_pkt->token[4],
               coap_pkt->token[5],
               coap_pkt->token[6],
               coap_pkt->token[7]
              ); /*FIXME always prints 8 bytes */
    }

    /* parse options */
    current_option += coap_pkt->token_len;

    while (current_option < data + data_len)
    {
        /* Payload marker 0xFF, currently only checking for 0xF* because rest is reserved */
        if ((current_option[0] & 0xF0) == 0xF0)
        {
            coap_pkt->payload = ++current_option;
            coap_pkt->payload_len = data_len - (coap_pkt->payload - data);

            break;
        }

        option_delta = current_option[0] >> 4;
        option_length = current_option[0] & 0x0F;
        ++current_option;

        /* avoids code duplication without function overhead */
        x = &option_delta;
        do
        {
            if (*x == 13)
            {
                *x += current_option[0];
                ++current_option;
            }
            else if (*x == 14)
            {
                *x += 255;
                *x += current_option[0] << 8;
                ++current_option;
                *x += current_option[0];
                ++current_option;
            }
        }
        while (x != (unsigned int *)&option_length && NULL != (x = (unsigned int *)&option_length));

        option_number += option_delta;

        if (current_option + option_length > data + data_len)
        {
            PRINTF("OPTION %u (delta %u, len %u) has invalid length.\n", option_number, option_delta, option_length);
            return BAD_REQUEST_4_00;
        }
        else
        {
            PRINTF("OPTION %u (delta %u, len %u): ", option_number, option_delta, option_length);
        }

        SET_OPTION(coap_pkt, option_number);

        switch (option_number)
        {
        case COAP_OPTION_CONTENT_TYPE:
            coap_pkt->content_type = (coap_content_type_t)coap_parse_int_option(current_option, option_length);
            PRINTF("Content-Format [%u]\n", coap_pkt->content_type);
            break;
        case COAP_OPTION_MAX_AGE:
            coap_pkt->max_age = coap_parse_int_option(current_option, option_length);
            PRINTF("Max-Age [%lu]\n", coap_pkt->max_age);
            break;
        case COAP_OPTION_ETAG:
            coap_pkt->etag_len = (uint8_t)(MIN(COAP_ETAG_LEN, option_length));
            memcpy(coap_pkt->etag, current_option, coap_pkt->etag_len);
            PRINTF("ETag %u [0x%02X%02X%02X%02X%02X%02X%02X%02X]\n", coap_pkt->etag_len,
                   coap_pkt->etag[0],
                   coap_pkt->etag[1],
                   coap_pkt->etag[2],
                   coap_pkt->etag[3],
                   coap_pkt->etag[4],
                   coap_pkt->etag[5],
                   coap_pkt->etag[6],
                   coap_pkt->etag[7]
                  ); /*FIXME always prints 8 bytes */
            break;
        case COAP_OPTION_ACCEPT:
            if (coap_pkt->accept_num < COAP_MAX_ACCEPT_NUM)
            {
                coap_pkt->accept[coap_pkt->accept_num] = coap_parse_int_option(current_option, option_length);
                coap_pkt->accept_num += 1;
                PRINTF("Accept [%u]\n", coap_pkt->content_type);
            }
            break;
        case COAP_OPTION_IF_MATCH:
            /*FIXME support multiple ETags */
            coap_pkt->if_match_len = (uint8_t)(MIN(COAP_ETAG_LEN, option_length));
            memcpy(coap_pkt->if_match, current_option, coap_pkt->if_match_len);
            PRINTF("If-Match %u [0x%02X%02X%02X%02X%02X%02X%02X%02X]\n", coap_pkt->if_match_len,
                   coap_pkt->if_match[0],
                   coap_pkt->if_match[1],
                   coap_pkt->if_match[2],
                   coap_pkt->if_match[3],
                   coap_pkt->if_match[4],
                   coap_pkt->if_match[5],
                   coap_pkt->if_match[6],
                   coap_pkt->if_match[7]
                  ); /*FIXME always prints 8 bytes */
            break;
        case COAP_OPTION_IF_NONE_MATCH:
            coap_pkt->if_none_match = 1;
            PRINTF("If-None-Match\n");
            break;

        case COAP_OPTION_URI_HOST:
            coap_pkt->uri_host = current_option;
            coap_pkt->uri_host_len = option_length;
            PRINTF("Uri-Host [%.*s]\n", coap_pkt->uri_host_len, coap_pkt->uri_host);
            break;
        case COAP_OPTION_URI_PORT:
            coap_pkt->uri_port = coap_parse_int_option(current_option, option_length);
            PRINTF("Uri-Port [%u]\n", coap_pkt->uri_port);
            break;
        case COAP_OPTION_URI_PATH:
            /* coap_merge_multi_option() operates in-place on the IPBUF, but final packet field should be const string -> cast to string */
            // coap_merge_multi_option( (char **) &(coap_pkt->uri_path), &(coap_pkt->uri_path_len), current_option, option_length, 0);
            coap_add_multi_option( &(coap_pkt->uri_path), current_option, option_length, 1);
            PRINTF("Uri-Path [%.*s]\n", option_length, current_option);
            break;
        case COAP_OPTION_URI_QUERY:
            /* coap_merge_multi_option() operates in-place on the IPBUF, but final packet field should be const string -> cast to string */
            // coap_merge_multi_option( (char **) &(coap_pkt->uri_query), &(coap_pkt->uri_query_len), current_option, option_length, '&');
            coap_add_multi_option( &(coap_pkt->uri_query), current_option, option_length, 1);
            PRINTF("Uri-Query [%.*s]\n", option_length, current_option);
            break;

        case COAP_OPTION_LOCATION_PATH:
            coap_add_multi_option( &(coap_pkt->location_path), current_option, option_length, 1);
            break;
        case COAP_OPTION_LOCATION_QUERY:
            /* coap_merge_multi_option() operates in-place on the IPBUF, but final packet field should be const string -> cast to string */
            coap_merge_multi_option( &(coap_pkt->location_query), &(coap_pkt->location_query_len), current_option, option_length, '&');
            PRINTF("Location-Query [%.*s]\n", option_length, current_option);
            break;

        case COAP_OPTION_PROXY_URI:
            /*FIXME check for own end-point */
            coap_pkt->proxy_uri = current_option;
            coap_pkt->proxy_uri_len = option_length;
            /*TODO length > 270 not implemented (actually not required) */
            PRINTF("Proxy-Uri NOT IMPLEMENTED [%.*s]\n", coap_pkt->proxy_uri_len, coap_pkt->proxy_uri);
            coap_error_message = "This is a constrained server (Contiki)";
            return PROXYING_NOT_SUPPORTED_5_05;
        //        break;

        case COAP_OPTION_OBSERVE:
            coap_pkt->observe = coap_parse_int_option(current_option, option_length);
            PRINTF("Observe [%lu]\n", coap_pkt->observe);
            break;
        case COAP_OPTION_BLOCK2:
            coap_pkt->block2_num = coap_parse_int_option(current_option, option_length);
            coap_pkt->block2_more = (coap_pkt->block2_num & 0x08) >> 3;
            coap_pkt->block2_size = 16 << (coap_pkt->block2_num & 0x07);
            coap_pkt->block2_offset = (coap_pkt->block2_num & ~0x0000000F) << (coap_pkt->block2_num & 0x07);
            coap_pkt->block2_num >>= 4;
            PRINTF("Block2 [%lu%s (%u B/blk)]\n", coap_pkt->block2_num, coap_pkt->block2_more ? "+" : "", coap_pkt->block2_size);
            break;
        case COAP_OPTION_BLOCK1:
            coap_pkt->block1_num = coap_parse_int_option(current_option, option_length);
            coap_pkt->block1_more = (coap_pkt->block1_num & 0x08) >> 3;
            coap_pkt->block1_size = 16 << (coap_pkt->block1_num & 0x07);
            coap_pkt->block1_offset = (coap_pkt->block1_num & ~0x0000000F) << (coap_pkt->block1_num & 0x07);
            coap_pkt->block1_num >>= 4;
            PRINTF("Block1 [%lu%s (%u B/blk)]\n", coap_pkt->block1_num, coap_pkt->block1_more ? "+" : "", coap_pkt->block1_size);
            break;
        case COAP_OPTION_SIZE:
            coap_pkt->size = coap_parse_int_option(current_option, option_length);
            PRINTF("Size [%lu]\n", coap_pkt->size);
            break;
        default:
            PRINTF("unknown (%u)\n", option_number);
            /* Check if critical (odd) */
            if (option_number & 1)
            {
                coap_error_message = "Unsupported critical option";
                return BAD_OPTION_4_02;
            }
        }

        current_option += option_length;
    } /* for */
    PRINTF("-Done parsing-------\n");



    return NO_ERROR;
}
