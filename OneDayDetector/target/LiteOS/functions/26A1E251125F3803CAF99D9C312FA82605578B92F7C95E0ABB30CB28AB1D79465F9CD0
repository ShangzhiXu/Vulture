static lv_res_t lv_cpicker_signal(lv_obj_t * cpicker, lv_signal_t sign, void * param)
{
    /* Include the ancient signal function */
    lv_res_t res;

    if(sign == LV_SIGNAL_GET_STYLE) {
        lv_get_style_info_t * info = param;
        info->result = lv_cpicker_get_style(cpicker, info->part);
        if(info->result != NULL) return LV_RES_OK;
        else return ancestor_signal(cpicker, sign, param);
    }

    res = ancestor_signal(cpicker, sign, param);
    if(res != LV_RES_OK) return res;
    if(sign == LV_SIGNAL_GET_TYPE) return lv_obj_handle_get_type_signal(param, LV_OBJX_NAME);

    lv_cpicker_ext_t * ext = lv_obj_get_ext_attr(cpicker);

    if(sign == LV_SIGNAL_CLEANUP) {
        lv_obj_clean_style_list(cpicker, LV_CPICKER_PART_KNOB);
    }
    else if(sign == LV_SIGNAL_REFR_EXT_DRAW_PAD) {
        lv_style_int_t left = lv_obj_get_style_pad_left(cpicker, LV_CPICKER_PART_KNOB);
        lv_style_int_t right = lv_obj_get_style_pad_right(cpicker, LV_CPICKER_PART_KNOB);
        lv_style_int_t top = lv_obj_get_style_pad_top(cpicker, LV_CPICKER_PART_KNOB);
        lv_style_int_t bottom = lv_obj_get_style_pad_bottom(cpicker, LV_CPICKER_PART_KNOB);

        lv_coord_t knob_pad = LV_MATH_MAX4(left, right, top, bottom) + 2;

        if(ext->type == LV_CPICKER_TYPE_DISC) {
            cpicker->ext_draw_pad = LV_MATH_MAX(cpicker->ext_draw_pad, knob_pad);
        }
        else {
            knob_pad += lv_obj_get_height(cpicker) / 2;
            cpicker->ext_draw_pad = LV_MATH_MAX(cpicker->ext_draw_pad, knob_pad);
        }
    }
    else if(sign == LV_SIGNAL_COORD_CHG) {
        /*Refresh extended draw area to make knob visible*/
        if(lv_obj_get_width(cpicker) != lv_area_get_width(param) ||
           lv_obj_get_height(cpicker) != lv_area_get_height(param)) {
            lv_obj_refresh_ext_draw_pad(cpicker);
            refr_knob_pos(cpicker);
            lv_obj_invalidate(cpicker);
        }
    }
    else if(sign == LV_SIGNAL_STYLE_CHG) {
        /*Refresh extended draw area to make knob visible*/
        lv_obj_refresh_ext_draw_pad(cpicker);
        refr_knob_pos(cpicker);
        lv_obj_invalidate(cpicker);
    }
    else if(sign == LV_SIGNAL_CONTROL) {
        uint32_t c = *((uint32_t *)param); /*uint32_t because can be UTF-8*/

        if(c == LV_KEY_RIGHT || c == LV_KEY_UP) {
            lv_color_hsv_t hsv_cur;
            hsv_cur = ext->hsv;

            switch(ext->color_mode) {
                case LV_CPICKER_COLOR_MODE_HUE:
                    hsv_cur.h = (ext->hsv.h + 1) % 360;
                    break;
                case LV_CPICKER_COLOR_MODE_SATURATION:
                    hsv_cur.s = (ext->hsv.s + 1) % 100;
                    break;
                case LV_CPICKER_COLOR_MODE_VALUE:
                    hsv_cur.v = (ext->hsv.v + 1) % 100;
                    break;
            }

            if(lv_cpicker_set_hsv(cpicker, hsv_cur)) {
                res = lv_event_send(cpicker, LV_EVENT_VALUE_CHANGED, NULL);
                if(res != LV_RES_OK) return res;
            }
        }
        else if(c == LV_KEY_LEFT || c == LV_KEY_DOWN) {
            lv_color_hsv_t hsv_cur;
            hsv_cur = ext->hsv;

            switch(ext->color_mode) {
                case LV_CPICKER_COLOR_MODE_HUE:
                    hsv_cur.h = ext->hsv.h > 0 ? (ext->hsv.h - 1) : 360;
                    break;
                case LV_CPICKER_COLOR_MODE_SATURATION:
                    hsv_cur.s = ext->hsv.s > 0 ? (ext->hsv.s - 1) : 100;
                    break;
                case LV_CPICKER_COLOR_MODE_VALUE:
                    hsv_cur.v = ext->hsv.v > 0 ? (ext->hsv.v - 1) : 100;
                    break;
            }

            if(lv_cpicker_set_hsv(cpicker, hsv_cur)) {
                res = lv_event_send(cpicker, LV_EVENT_VALUE_CHANGED, NULL);
                if(res != LV_RES_OK) return res;
            }
        }
    }
    else if(sign == LV_SIGNAL_PRESSED) {
        ext->last_change_time = lv_tick_get();
        lv_indev_get_point(lv_indev_get_act(), &ext->last_press_point);
        res = double_click_reset(cpicker);
        if(res != LV_RES_OK) return res;
    }
    else if(sign == LV_SIGNAL_PRESSING) {
        lv_indev_t * indev = lv_indev_get_act();
        if(indev == NULL) return res;

        lv_indev_type_t indev_type = lv_indev_get_type(indev);
        lv_point_t p;
        if(indev_type == LV_INDEV_TYPE_ENCODER || indev_type == LV_INDEV_TYPE_KEYPAD) {
            p.x = cpicker->coords.x1 + lv_obj_get_width(cpicker) / 2;
            p.y = cpicker->coords.y1 + lv_obj_get_height(cpicker) / 2;
        }
        else {
            lv_indev_get_point(indev, &p);
        }

        if((LV_MATH_ABS(p.x - ext->last_press_point.x) > indev->driver.drag_limit / 2) ||
           (LV_MATH_ABS(p.y - ext->last_press_point.y) > indev->driver.drag_limit / 2)) {
            ext->last_change_time = lv_tick_get();
            ext->last_press_point.x = p.x;
            ext->last_press_point.y = p.y;
        }

        p.x -= cpicker->coords.x1;
        p.y -= cpicker->coords.y1;

        /*Ignore pressing in the inner area*/
        uint16_t w = lv_obj_get_width(cpicker);

        int16_t angle = 0;

        if(ext->type == LV_CPICKER_TYPE_RECT) {
            /*If pressed long enough without change go to next color mode*/
            uint32_t diff = lv_tick_elaps(ext->last_change_time);
            if(diff > (uint32_t)indev->driver.long_press_time * 2 && !ext->color_mode_fixed) {
                next_color_mode(cpicker);
                lv_indev_wait_release(lv_indev_get_act());
                return res;
            }

            angle = (p.x * 360) / w;
            if(angle < 0) angle = 0;
            if(angle >= 360) angle = 359;

        }
        else if(ext->type == LV_CPICKER_TYPE_DISC) {
            lv_style_int_t scale_w = lv_obj_get_style_scale_width(cpicker, LV_CPICKER_PART_MAIN);

            lv_coord_t r_in = w / 2;
            p.x -= r_in;
            p.y -= r_in;
            bool on_ring = true;
            r_in -= scale_w;
            if(r_in > LV_DPI / 2) {
                lv_style_int_t inner = lv_obj_get_style_pad_inner(cpicker, LV_CPICKER_PART_MAIN);
                r_in -= inner;

                if(r_in < LV_DPI / 2) r_in = LV_DPI / 2;
            }

            if(p.x * p.x + p.y * p.y < r_in * r_in) {
                on_ring = false;
            }

            /*If the inner area is being pressed, go to the next color mode on long press*/
            uint32_t diff = lv_tick_elaps(ext->last_change_time);
            if(!on_ring && diff > indev->driver.long_press_time && !ext->color_mode_fixed) {
                next_color_mode(cpicker);
                lv_indev_wait_release(lv_indev_get_act());
                return res;
            }

            /*Set the angle only if pressed on the ring*/
            if(!on_ring) return res;

            angle = _lv_atan2(p.x, p.y) % 360;
        }

        lv_color_hsv_t hsv_cur;
        hsv_cur = ext->hsv;

        switch(ext->color_mode) {
            case LV_CPICKER_COLOR_MODE_HUE:
                hsv_cur.h = angle;
                break;
            case LV_CPICKER_COLOR_MODE_SATURATION:
                hsv_cur.s = (angle * 100) / 360;
                break;
            case LV_CPICKER_COLOR_MODE_VALUE:
                hsv_cur.v = (angle * 100) / 360;
                break;
        }

        if(lv_cpicker_set_hsv(cpicker, hsv_cur)) {
            res = lv_event_send(cpicker, LV_EVENT_VALUE_CHANGED, NULL);
            if(res != LV_RES_OK) return res;
        }
    }
    else if(sign == LV_SIGNAL_HIT_TEST) {
        lv_hit_test_info_t * info = param;
        info->result = lv_cpicker_hit(cpicker, info->point);
    }

    return res;
}
