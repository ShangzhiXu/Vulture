LITE_OS_SEC_TEXT_MINOR UINT32 LOS_HistoryTaskCpuUsage(UINT32 taskId, UINT32 mode)
{
    UINT64 cpuCycleAll;
    UINT64 cpuCycleCurTask;
    UINT16 pos;
    UINT16 prePos;
    UINT32 intSave;
    UINT32 cpup = 0;
    UINT32 ret;

    if (g_cpupInitFlg == 0) {
        return LOS_ERRNO_CPUP_NO_INIT;
    }

    ret = OsCpuUsageParaCheck(taskId);
    if (ret != LOS_OK) {
        return ret;
    }
    OsCpupCB *taskCpup = &g_cpup[taskId];

    intSave = LOS_IntLock();
    OsTaskCycleEnd();

    OsCpupGetPos(mode, &pos, &prePos);
    cpuCycleAll = cpuHistoryTime[pos] - cpuHistoryTime[prePos];
    cpuCycleCurTask = taskCpup->historyTime[pos] - taskCpup->historyTime[prePos];
    if (cpuCycleAll) {
        cpup = (UINT32)((LOS_CPUP_PRECISION * cpuCycleCurTask) / cpuCycleAll);
    }

    OsTaskCycleStart();
    LOS_IntRestore(intSave);

    return cpup;
}
