static lv_res_t lv_tabview_signal(lv_obj_t * tabview, lv_signal_t sign, void * param)
{
    lv_res_t res;
    if(sign == LV_SIGNAL_GET_STYLE) {
        lv_get_style_info_t * info = param;
        info->result = lv_tabview_get_style(tabview, info->part);
        if(info->result != NULL) return LV_RES_OK;
        else return ancestor_signal(tabview, sign, param);
    }
    else if(sign == LV_SIGNAL_GET_STATE_DSC) {
        lv_tabview_ext_t * ext = lv_obj_get_ext_attr(tabview);
        lv_get_state_info_t * info = param;
        if(info->part == LV_TABVIEW_PART_TAB_BG) info->result = lv_obj_get_state(ext->btns, LV_BTNMATRIX_PART_BG);
        else if(info->part == LV_TABVIEW_PART_TAB_BTN) info->result = lv_obj_get_state(ext->btns, LV_BTNMATRIX_PART_BTN);
        else if(info->part == LV_TABVIEW_PART_INDIC) info->result = lv_obj_get_state(ext->indic, LV_OBJ_PART_MAIN);
        else if(info->part == LV_TABVIEW_PART_BG_SCRLLABLE) info->result = lv_obj_get_state(ext->content,
                                                                                                LV_PAGE_PART_SCROLLABLE);
        return LV_RES_OK;
    }

    /* Include the ancient signal function */
    res = ancestor_signal(tabview, sign, param);
    if(res != LV_RES_OK) return res;
    if(sign == LV_SIGNAL_GET_TYPE) return lv_obj_handle_get_type_signal(param, LV_OBJX_NAME);

    lv_tabview_ext_t * ext = lv_obj_get_ext_attr(tabview);
    if(sign == LV_SIGNAL_CLEANUP) {
        uint8_t i;
        for(i = 0; ext->tab_name_ptr[i][0] != '\0'; i++) lv_mem_free(ext->tab_name_ptr[i]);

        lv_mem_free(ext->tab_name_ptr);
        ext->tab_name_ptr = NULL;
        ext->btns         = NULL; /*These objects were children so they are already invalid*/
        ext->content      = NULL;
    }
    else if(sign == LV_SIGNAL_STYLE_CHG) {
        /*Be sure the buttons are updated because correct button size is required in `tabview_realign`*/
        lv_signal_send(ext->btns, LV_SIGNAL_STYLE_CHG, NULL);

        tabview_realign(tabview);
    }
    else if(sign == LV_SIGNAL_COORD_CHG) {
        if(ext->content != NULL && (lv_obj_get_width(tabview) != lv_area_get_width(param) ||
                                    lv_obj_get_height(tabview) != lv_area_get_height(param))) {
            tabview_realign(tabview);
        }
    }
    else if(sign == LV_SIGNAL_RELEASED) {
#if LV_USE_GROUP
        /*If released by a KEYPAD or ENCODER then really the tab buttons should be released.
         * So simulate a CLICK on the tab buttons*/
        lv_indev_t * indev         = lv_indev_get_act();
        lv_indev_type_t indev_type = lv_indev_get_type(indev);
        if(indev_type == LV_INDEV_TYPE_KEYPAD ||
           (indev_type == LV_INDEV_TYPE_ENCODER && lv_group_get_editing(lv_obj_get_group(tabview)))) {
            lv_event_send(ext->btns, LV_EVENT_CLICKED, lv_event_get_data());
        }
#endif
    }
    else if(sign == LV_SIGNAL_GET_EDITABLE) {
        bool * editable = (bool *)param;
        *editable       = true;
    }

    if(sign == LV_SIGNAL_FOCUS || sign == LV_SIGNAL_DEFOCUS || sign == LV_SIGNAL_CONTROL || sign == LV_SIGNAL_PRESSED  ||
       sign == LV_SIGNAL_RELEASED) {

        /* The button matrix is not in a group (the tab view is in it) but it should handle the
         * group signals. So propagate the related signals to the button matrix manually*/
        ext->btns->signal_cb(ext->btns, sign, param);

        /*Make the active tab's button focused*/
        if(sign == LV_SIGNAL_FOCUS) {
            lv_btnmatrix_set_focused_btn(ext->btns, ext->tab_cur);
        }

        if(sign == LV_SIGNAL_FOCUS || sign == LV_SIGNAL_DEFOCUS) {
            lv_state_t state = lv_obj_get_state(tabview, LV_TABVIEW_PART_BG);
            if(state & LV_STATE_FOCUSED) {
                lv_obj_set_state(ext->btns, LV_STATE_FOCUSED);
                lv_obj_set_state(ext->indic, LV_STATE_FOCUSED);
            }
            else {
                lv_obj_clear_state(ext->btns, LV_STATE_FOCUSED);
                lv_obj_clear_state(ext->indic, LV_STATE_FOCUSED);

            }
            if(state & LV_STATE_EDITED) {
                lv_obj_set_state(ext->btns, LV_STATE_EDITED);
                lv_obj_set_state(ext->indic, LV_STATE_EDITED);
            }
            else {
                lv_obj_clear_state(ext->btns, LV_STATE_EDITED);
                lv_obj_clear_state(ext->indic, LV_STATE_EDITED);

            }
        }
    }

    return res;
}
