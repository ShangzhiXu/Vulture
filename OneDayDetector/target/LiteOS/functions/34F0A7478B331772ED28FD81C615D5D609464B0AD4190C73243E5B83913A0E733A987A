HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
  /* The Lock is not implemented on this API to allow the user application
  to call the HAL UART API under callbacks HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback() /
  HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback: 
  indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete  
  interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of 
  the stream and the corresponding call back is executed. */
  
  /* Stop UART DMA Tx request if ongoing */
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) &&
      (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)))
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
    
    /* Abort the UART DMA Tx channel */
    if(huart->hdmatx != NULL)
    {
      HAL_DMA_Abort(huart->hdmatx);
    }
    
    UART_EndTxTransfer(huart);
  }
  
  /* Stop UART DMA Rx request if ongoing */
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) &&
      (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)))
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
    
    /* Abort the UART DMA Rx channel */
    if(huart->hdmarx != NULL)
    {
      HAL_DMA_Abort(huart->hdmarx);
    }
    
    UART_EndRxTransfer(huart);
  }
  
  return HAL_OK;
}
