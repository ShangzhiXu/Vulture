LV_ATTRIBUTE_FAST_MEM static lv_draw_mask_res_t lv_draw_mask_radius(lv_opa_t * mask_buf, lv_coord_t abs_x,
                                                                    lv_coord_t abs_y, lv_coord_t len,
                                                                    lv_draw_mask_radius_param_t * p)
{
    bool outer = p->cfg.outer;
    int32_t radius = p->cfg.radius;
    lv_area_t rect;
    lv_area_copy(&rect, &p->cfg.rect);

    if(outer == false) {
        if(abs_y < rect.y1 || abs_y > rect.y2) {
            return LV_DRAW_MASK_RES_TRANSP;
        }
    }
    else {
        if(abs_y < rect.y1 || abs_y > rect.y2) {
            return LV_DRAW_MASK_RES_FULL_COVER;
        }
    }

    if((abs_x >= rect.x1 + radius && abs_x + len <= rect.x2 - radius) ||
       (abs_y >= rect.y1 + radius && abs_y <= rect.y2 - radius)) {
        if(outer == false) {
            /*Remove the edges*/
            int32_t last =  rect.x1 - abs_x;
            if(last > len) return LV_DRAW_MASK_RES_TRANSP;
            if(last >= 0) {
                _lv_memset_00(&mask_buf[0], last);
            }

            int32_t first = rect.x2 - abs_x + 1;
            if(first <= 0) return LV_DRAW_MASK_RES_TRANSP;
            else if(first < len) {
                _lv_memset_00(&mask_buf[first], len - first);
            }
            if(last == 0 && first == len) return LV_DRAW_MASK_RES_FULL_COVER;
            else return LV_DRAW_MASK_RES_CHANGED;
        }
        else {
            int32_t first = rect.x1 - abs_x;
            if(first < 0) first = 0;
            if(first <= len) {
                int32_t last =  rect.x2 - abs_x - first + 1;
                if(first + last > len) last = len - first;
                if(last >= 0) {
                    _lv_memset_00(&mask_buf[first], last);
                }
            }
        }
        return LV_DRAW_MASK_RES_CHANGED;
    }

    int32_t k = rect.x1 - abs_x; /*First relevant coordinate on the of the mask*/
    int32_t w = lv_area_get_width(&rect);
    int32_t h = lv_area_get_height(&rect);
    abs_x -= rect.x1;
    abs_y -= rect.y1;

    uint32_t r2 = p->cfg.radius * p->cfg.radius;

    /*Handle corner areas*/
    if(abs_y < radius || abs_y > h - radius - 1) {

        uint32_t sqrt_mask;
        if(radius <= 32) sqrt_mask = 0x200;
        if(radius <= 256) sqrt_mask = 0x800;
        else sqrt_mask = 0x8000;

        lv_sqrt_res_t x0;
        lv_sqrt_res_t x1;
        /* y = 0 should mean the top of the circle */
        int32_t y;
        if(abs_y < radius) {
            y = radius - abs_y;

            /* Get the x intersection points for `abs_y` and `abs_y-1`
             * Use the circle's equation x = sqrt(r^2 - y^2)
             * Try to use the values from the previous run*/
            if(y == p->y_prev) {
                x0.f = p->y_prev_x.f;
                x0.i = p->y_prev_x.i;
            }
            else {
                _lv_sqrt(r2 - (y * y), &x0, sqrt_mask);
            }
            _lv_sqrt(r2 - ((y - 1) * (y - 1)), &x1, sqrt_mask);
            p->y_prev = y - 1;
            p->y_prev_x.f = x1.f;
            p->y_prev_x.i = x1.i;
        }
        else {
            y = radius - (h - abs_y) + 1;

            /* Get the x intersection points for `abs_y` and `abs_y-1`
             * Use the circle's equation x = sqrt(r^2 - y^2)
             * Try to use the values from the previous run*/
            if((y - 1) == p->y_prev) {
                x1.f = p->y_prev_x.f;
                x1.i = p->y_prev_x.i;
            }
            else {
                _lv_sqrt(r2 - ((y - 1) * (y - 1)), &x1, sqrt_mask);
            }

            _lv_sqrt(r2 - (y * y), &x0, sqrt_mask);
            p->y_prev = y;
            p->y_prev_x.f = x0.f;
            p->y_prev_x.i = x0.i;
        }

        /* If x1 is on the next round coordinate (e.g. x0: 3.5, x1:4.0)
         * then treat x1 as x1: 3.99 to handle them as they were on the same pixel*/
        if(x0.i == x1.i - 1 && x1.f == 0) {
            x1.i--;
            x1.f = 0xFF;
        }

        /*If the two x intersections are on the same x then just get average of the fractions*/
        if(x0.i == x1.i) {
            lv_opa_t m = (x0.f + x1.f) >> 1;
            if(outer) m = 255 - m;
            int32_t ofs = radius - x0.i - 1;

            /*Left corner*/
            int32_t kl = k + ofs;

            if(kl >= 0 && kl < len) {
                mask_buf[kl] = mask_mix(mask_buf[kl], m);
            }

            /*Right corner*/
            int32_t kr = k + (w - ofs - 1);
            if(kr >= 0 && kr < len) {
                mask_buf[kr] = mask_mix(mask_buf[kr], m);
            }

            /*Clear the unused parts*/
            if(outer == false) {
                kr++;
                if(kl > len)  {
                    return LV_DRAW_MASK_RES_TRANSP;
                }
                if(kl >= 0) {
                    _lv_memset_00(&mask_buf[0], kl);
                }
                if(kr < 0) {
                    return LV_DRAW_MASK_RES_TRANSP;
                }
                if(kr <= len) {
                    _lv_memset_00(&mask_buf[kr], len - kr);
                }
            }
            else {
                kl++;
                int32_t first = kl;
                if(first < 0) first = 0;

                int32_t len_tmp = kr - first;
                if(len_tmp + first > len) len_tmp = len - first;
                if(first < len && len_tmp >= 0) {
                    _lv_memset_00(&mask_buf[first], len_tmp);
                }
            }
        }
        /*Multiple pixels are affected. Get y intersection of the pixels*/
        else {
            int32_t ofs = radius - (x0.i + 1);
            int32_t kl = k + ofs;
            int32_t kr = k + (w - ofs - 1);

            if(outer) {
                int32_t first = kl + 1;
                if(first < 0) first = 0;

                int32_t len_tmp = kr - first;
                if(len_tmp + first > len) len_tmp = len - first;
                if(first < len && len_tmp >= 0) {
                    _lv_memset_00(&mask_buf[first], len_tmp);
                }
            }

            uint32_t i = x0.i + 1;
            lv_opa_t m;
            lv_sqrt_res_t y_prev;
            lv_sqrt_res_t y_next;

            _lv_sqrt(r2 - (x0.i * x0.i), &y_prev, sqrt_mask);

            if(y_prev.f == 0) {
                y_prev.i--;
                y_prev.f = 0xFF;
            }

            /*The first y intersection is special as it might be in the previous line*/
            if(y_prev.i >= y) {
                _lv_sqrt(r2 - (i * i), &y_next, sqrt_mask);
                m = 255 - (((255 - x0.f) * (255 - y_next.f)) >> 9);

                if(outer) m = 255 - m;
                if(kl >= 0 && kl < len) mask_buf[kl] = mask_mix(mask_buf[kl], m);
                if(kr >= 0 && kr < len) mask_buf[kr] = mask_mix(mask_buf[kr], m);
                kl--;
                kr++;
                y_prev.f = y_next.f;
                i++;
            }

            /*Set all points which are crossed by the circle*/
            for(; i <= x1.i; i++) {
                /* These values are very close to each other. It's enough to approximate sqrt
                 * The non-approximated version is lv_sqrt(r2 - (i * i), &y_next, sqrt_mask); */
                sqrt_approx(&y_next, &y_prev, r2 - (i * i));

                m = (y_prev.f + y_next.f) >> 1;
                if(outer) m = 255 - m;
                if(kl >= 0 && kl < len) mask_buf[kl] = mask_mix(mask_buf[kl], m);
                if(kr >= 0 && kr < len) mask_buf[kr] = mask_mix(mask_buf[kr], m);
                kl--;
                kr++;
                y_prev.f = y_next.f;
            }

            /*If the last pixel was left in its middle therefore
             * the circle still has parts on the next one*/
            if(y_prev.f) {
                m = (y_prev.f * x1.f) >> 9;
                if(outer) m = 255 - m;
                if(kl >= 0 && kl < len) mask_buf[kl] = mask_mix(mask_buf[kl], m);
                if(kr >= 0 && kr < len) mask_buf[kr] = mask_mix(mask_buf[kr], m);
                kl--;
                kr++;
            }

            if(outer == 0) {
                kl++;
                if(kl > len) {
                    return LV_DRAW_MASK_RES_TRANSP;
                }
                if(kl >= 0) _lv_memset_00(&mask_buf[0], kl);

                if(kr < 0) {
                    return LV_DRAW_MASK_RES_TRANSP;
                }
                if(kr < len) _lv_memset_00(&mask_buf[kr], len - kr);
            }
        }
    }

    return LV_DRAW_MASK_RES_CHANGED;
}
