static lv_design_res_t lv_btnmatrix_design(lv_obj_t * btnm, const lv_area_t * clip_area, lv_design_mode_t mode)
{
    if(mode == LV_DESIGN_COVER_CHK) {
        return ancestor_design_f(btnm, clip_area, mode);
    }
    /*Draw the object*/
    else if(mode == LV_DESIGN_DRAW_MAIN) {
        ancestor_design_f(btnm, clip_area, mode);

        lv_btnmatrix_ext_t * ext         = lv_obj_get_ext_attr(btnm);
        if(ext->btn_cnt == 0) return LV_DESIGN_RES_OK;
        lv_area_t area_btnm;
        lv_obj_get_coords(btnm, &area_btnm);

        lv_area_t area_tmp;
        lv_coord_t btn_w;
        lv_coord_t btn_h;

        uint16_t btn_i = 0;
        uint16_t txt_i = 0;
        lv_txt_flag_t txt_flag = LV_TXT_FLAG_NONE;
        if(ext->recolor) txt_flag = LV_TXT_FLAG_RECOLOR;

        lv_draw_rect_dsc_t draw_rect_rel_dsc;
        lv_draw_label_dsc_t draw_label_rel_dsc;

        lv_draw_rect_dsc_t draw_rect_chk_dsc;
        lv_draw_label_dsc_t draw_label_chk_dsc;

        lv_draw_rect_dsc_t draw_rect_ina_dsc;
        lv_draw_label_dsc_t draw_label_ina_dsc;

        lv_draw_rect_dsc_t draw_rect_tmp_dsc;
        lv_draw_label_dsc_t draw_label_tmp_dsc;

        /*The state changes without re-caching the styles, disable the use of cache*/
        lv_state_t state_ori = btnm->state;
        btnm->state = LV_STATE_DEFAULT;
        lv_draw_rect_dsc_init(&draw_rect_rel_dsc);
        lv_draw_label_dsc_init(&draw_label_rel_dsc);
        lv_obj_init_draw_rect_dsc(btnm, LV_BTNMATRIX_PART_BTN, &draw_rect_rel_dsc);
        lv_obj_init_draw_label_dsc(btnm, LV_BTNMATRIX_PART_BTN, &draw_label_rel_dsc);
        draw_label_rel_dsc.flag = txt_flag;
        btnm->state = state_ori;

        bool chk_inited = false;
        bool disabled_inited = false;

        lv_style_int_t padding_top = lv_obj_get_style_pad_top(btnm, LV_BTNMATRIX_PART_BG);
        lv_style_int_t padding_bottom = lv_obj_get_style_pad_bottom(btnm, LV_BTNMATRIX_PART_BG);

        for(btn_i = 0; btn_i < ext->btn_cnt; btn_i++, txt_i++) {
            /*Search the next valid text in the map*/
            while(strcmp(ext->map_p[txt_i], "\n") == 0) {
                txt_i++;
            }

            /*Skip hidden buttons*/
            if(button_is_hidden(ext->ctrl_bits[btn_i])) continue;

            lv_area_copy(&area_tmp, &ext->button_areas[btn_i]);
            area_tmp.x1 += area_btnm.x1;
            area_tmp.y1 += area_btnm.y1;
            area_tmp.x2 += area_btnm.x1;
            area_tmp.y2 += area_btnm.y1;

            btn_w = lv_area_get_width(&area_tmp);
            btn_h = lv_area_get_height(&area_tmp);

            /*Choose the style*/
            lv_draw_rect_dsc_t * draw_rect_dsc_act;
            lv_draw_label_dsc_t * draw_label_dsc_act;
            bool tgl_state = button_get_tgl_state(ext->ctrl_bits[btn_i]);

            if(tgl_state) {
                if(!chk_inited) {
                    btnm->state = LV_STATE_CHECKED;
                    lv_draw_rect_dsc_init(&draw_rect_chk_dsc);
                    lv_draw_label_dsc_init(&draw_label_chk_dsc);
                    lv_obj_init_draw_rect_dsc(btnm, LV_BTNMATRIX_PART_BTN, &draw_rect_chk_dsc);
                    lv_obj_init_draw_label_dsc(btnm, LV_BTNMATRIX_PART_BTN, &draw_label_chk_dsc);
                    draw_label_chk_dsc.flag = txt_flag;
                    btnm->state = state_ori;
                    chk_inited = true;
                }
            }

            if(button_is_inactive(ext->ctrl_bits[btn_i])) {
                if(!disabled_inited) {
                    btnm->state = LV_STATE_DISABLED;
                    lv_draw_rect_dsc_init(&draw_rect_ina_dsc);
                    lv_draw_label_dsc_init(&draw_label_ina_dsc);
                    lv_obj_init_draw_rect_dsc(btnm, LV_BTNMATRIX_PART_BTN, &draw_rect_ina_dsc);
                    lv_obj_init_draw_label_dsc(btnm, LV_BTNMATRIX_PART_BTN, &draw_label_ina_dsc);
                    draw_label_ina_dsc.flag = txt_flag;
                    btnm->state = state_ori;
                    disabled_inited = true;
                }
                draw_rect_dsc_act = &draw_rect_ina_dsc;
                draw_label_dsc_act = &draw_label_ina_dsc;
            }
            /*Simple released or checked buttons button*/
            else if(btn_i != ext->btn_id_pr && btn_i != ext->btn_id_focused) {
                draw_rect_dsc_act = tgl_state ? &draw_rect_chk_dsc : &draw_rect_rel_dsc;
                draw_label_dsc_act = tgl_state ? &draw_label_chk_dsc : &draw_label_rel_dsc;
            }
            /*Focused and/or pressed + checked or released button*/
            else {
                btnm->state = LV_STATE_DEFAULT;
                if(tgl_state) btnm->state = LV_STATE_CHECKED;
                if(ext->btn_id_pr == btn_i) btnm->state |= LV_STATE_PRESSED;
                if(ext->btn_id_focused == btn_i) {
                    btnm->state |= LV_STATE_FOCUSED;
                    if(state_ori & LV_STATE_EDITED) btnm->state |= LV_STATE_EDITED;
                }

                lv_draw_rect_dsc_init(&draw_rect_tmp_dsc);
                lv_draw_label_dsc_init(&draw_label_tmp_dsc);
                lv_obj_init_draw_rect_dsc(btnm, LV_BTNMATRIX_PART_BTN, &draw_rect_tmp_dsc);
                lv_obj_init_draw_label_dsc(btnm, LV_BTNMATRIX_PART_BTN, &draw_label_tmp_dsc);
                draw_label_tmp_dsc.flag = txt_flag;
                draw_rect_dsc_act = &draw_rect_tmp_dsc;
                draw_label_dsc_act = &draw_label_tmp_dsc;

                btnm->state = state_ori;
            }

            lv_style_int_t border_part_ori = draw_rect_dsc_act->border_side;

            /*Remove borders on the edges if `LV_BORDER_INTERNAL`*/
            if(border_part_ori & LV_BORDER_SIDE_INTERNAL) {
                /*Top/Bottom lines*/
                if(area_tmp.y1 == btnm->coords.y1 + padding_top) {
                    draw_rect_dsc_act->border_side &= ~LV_BORDER_SIDE_TOP;
                }
                if(area_tmp.y2 == btnm->coords.y2 - padding_bottom) {
                    draw_rect_dsc_act->border_side &= ~LV_BORDER_SIDE_BOTTOM;
                }

                /*Left/right columns*/
                if(txt_i == 0) { /*First button*/
                    draw_rect_dsc_act->border_side &= ~LV_BORDER_SIDE_LEFT;
                }
                else if(strcmp(ext->map_p[txt_i - 1], "\n") == 0) {
                    draw_rect_dsc_act->border_side &= ~LV_BORDER_SIDE_LEFT;
                }

                if(ext->map_p[txt_i + 1][0] == '\0' || strcmp(ext->map_p[txt_i + 1], "\n") == 0) {
                    draw_rect_dsc_act->border_side &= ~LV_BORDER_SIDE_RIGHT;
                }
            }

            lv_draw_rect(&area_tmp, clip_area, draw_rect_dsc_act);

            draw_rect_dsc_act->border_side = border_part_ori;

            /*Calculate the size of the text*/
            const lv_font_t * font = draw_label_dsc_act->font;
            lv_style_int_t letter_space = draw_label_dsc_act->letter_space;
            lv_style_int_t line_space = draw_label_dsc_act->line_space;
            const char * txt = ext->map_p[txt_i];
            lv_point_t txt_size;
            _lv_txt_get_size(&txt_size, txt, font, letter_space,
                             line_space, lv_area_get_width(&area_btnm), txt_flag);

            area_tmp.x1 += (btn_w - txt_size.x) / 2;
            area_tmp.y1 += (btn_h - txt_size.y) / 2;
            area_tmp.x2 = area_tmp.x1 + txt_size.x;
            area_tmp.y2 = area_tmp.y1 + txt_size.y;

            lv_draw_label(&area_tmp, clip_area, draw_label_dsc_act, txt, NULL);
        }
    }
    else if(mode == LV_DESIGN_DRAW_POST) {
        ancestor_design_f(btnm, clip_area, mode);
    }
    return LV_DESIGN_RES_OK;
}
