s32_t ring_write(tagRingBuf *ring, u8_t *buf, s32_t len)
{
    int ret = -1;
    int cpylen;  //the current time we should move
    int lenleft;  //and how many data still left to move
    int offset;
    unsigned char *src;
    unsigned char *dst;
    if((NULL == ring) || (NULL == buf) || (0 == len))
    {
        return ret;//which means parameters error
    }
    if(ring->datalen == ring->buflen)
    {
        ret = 0;
        return  ret;//which means you could copy nothing here
    }
    ret = len > (ring->buflen - ring->datalen) ? (ring->buflen - ring->datalen) : len;
    //now let us think the method to fill the data,take care of the roll back
    lenleft = ret;
    src = buf;
    if((ring->dataoff + ring->datalen) > ring->buflen) //which means the data has roll back
    {
        offset = (ring->dataoff + ring->datalen) % ring->buflen; //we could move it one time
        cpylen = lenleft;
        dst = ring->buf + offset;
        memcpy(dst, src, cpylen);
        ring->datalen += cpylen;
        lenleft -= cpylen;
    }
    else if((ring->dataoff + ring->datalen + lenleft) > ring->buflen) //which means the data will be roll back
    {
        //which means roll back,we should copy some here to the tail
        offset = ring->dataoff + ring->datalen;
        cpylen = ring->buflen - offset;
        dst = ring->buf + offset;
        memcpy(dst, src, cpylen);
        src += cpylen;
        ring->datalen += cpylen;
        lenleft -= cpylen;
    }
    //here means we could move it by one time
    if(lenleft > 0)
    {
        offset = (ring->dataoff + ring->datalen) % ring->buflen; //we could move it one time
        cpylen = lenleft;
        dst = ring->buf + offset;
        memcpy(dst, src, cpylen);
        ring->datalen += cpylen;
    }
    return ret;
}
