struct dir *los_opendir(const char *path)
{
    struct mount_point *mp;
    const char *path_in_mp = NULL;
    struct dir *dir = NULL;
    int ret = -1;

    if (path == NULL) {
        VFS_ERRNO_SET(EINVAL);
        return NULL;
    }

    dir = (struct dir *)malloc(sizeof(struct dir));

    if (dir == NULL) {
        PRINT_ERR("fail to malloc memory in VFS, <malloc.c> is needed,"
            "make sure it is added\n");
        VFS_ERRNO_SET(ENOMEM);
        return NULL;
    }

    if (LOS_MuxPend(fs_mutex, LOS_WAIT_FOREVER) != LOS_OK) {
        VFS_ERRNO_SET(EAGAIN);
        free(dir);
        return NULL;
    }

    mp = los_mp_find(path, &path_in_mp);
    if ((mp == NULL) || (path_in_mp == NULL)) {
        VFS_ERRNO_SET(ENOENT);
        LOS_MuxPost(fs_mutex);
        free(dir);
        return NULL;
    }

    ret = LOS_MuxPend(mp->m_mutex, LOS_WAIT_FOREVER);

    LOS_MuxPost(fs_mutex);

    if (ret != LOS_OK) {
        VFS_ERRNO_SET(EAGAIN);
        free(dir);
        return NULL;
    }

    if (mp->m_fs->fs_fops->opendir == NULL) {
        VFS_ERRNO_SET(ENOTSUP);
        LOS_MuxPost(mp->m_mutex);
        free(dir);
        return NULL;
    }

    dir->d_mp = mp;
    dir->d_offset = 0;

    ret = mp->m_fs->fs_fops->opendir(dir, path_in_mp);

    if (ret == 0) {
        mp->m_refs++;
    } else {
        free(dir);
        dir = NULL;
    }

    LOS_MuxPost(mp->m_mutex);

    return dir;
}
