int32_t bg36_data_handler(void *arg, int8_t *buf, int32_t len)
{
    int32_t sockid = 0;
    int32_t data_len = 0;
    const char *p1 = NULL;
    const char *p2 = NULL;
    QUEUE_BUFF qbuf;
    int32_t ret = 0;
    int32_t offset = 0;

    while (offset < len) {
        p1 = strstr((char *)(buf + offset), "recv");
        if (p1 == NULL) {
            AT_LOG("buf done, offset:%ld len:%ld", offset, len);
            return AT_OK;
        }
        p1 += strlen("\"recv\"");
        sockid = chartoint(p1 + 1);

        if ((sockid >= MAX_BG36_SOCK_NUM) || (sockinfo[sockid].used_flag == false)) {
            AT_LOG("invalid sock id %ld", sockid);
            return AT_FAILED;
        }

        p2 = strstr((char *)(p1 + 1), ",");
        if (p2 == NULL) {
            AT_LOG("invalid data %ld", sockid);
            return AT_FAILED;
        }
        data_len = chartoint(p2 + 1);
        if (data_len > AT_DATA_LEN * 2 || data_len <= 0) {
            AT_LOG("datalen too long:%ld", data_len);
            return AT_FAILED;
        }

        qbuf.addr = at_malloc(data_len);
        if (qbuf.addr == NULL) {
            AT_LOG("at_malloc null");
            return AT_OK;
        }

        p1 = strstr(p2, "\r\n");
        if (p1 != NULL) {
            memcpy(qbuf.addr, p1 + 2, data_len);
            qbuf.len = data_len;
            ret = LOS_QueueWriteCopy(at.linkid[sockid].qid, &qbuf, sizeof(qbuf), 0);
            if (ret != LOS_OK) {
                AT_LOG("LOS_QueueWriteCopy failed! ret %ld", ret);
                at_free(qbuf.addr);
            }
            offset += data_len + strlen("+QIURC: \"recv\",");
        } else {
            AT_LOG("recv data null!");
            return AT_FAILED;
        }
    }

    return AT_OK;
}
