INT32 CmdLog(INT32 argc, const CHAR **argv)
{
    size_t level;
    size_t module;
    CHAR *p = NULL;

    if (argc != 2) { /* 2:count of parameter */
        printf("Usage: log level <num>\n");
        printf("Usage: log module <num>\n");
        printf("Usage: log path <PATH>\n");
        return -1;
    }

    if (!strncmp(argv[0], "level", strlen(argv[0]) + 1)) {
        level = strtoul(argv[1], &p, 0);
        if ((*p != 0) || (level > TRACE_DEBUG) || (level < TRACE_EMG)) {
            printf("current log level %s\n", OsLkCurLogLvGet());
            printf("log %s [num] can access as 0:EMG 1:COMMOM 2:ERROR 3:WARN 4:INFO 5:DEBUG\n", argv[0]);
        } else {
            OsLkTraceLvSet(level);
            printf("Set current log level %s\n", OsLkCurLogLvGet());
        }
    } else if (!strncmp(argv[0], "module", strlen(argv[0]) + 1)) {
        module = strtoul(argv[1], &p, 0);
        if ((*p != 0) || (module > MODULE4) || (module < MODULE0)) {
            printf("log %s can't access %s\n", argv[0], argv[1]);
            printf("not support yet\n");
            return -1;
        } else {
            OsLkModuleLvSet(module);
            printf("not support yet\n");
        }
    } else if (!strncmp(argv[0], "path", strlen(argv[0]) + 1)) {
        printf("not support yet\n");
    } else {
        printf("Usage: log level <num>\n");
        printf("Usage: log module <num>\n");
        printf("Usage: log path <PATH>\n");
        return -1;
    }

    return 0;
}
