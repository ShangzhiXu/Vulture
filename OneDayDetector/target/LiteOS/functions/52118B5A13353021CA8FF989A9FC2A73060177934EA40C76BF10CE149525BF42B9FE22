lv_obj_t * lv_table_create(lv_obj_t * par, const lv_obj_t * copy)
{
    LV_LOG_TRACE("table create started");

    /*Create the ancestor of table*/
    lv_obj_t * table = lv_obj_create(par, copy);
    LV_ASSERT_MEM(table);
    if(table == NULL) return NULL;

    /*Allocate the table type specific extended data*/
    lv_table_ext_t * ext = lv_obj_allocate_ext_attr(table, sizeof(lv_table_ext_t));
    LV_ASSERT_MEM(ext);
    if(ext == NULL) {
        lv_obj_del(table);
        return NULL;
    }

    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_cb(table);
    if(ancestor_design == NULL) ancestor_design = lv_obj_get_design_cb(table);

    /*Initialize the allocated 'ext' */
    ext->cell_data     = NULL;
    ext->col_cnt       = 0;
    ext->row_cnt       = 0;
    ext->row_h         = NULL;
    ext->cell_types    = 1;

    uint16_t i;
    for(i = 0; i < LV_TABLE_CELL_STYLE_CNT; i++) {
        lv_style_list_init(&ext->cell_style[i]);
    }

    for(i = 0; i < LV_TABLE_COL_MAX; i++) {
        ext->col_w[i] = LV_DPI;
    }

    /*The signal and design functions are not copied so set them here*/
    lv_obj_set_signal_cb(table, lv_table_signal);
    lv_obj_set_design_cb(table, lv_table_design);

    /*Init the new table table*/
    if(copy == NULL) {
        lv_theme_apply(table, LV_THEME_TABLE);
    }
    /*Copy an existing table*/
    else {
        lv_table_ext_t * copy_ext = lv_obj_get_ext_attr(copy);
        for(i = 0; i < LV_TABLE_CELL_STYLE_CNT; i++) {
            lv_style_list_copy(&ext->cell_style[i], &copy_ext->cell_style[i]);
            lv_table_set_row_cnt(table, copy_ext->row_cnt);
            lv_table_set_col_cnt(table, copy_ext->col_cnt);
        }

        /*Refresh the style with new signal function*/
        lv_obj_refresh_style(table, LV_STYLE_PROP_ALL);
    }

    LV_LOG_INFO("table created");

    return table;
}
