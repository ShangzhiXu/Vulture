int test5(struct Options options)
{
    int i = 0;
    int rc = 0;
    unsigned char buf[100];
    int buflen = sizeof(buf);
#define TOPIC_COUNT 2

    unsigned char dup = 0;
    unsigned short msgid = 23;
    int count = TOPIC_COUNT;
    MQTTString topicStrings[TOPIC_COUNT] = { MQTTString_initializer, MQTTString_initializer };

    unsigned char dup2 = 1;
    unsigned short msgid2 = 2223;
    int count2 = 0;
    MQTTString topicStrings2[TOPIC_COUNT] = { MQTTString_initializer, MQTTString_initializer };

    fprintf(xml, "<testcase classname=\"test1\" name=\"de/serialization\"");
    global_start_time = start_clock();
    failures = 0;
    MyLog(LOGA_INFO, "Starting test 2 - serialization of unsubscribe and back");

    topicStrings[0].cstring = "mytopic";
    topicStrings[1].cstring = "mytopic2";
    rc = MQTTSerialize_unsubscribe(buf, buflen, dup, msgid, count, topicStrings);
    assert("good rc from serialize unsubscribe", rc > 0, "rc was %d\n", rc);

    rc = MQTTDeserialize_unsubscribe(&dup2, &msgid2, 2, &count2, topicStrings2, buf, buflen);
    assert("good rc from deserialize unsubscribe", rc == 1, "rc was %d\n", rc);

    /* data after should be the same as data before */
    assert("dups should be the same", dup == dup2, "dups were different %d\n", dup2);
    assert("msgids should be the same", msgid == msgid2, "msgids were different %d\n", msgid2);

    assert("count should be the same", count == count2, "counts were different %d\n", count2);

    for (i = 0; i < count2; ++i)
        assert("topics should be the same",
               checkMQTTStrings(topicStrings[i], topicStrings2[i]), "topics were different %s\n", "");

    /* exit: */
    MyLog(LOGA_INFO, "TEST5: test %s. %d tests run, %d failures.",
          (failures == 0) ? "passed" : "failed", tests, failures);
    write_test_result();
    return failures;
}
