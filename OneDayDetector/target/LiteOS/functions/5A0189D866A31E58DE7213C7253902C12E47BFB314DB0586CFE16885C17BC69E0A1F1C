int timer_settime(timer_t timerId, int flags, const struct itimerspec *value, /* new value */
                  struct itimerspec *oldValue)                                /* old value to return, always 0 */
{
    LosSwtmrCB *swtmr = (LosSwtmrCB *)timerId;
    UINT32 interval, expiry, ret;
    UINT32 intSave;

    (VOID) flags;
    (VOID) oldValue;
    if ((value == NULL) || OS_INT_ACTIVE || (timerId == NULL)) {
        errno = EINVAL;
        return -1;
    }

    if (!ValidTimespec(&value->it_value) || !ValidTimespec(&value->it_interval)) {
        errno = EINVAL;
        return -1;
    }

    ret = LOS_SwtmrStop(swtmr->timerId);
    if (ret == LOS_ERRNO_SWTMR_ID_INVALID) {
        errno = EINVAL;
        return -1;
    }

    expiry = OsTimespec2Tick(&value->it_value);
    interval = OsTimespec2Tick(&value->it_interval);
    if (expiry == 0) {
        /*
         * 1) when expiry is 0, means timer should be stopped.
         * 2) If timer is ticking, stopping timer is already done before.
         * 3) If timer is created but not ticking, return 0 as well.
         */
        return 0;
    } else {
        LOS_SpinLockSave(&g_swtmrSpin, &intSave);
        if (interval == 0) {
            swtmr->mode = LOS_SWTMR_MODE_ONCE;
        } else {
            swtmr->mode = LOS_SWTMR_MODE_OPP;
        }
    }

    swtmr->expiry = expiry;
    swtmr->interval = interval;
    swtmr->overrun = 0;
    LOS_SpinUnlockRestore(&g_swtmrSpin, intSave);
    if (LOS_SwtmrStart(swtmr->timerId)) {
        errno = EINVAL;
        return -1;
    }

    return 0;
}
