s32_t spiffs_gc_check(
    spiffs *fs,
    u32_t len)
{
    s32_t res;
    s32_t free_pages =
        (SPIFFS_PAGES_PER_BLOCK(fs) - SPIFFS_OBJ_LOOKUP_PAGES(fs)) * (fs->block_count - 2)
        - fs->stats_p_allocated - fs->stats_p_deleted;
    int tries = 0;

    if (fs->free_blocks > 3 &&
            (s32_t)len < free_pages * (s32_t)SPIFFS_DATA_PAGE_SIZE(fs))
    {
        return SPIFFS_OK;
    }

    u32_t needed_pages = (len + SPIFFS_DATA_PAGE_SIZE(fs) - 1) / SPIFFS_DATA_PAGE_SIZE(fs);
    //  if (fs->free_blocks <= 2 && (s32_t)needed_pages > free_pages) {
    //    SPIFFS_GC_DBG("gc: full freeblk:"_SPIPRIi" needed:"_SPIPRIi" free:"_SPIPRIi" dele:"_SPIPRIi"\n", fs->free_blocks, needed_pages, free_pages, fs->stats_p_deleted);
    //    return SPIFFS_ERR_FULL;
    //  }
    if ((s32_t)needed_pages > (s32_t)(free_pages + fs->stats_p_deleted))
    {
        SPIFFS_GC_DBG("gc_check: full freeblk:"_SPIPRIi" needed:"_SPIPRIi" free:"_SPIPRIi" dele:"_SPIPRIi"\n", fs->free_blocks, needed_pages, free_pages, fs->stats_p_deleted);
        return SPIFFS_ERR_FULL;
    }

    do
    {
        SPIFFS_GC_DBG("\ngc_check #"_SPIPRIi": run gc free_blocks:"_SPIPRIi" pfree:"_SPIPRIi" pallo:"_SPIPRIi" pdele:"_SPIPRIi" ["_SPIPRIi"] len:"_SPIPRIi" of "_SPIPRIi"\n",
                      tries,
                      fs->free_blocks, free_pages, fs->stats_p_allocated, fs->stats_p_deleted, (free_pages + fs->stats_p_allocated + fs->stats_p_deleted),
                      len, (u32_t)(free_pages * SPIFFS_DATA_PAGE_SIZE(fs)));

        spiffs_block_ix *cands;
        int count;
        spiffs_block_ix cand;
        s32_t prev_free_pages = free_pages;
        // if the fs is crammed, ignore block age when selecting candidate - kind of a bad state
        res = spiffs_gc_find_candidate(fs, &cands, &count, free_pages <= 0);
        SPIFFS_CHECK_RES(res);
        if (count == 0)
        {
            SPIFFS_GC_DBG("gc_check: no candidates, return\n");
            return (s32_t)needed_pages < free_pages ? SPIFFS_OK : SPIFFS_ERR_FULL;
        }
#if SPIFFS_GC_STATS
        fs->stats_gc_runs++;
#endif
        cand = cands[0];
        fs->cleaning = 1;
        //SPIFFS_GC_DBG("gcing: cleaning block "_SPIPRIi"\n", cand);
        res = spiffs_gc_clean(fs, cand);
        fs->cleaning = 0;
        if (res < 0)
        {
            SPIFFS_GC_DBG("gc_check: cleaning block "_SPIPRIi", result "_SPIPRIi"\n", cand, res);
        }
        else
        {
            SPIFFS_GC_DBG("gc_check: cleaning block "_SPIPRIi", result "_SPIPRIi"\n", cand, res);
        }
        SPIFFS_CHECK_RES(res);

        res = spiffs_gc_erase_page_stats(fs, cand);
        SPIFFS_CHECK_RES(res);

        res = spiffs_gc_erase_block(fs, cand);
        SPIFFS_CHECK_RES(res);

        free_pages =
            (SPIFFS_PAGES_PER_BLOCK(fs) - SPIFFS_OBJ_LOOKUP_PAGES(fs)) * (fs->block_count - 2)
            - fs->stats_p_allocated - fs->stats_p_deleted;

        if (prev_free_pages <= 0 && prev_free_pages == free_pages)
        {
            // abort early to reduce wear, at least tried once
            SPIFFS_GC_DBG("gc_check: early abort, no result on gc when fs crammed\n");
            break;
        }

    }
    while (++tries < SPIFFS_GC_MAX_RUNS && (fs->free_blocks <= 2 ||
                                            (s32_t)len > free_pages * (s32_t)SPIFFS_DATA_PAGE_SIZE(fs)));

    free_pages =
        (SPIFFS_PAGES_PER_BLOCK(fs) - SPIFFS_OBJ_LOOKUP_PAGES(fs)) * (fs->block_count - 2)
        - fs->stats_p_allocated - fs->stats_p_deleted;
    if ((s32_t)len > free_pages * (s32_t)SPIFFS_DATA_PAGE_SIZE(fs))
    {
        res = SPIFFS_ERR_FULL;
    }

    SPIFFS_GC_DBG("gc_check: finished, "_SPIPRIi" dirty, blocks "_SPIPRIi" free, "_SPIPRIi" pages free, "_SPIPRIi" tries, res "_SPIPRIi"\n",
                  fs->stats_p_allocated + fs->stats_p_deleted,
                  fs->free_blocks, free_pages, tries, res);

    return res;
}
