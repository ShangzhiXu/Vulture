static struct kifs_node *kifs_file_creat(void *root, const char *path_in_mp, uint32_t flags)
{
    struct kifs_node *dir;
    struct kifs_node *node;
    const char *t;

    if (path_in_mp [strlen(path_in_mp) - 1] == '/') {
        return NULL;
    }

    dir = kifs_file_find((struct kifs_node *) root, path_in_mp, &path_in_mp);
    if (dir == NULL) { /* impossible */
        return NULL;
    }

    if (*path_in_mp == '\0') {
        return NULL;
    }

    if ((dir->attr & KIFS_ATTR_D) == 0) {
        return NULL;
    }

    while ((t = strchr(path_in_mp, '/')) != NULL) {
        if ((t - path_in_mp) >= LOS_MAX_FILE_NAME_LEN) {
            return NULL;
        }

        node = (struct kifs_node *)malloc(sizeof(struct kifs_node));
        if (node == NULL) {
            PRINT_ERR ("fail to malloc memory in KIFS, <malloc.c> is needed,"
                       "make sure it is added\n");
            return NULL;
        }

        memset(node, 0, sizeof (struct kifs_node));
        strncpy(node->name, path_in_mp, t - path_in_mp);

        node->parent = dir;
        node->sibling = dir->child;
        dir->child = node;
        node->attr = KIFS_ATTR_D;
        dir = node;
        path_in_mp = t + 1;

        while (*path_in_mp == '/') {
            path_in_mp++;
        }
    }

    if (*path_in_mp == '\0') {
        return NULL;
    }

    node = (struct kifs_node *)malloc(sizeof(struct kifs_node));
    if (node == NULL) {
        PRINT_ERR("fail to malloc memory in KIFS, <malloc.c> is needed,"
                   "make sure it is added\n");
        return NULL;
    }

    memset(node, 0, sizeof(struct kifs_node));
    strcpy(node->name, path_in_mp);

    node->parent = dir;
    node->sibling = dir->child;
    dir->child = node;
    node->attr = flags;

    return node;
}
