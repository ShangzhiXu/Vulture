static void draw_dates(lv_obj_t * calendar, const lv_area_t * clip_area)
{
    lv_calendar_ext_t * ext     = lv_obj_get_ext_attr(calendar);

    const lv_font_t * nums_font = lv_obj_get_style_text_font(calendar, LV_CALENDAR_PART_DATE);

    lv_style_int_t date_top = lv_obj_get_style_pad_top(calendar, LV_CALENDAR_PART_DATE);
    lv_style_int_t date_bottom = lv_obj_get_style_pad_bottom(calendar, LV_CALENDAR_PART_DATE);
    lv_style_int_t date_left = lv_obj_get_style_pad_left(calendar, LV_CALENDAR_PART_DATE);
    lv_style_int_t date_right = lv_obj_get_style_pad_right(calendar, LV_CALENDAR_PART_DATE);
    lv_style_int_t date_inner = lv_obj_get_style_pad_inner(calendar, LV_CALENDAR_PART_DATE);

    lv_coord_t days_y1 = calendar->coords.y1 + date_top + get_header_height(calendar) + get_day_names_height(calendar);
    lv_coord_t days_h = calendar->coords.y2 - days_y1 - date_bottom;

    /*The state changes without re-caching the styles, disable the use of cache*/
    lv_state_t state_ori = calendar->state;
    calendar->state = LV_STATE_DEFAULT;

    lv_state_t month_state = LV_STATE_DISABLED;

    uint8_t day_cnt;
    lv_coord_t days_w      = lv_obj_get_width(calendar) - date_left - date_right;
    lv_coord_t box_w      = (days_w - date_inner * 6) / 7;
    lv_coord_t box_h      = (days_h - 5 * date_inner) / 6;
    lv_coord_t box_size = LV_MATH_MIN(box_w, box_h);

    uint8_t month_start_day = get_day_of_week(ext->showed_date.year, ext->showed_date.month, 1);

    day_draw_state_t draw_state;

    /*If starting with the first day of the week then the previous month is not visible*/
    if(month_start_day == 0) {
        day_cnt    = 1;
        draw_state = DAY_DRAW_ACT_MONTH;
        month_state  = 0;
    }
    else {
        draw_state = DAY_DRAW_PREV_MONTH;
        day_cnt = get_month_length(ext->showed_date.year, ext->showed_date.month - 1); /*Length of the previous month*/
        day_cnt -= month_start_day - 1; /*First visible number of the previous month*/
        month_state = LV_STATE_DISABLED;
    }

    bool month_of_today_shown = false;
    if(ext->showed_date.year == ext->today.year && ext->showed_date.month == ext->today.month) {
        month_of_today_shown = true;
    }

    char buf[3];

    /*Draw 6 weeks*/
    lv_draw_rect_dsc_t rect_dsc;
    lv_draw_label_dsc_t label_dsc;
    lv_state_t prev_state = 0xFF;
    uint32_t week;
    for(week = 0; week < 6; week++) {
        lv_area_t box_area;

        box_area.y1 = days_y1 + ((days_h - box_size) * week) / 5;
        box_area.y2 = box_area.y1 + box_size - 1;

        if(box_area.y1 > clip_area->y2) {
            calendar->state = state_ori;
            return;
        }

        lv_area_t label_area;
        label_area.y1 = box_area.y1 + (lv_area_get_height(&box_area) - lv_font_get_line_height(nums_font)) / 2;
        label_area.y2 = label_area.y1 + lv_font_get_line_height(nums_font);

        /*Draw the 7 days of a week*/
        uint32_t day;
        for(day = 0; day < 7; day++) {
            /*The previous month is over*/
            if(draw_state == DAY_DRAW_PREV_MONTH && day == month_start_day) {
                draw_state = DAY_DRAW_ACT_MONTH;
                day_cnt    = 1;
                month_state  = 0;
            }
            /*The current month is over*/
            else if(draw_state == DAY_DRAW_ACT_MONTH &&
                    day_cnt > get_month_length(ext->showed_date.year, ext->showed_date.month)) {
                draw_state = DAY_DRAW_NEXT_MONTH;
                day_cnt    = 1;
                month_state  = LV_STATE_DISABLED;
            }

            if(box_area.y2 < clip_area->y1) {
                day_cnt++;
                continue;
            }

            lv_state_t day_state = month_state;
            if(is_pressed(calendar, draw_state, ext->showed_date.year, ext->showed_date.month, day_cnt)) {
                day_state |= LV_STATE_PRESSED;
            }
            if(is_highlighted(calendar, draw_state, ext->showed_date.year, ext->showed_date.month, day_cnt)) {
                day_state |= LV_STATE_CHECKED;
            }
            if(month_of_today_shown && day_cnt == ext->today.day && draw_state == DAY_DRAW_ACT_MONTH) {
                day_state |= LV_STATE_FOCUSED;
            }

            if(prev_state != day_state) {
                lv_draw_rect_dsc_init(&rect_dsc);
                lv_draw_label_dsc_init(&label_dsc);
                label_dsc.flag = LV_TXT_FLAG_CENTER;

                calendar->state = day_state;
                lv_obj_init_draw_label_dsc(calendar, LV_CALENDAR_PART_DATE, &label_dsc);
                lv_obj_init_draw_rect_dsc(calendar, LV_CALENDAR_PART_DATE, &rect_dsc);

                prev_state = day_state;
            }

            label_area.x1 = calendar->coords.x1 + ((days_w - box_size) * day) / 6 + date_left;
            label_area.x2 = label_area.x1 + box_size - 1;

            box_area.x1 = label_area.x1;
            box_area.x2 = label_area.x2;


            lv_draw_rect(&box_area, clip_area, &rect_dsc);

            /*Write the day's number*/
            _lv_utils_num_to_str(day_cnt, buf);
            lv_draw_label(&label_area, clip_area, &label_dsc, buf, NULL);

            /*Go to the next day*/
            day_cnt++;
        }
    }
    calendar->state = state_ori;


}
