HAL_StatusTypeDef HAL_DCMI_Start_DMA(DCMI_HandleTypeDef* hdcmi, uint32_t DCMI_Mode, uint32_t pData, uint32_t Length)
{
  uint32_t circular_copy_length = 0; 
    
  /* Check capture parameter */
  assert_param(IS_DCMI_CAPTURE_MODE(DCMI_Mode));

  /* Process Locked */
  __HAL_LOCK(hdcmi);
  
  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
  
  /* Configure the DCMI Mode and enable the DCMI IP at the same time */
  MODIFY_REG(hdcmi->Instance->CR, (DCMI_CR_CM|DCMI_CR_ENABLE), (DCMI_Mode|DCMI_CR_ENABLE));

  /* Set the DMA conversion complete callback */
  hdcmi->DMA_Handle->XferCpltCallback = DCMI_DMAXferCplt;

  /* Set the DMA error callback */
  hdcmi->DMA_Handle->XferErrorCallback = DCMI_DMAError;

  if(Length <= 0xFFFF) 
  {
    hdcmi->XferCount = 0; /* Mark as direct transfer from DCMI_DR register to final destination buffer */

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, Length) != HAL_OK)
    {
      /* Update error code */
      hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
      
      /* Set state back to Ready */
      hdcmi->State = HAL_DCMI_STATE_READY;
        
      /* Process Unlocked */
      __HAL_UNLOCK(hdcmi);
          
       return HAL_ERROR;
    }    
  }
  else /* Capture length is longer than DMA maximum transfer size */
  {  
     /* Set DMA in circular mode */
    hdcmi->DMA_Handle->Init.Mode = DMA_CIRCULAR;
         
    /* Set the DMA half transfer complete callback */
    hdcmi->DMA_Handle->XferHalfCpltCallback = DCMI_DMAHalfXferCplt;
    
    /* Initialize transfer parameters */
    hdcmi->XferSize = Length;  /* Store the complete transfer length in DCMI handle */
    hdcmi->pBuffPtr = pData;   /* Final destination buffer pointer */
    
    circular_copy_length = DCMI_TransferSize(Length);

    /* Check if issue in intermediate length computation */
    if (circular_copy_length == 0) 
    {
      /* Set state back to Ready */
      hdcmi->State = HAL_DCMI_STATE_READY;
            
      /* Process Unlocked */
      __HAL_UNLOCK(hdcmi);
          
       return HAL_ERROR;    
    } 
    
    /* Store the number of half - intermediate buffer copies needed */
    hdcmi->XferCount = 2 * ((Length / circular_copy_length) - 1);  
    /* Store the half-buffer copy length */
    hdcmi->HalfCopyLength = circular_copy_length / 2;    
    
    /* DCMI DR samples in circular mode will be copied 
       at the end of the final buffer. 
       Now compute the circular buffer start address. */
    /* Start by pointing at the final buffer */ 
    hdcmi->pCircularBuffer = pData;
    /* Update pCircularBuffer in "moving" at the end of the final
       buffer, don't forger to convert in bytes to compute exact address */    
   hdcmi->pCircularBuffer +=  4 * (((Length / circular_copy_length) - 1) * circular_copy_length); 
    
    /* Initiate the circular DMA transfer from DCMI IP to final buffer end */  
    if ( HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)hdcmi->pCircularBuffer, circular_copy_length) != HAL_OK)
    {      
      /* Update error code */
      hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
      
      /* Set state back to Ready */
      hdcmi->State = HAL_DCMI_STATE_READY;
            
      /* Process Unlocked */
      __HAL_UNLOCK(hdcmi);
          
       return HAL_ERROR;
    }    
  }

  /* Enable Capture */
  SET_BIT(hdcmi->Instance->CR, DCMI_CR_CAPTURE);  

  /* Release Lock */
  __HAL_UNLOCK(hdcmi);

  /* Return function status */
  return HAL_OK;
}
