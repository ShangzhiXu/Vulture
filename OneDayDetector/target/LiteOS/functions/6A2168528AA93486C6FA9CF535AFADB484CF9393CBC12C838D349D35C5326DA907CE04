static lv_res_t release_handler(lv_obj_t * roller)
{

    /*If there was dragging `DRAG_END` signal will refresh the position and update the selected option*/
    if(lv_indev_is_dragging(lv_indev_get_act())) return LV_RES_OK;

    lv_roller_ext_t * ext = lv_obj_get_ext_attr(roller);

    lv_indev_t * indev = lv_indev_get_act();
#if LV_USE_GROUP
    /*Leave edit mode once a new option is selected*/
    lv_indev_type_t indev_type = lv_indev_get_type(indev);
    if(indev_type == LV_INDEV_TYPE_ENCODER || indev_type == LV_INDEV_TYPE_KEYPAD) {
        ext->sel_opt_id_ori = ext->sel_opt_id;

        if(indev_type == LV_INDEV_TYPE_ENCODER) {
            lv_group_t * g      = lv_obj_get_group(roller);
            if(lv_group_get_editing(g)) {
                lv_group_set_editing(g, false);
            }
        }
    }
#endif

    lv_obj_t * label = get_label(roller);
    if(label == NULL) return LV_RES_OK;

    if(lv_indev_get_type(indev) == LV_INDEV_TYPE_POINTER || lv_indev_get_type(indev) == LV_INDEV_TYPE_BUTTON) {
        /*Search the clicked option (For KEYPAD and ENCODER the new value should be already set)*/
        uint16_t new_opt  = 0;
        lv_point_t p;
        lv_indev_get_point(indev, &p);
        p.y -= label->coords.y1;
        p.x -= label->coords.x1;
        uint16_t letter_i;
        letter_i = lv_label_get_letter_on(label, &p);

        const char * txt  = lv_label_get_text(label);
        uint32_t i        = 0;
        uint32_t i_prev   = 0;

        uint32_t letter_cnt = 0;
        for(letter_cnt = 0; letter_cnt < letter_i; letter_cnt++) {
            uint32_t letter = _lv_txt_encoded_next(txt, &i);
            /*Count he lines to reach the clicked letter. But ignore the last '\n' because it
             * still belongs to the clicked line*/
            if(letter == '\n' && i_prev != letter_i) new_opt++;
            i_prev = i;
        }
        lv_roller_set_selected(roller, new_opt, LV_ANIM_ON);
    }

    uint32_t id  = ext->sel_opt_id; /*Just to use uint32_t in event data*/
    lv_res_t res = lv_event_send(roller, LV_EVENT_VALUE_CHANGED, &id);
    return res;
}
