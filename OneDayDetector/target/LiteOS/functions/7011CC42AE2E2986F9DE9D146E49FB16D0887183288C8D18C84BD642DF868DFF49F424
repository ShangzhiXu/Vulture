const uint8_t * lv_font_get_bitmap_fmt_txt(const lv_font_t * font, uint32_t unicode_letter)
{
    if(unicode_letter == '\t') unicode_letter = ' ';

    lv_font_fmt_txt_dsc_t * fdsc = (lv_font_fmt_txt_dsc_t *) font->dsc;
    uint32_t gid = get_glyph_dsc_id(font, unicode_letter);
    if(!gid) return NULL;

    const lv_font_fmt_txt_glyph_dsc_t * gdsc = &fdsc->glyph_dsc[gid];

    if(fdsc->bitmap_format == LV_FONT_FMT_TXT_PLAIN) {
        if(gdsc) return &fdsc->glyph_bitmap[gdsc->bitmap_index];
    }
    /*Handle compressed bitmap*/
    else {
        uint32_t gsize = gdsc->box_w * gdsc->box_h;
        if(gsize == 0) return NULL;

        uint32_t buf_size = gsize;
        /*Compute memory size needed to hold decompressed glyph, rounding up*/
        switch(fdsc->bpp) {
            case 1:
                buf_size = (gsize + 7) >> 3;
                break;
            case 2:
                buf_size = (gsize + 3) >> 2;
                break;
            case 3:
                buf_size = (gsize + 1) >> 1;
                break;
            case 4:
                buf_size = (gsize + 1) >> 1;
                break;
        }

        if(_lv_mem_get_size(decompr_buf) < buf_size) {
            decompr_buf = lv_mem_realloc(decompr_buf, buf_size);
            LV_ASSERT_MEM(decompr_buf);
            if(decompr_buf == NULL) return NULL;
        }

        decompress(&fdsc->glyph_bitmap[gdsc->bitmap_index], decompr_buf, gdsc->box_w, gdsc->box_h, (uint8_t)fdsc->bpp);
        return decompr_buf;
    }

    /*If not returned earlier then the letter is not found in this font*/
    return NULL;
}
