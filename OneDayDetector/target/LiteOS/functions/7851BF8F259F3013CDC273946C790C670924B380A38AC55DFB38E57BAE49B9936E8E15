static lv_res_t lv_img_signal(lv_obj_t * img, lv_signal_t sign, void * param)
{
    lv_res_t res;
    if(sign == LV_SIGNAL_GET_STYLE) {

        lv_get_style_info_t * info = param;
        info->result = lv_img_get_style(img, info->part);
        if(info->result != NULL) return LV_RES_OK;
        else return ancestor_signal(img, sign, param);
    }

    /* Include the ancient signal function */
    res = ancestor_signal(img, sign, param);
    if(res != LV_RES_OK) return res;

    if(sign == LV_SIGNAL_GET_TYPE) return lv_obj_handle_get_type_signal(param, LV_OBJX_NAME);

    lv_img_ext_t * ext = lv_obj_get_ext_attr(img);
    if(sign == LV_SIGNAL_CLEANUP) {
        if(ext->src_type == LV_IMG_SRC_FILE || ext->src_type == LV_IMG_SRC_SYMBOL) {
            lv_mem_free(ext->src);
            ext->src      = NULL;
            ext->src_type = LV_IMG_SRC_UNKNOWN;
        }
    }
    else if(sign == LV_SIGNAL_STYLE_CHG) {
        /*Refresh the file name to refresh the symbol text size*/
        if(ext->src_type == LV_IMG_SRC_SYMBOL) {
            lv_img_set_src(img, ext->src);
        }
    }
    else if(sign == LV_SIGNAL_REFR_EXT_DRAW_PAD) {

        lv_style_int_t transf_zoom = lv_obj_get_style_transform_zoom(img, LV_IMG_PART_MAIN);
        transf_zoom = (transf_zoom * ext->zoom) >> 8;

        lv_style_int_t transf_angle = lv_obj_get_style_transform_angle(img, LV_IMG_PART_MAIN);
        transf_angle += ext->angle;

        /*If the image has angle provide enough room for the rotated corners */
        if(transf_angle || transf_zoom != LV_IMG_ZOOM_NONE) {
            lv_area_t a;
            _lv_img_buf_get_transformed_area(&a, ext->w, ext->h, transf_angle, transf_zoom, &ext->pivot);
            lv_coord_t pad_ori = img->ext_draw_pad;
            img->ext_draw_pad = LV_MATH_MAX(img->ext_draw_pad, pad_ori - a.x1);
            img->ext_draw_pad = LV_MATH_MAX(img->ext_draw_pad, pad_ori - a.y1);
            img->ext_draw_pad = LV_MATH_MAX(img->ext_draw_pad, pad_ori + a.x2 - ext->w);
            img->ext_draw_pad = LV_MATH_MAX(img->ext_draw_pad, pad_ori + a.y2 - ext->h);
        }

        /*Handle the padding of the background*/
        lv_style_int_t left = lv_obj_get_style_pad_left(img, LV_IMG_PART_MAIN);
        lv_style_int_t right = lv_obj_get_style_pad_right(img, LV_IMG_PART_MAIN);
        lv_style_int_t top = lv_obj_get_style_pad_top(img, LV_IMG_PART_MAIN);
        lv_style_int_t bottom = lv_obj_get_style_pad_bottom(img, LV_IMG_PART_MAIN);

        img->ext_draw_pad = LV_MATH_MAX(img->ext_draw_pad, left);
        img->ext_draw_pad = LV_MATH_MAX(img->ext_draw_pad, right);
        img->ext_draw_pad = LV_MATH_MAX(img->ext_draw_pad, top);
        img->ext_draw_pad = LV_MATH_MAX(img->ext_draw_pad, bottom);


    }
    else if(sign == LV_SIGNAL_HIT_TEST) {
        lv_hit_test_info_t * info = param;
        if(ext->zoom != 256 && ext->angle == 0) {
            lv_coord_t origin_width = lv_area_get_width(&img->coords);
            lv_coord_t origin_height = lv_area_get_height(&img->coords);
            lv_coord_t scaled_width = (origin_width * ext->zoom + 255) / 256;
            lv_coord_t scaled_height = (origin_height * ext->zoom + 255) / 256;

            lv_coord_t width_offset = (origin_width - scaled_width) / 2;
            lv_coord_t height_offset = (origin_height - scaled_height) / 2;

            lv_area_t coords;
            lv_area_copy(&coords, &img->coords);
            coords.x1 += width_offset;
            coords.x2 -= width_offset;
            coords.y1 += height_offset;
            coords.y2 -= height_offset;
            info->result = _lv_area_is_point_on(&coords, info->point, 0);
        }
        else
            info->result = lv_obj_is_point_on_coords(img, info->point);
    }

    return res;
}
