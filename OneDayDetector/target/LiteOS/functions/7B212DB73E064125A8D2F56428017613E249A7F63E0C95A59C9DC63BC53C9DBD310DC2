static uint8_t prv_res2tlv(lwm2m_data_t *dataP)
{
    //-------------------------------------------------------------------- JH --
    uint8_t ret = COAP_205_CONTENT;
    float get_value;
    uint64_t timestamp;
    atiny_velocity_s velocity;

    switch (dataP->id) { // location resourceId
    case RES_M_LATITUDE: {
        if (atiny_cmd_ioctl(ATINY_GET_LATITUDE, (char *)&get_value, sizeof(float)) == ATINY_OK) {
            lwm2m_data_encode_float(get_value, dataP);
        } else {
            ret = COAP_400_BAD_REQUEST;
        }
        break;
    }
    case RES_M_LONGITUDE: {
        if (atiny_cmd_ioctl(ATINY_GET_LONGITUDE, (char *)&get_value, sizeof(float)) == ATINY_OK) {
            lwm2m_data_encode_float(get_value, dataP);
        } else {
            ret = COAP_400_BAD_REQUEST;
        }
        break;
    }
    case RES_O_ALTITUDE: {
        if (atiny_cmd_ioctl(ATINY_GET_ALTITUDE, (char *)&get_value, sizeof(float)) == ATINY_OK) {
            lwm2m_data_encode_float(get_value, dataP);
        } else {
            ret = COAP_400_BAD_REQUEST;
        }
        break;
    }
    case RES_O_RADIUS: {
        if (atiny_cmd_ioctl(ATINY_GET_RADIUS, (char *)&get_value, sizeof(float)) == ATINY_OK) {
            lwm2m_data_encode_float(get_value, dataP);
        } else {
            ret = COAP_400_BAD_REQUEST;
        }
        break;
    }
    case RES_O_VELOCITY: {
        if (atiny_cmd_ioctl(ATINY_GET_VELOCITY, (char *)&velocity, sizeof(velocity)) == ATINY_OK) {
            lwm2m_data_encode_opaque(velocity.opaque, velocity.length, dataP);
        } else {
            ret = COAP_400_BAD_REQUEST;
        }
        break;
    }
    case RES_M_TIMESTAMP: {
        if (atiny_cmd_ioctl(ATINY_GET_TIMESTAMP, (char *)&timestamp, sizeof(uint64_t)) == ATINY_OK) {
            lwm2m_data_encode_float(timestamp, dataP);
        } else {
            ret = COAP_400_BAD_REQUEST;
        }
        break;
    }
    case RES_O_SPEED: {
        if (atiny_cmd_ioctl(ATINY_GET_SPEED, (char *)&get_value, sizeof(float)) == ATINY_OK) {
            lwm2m_data_encode_float(get_value, dataP);
        } else {
            ret = COAP_400_BAD_REQUEST;
        }
        break;
    }
    default:
        ret = COAP_404_NOT_FOUND;
        break;
    }

    return ret;
}
