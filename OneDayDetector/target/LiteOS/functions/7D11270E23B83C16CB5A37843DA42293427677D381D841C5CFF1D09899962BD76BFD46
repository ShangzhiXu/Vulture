lv_obj_t * lv_line_create(lv_obj_t * par, const lv_obj_t * copy)
{
    LV_LOG_TRACE("line create started");

    /*Create a basic object*/
    lv_obj_t * line = lv_obj_create(par, copy);
    LV_ASSERT_MEM(line);
    if(line == NULL) return NULL;

    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_cb(line);

    /*Extend the basic object to line object*/
    lv_line_ext_t * ext = lv_obj_allocate_ext_attr(line, sizeof(lv_line_ext_t));
    LV_ASSERT_MEM(ext);
    if(ext == NULL) {
        lv_obj_del(line);
        return NULL;
    }

    ext->point_num   = 0;
    ext->point_array = NULL;
    ext->auto_size   = 1;
    ext->y_inv       = 0;

    lv_obj_set_design_cb(line, lv_line_design);
    lv_obj_set_signal_cb(line, lv_line_signal);

    /*Init the new line*/
    if(copy == NULL) {
        lv_obj_set_size(line, LV_DPI,
                        LV_DPI);          /*Auto size is enables, but set default size until no points are added*/

        lv_obj_set_click(line, false);

        lv_theme_apply(line, LV_THEME_LINE);
    }
    /*Copy an existing object*/
    else {
        lv_line_ext_t * copy_ext = lv_obj_get_ext_attr(copy);
        lv_line_set_auto_size(line, lv_line_get_auto_size(copy));
        lv_line_set_y_invert(line, lv_line_get_y_invert(copy));
        lv_line_set_auto_size(line, lv_line_get_auto_size(copy));
        lv_line_set_points(line, copy_ext->point_array, copy_ext->point_num);

        /*Refresh the style with new signal function*/
        lv_obj_refresh_style(line, LV_STYLE_PROP_ALL);
    }

    LV_LOG_INFO("line created");

    return line;
}
