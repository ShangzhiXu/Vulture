static int prv_getLength(int size,
                         lwm2m_data_t *dataP)
{
    int length;
    int i;

    length = 0;

    for (i = 0 ; i < size && length != -1 ; i++)
    {
        switch (dataP[i].type)
        {
        case LWM2M_TYPE_OBJECT_INSTANCE:
        case LWM2M_TYPE_MULTIPLE_RESOURCE:
        {
            int subLength;

            subLength = prv_getLength(dataP[i].value.asChildren.count, dataP[i].value.asChildren.array);
            if (subLength == -1)
            {
                length = -1;
            }
            else
            {
                length += prv_getHeaderLength(dataP[i].id, subLength) + subLength;
            }
        }
        break;

        case LWM2M_TYPE_STRING:
        case LWM2M_TYPE_OPAQUE:
            length += prv_getHeaderLength(dataP[i].id, dataP[i].value.asBuffer.length) + dataP[i].value.asBuffer.length;
            break;

        case LWM2M_TYPE_INTEGER:
        {
            size_t data_len;
            uint8_t unused_buffer[_PRV_64BIT_BUFFER_SIZE];

            data_len = prv_encodeInt(dataP[i].value.asInteger, unused_buffer);
            length += prv_getHeaderLength(dataP[i].id, data_len) + data_len;
        }
        break;

        case LWM2M_TYPE_FLOAT:
        {
            size_t data_len;

            if ((dataP[i].value.asFloat < 0.0 - (double)FLT_MAX)
                    || (dataP[i].value.asFloat > (double)FLT_MAX))
            {
                data_len = 8;
            }
            else
            {
                data_len = 4;
            }

            length += prv_getHeaderLength(dataP[i].id, data_len) + data_len;
        }
        break;

        case LWM2M_TYPE_BOOLEAN:
            // Booleans are always encoded on one byte
            length += prv_getHeaderLength(dataP[i].id, 1) + 1;
            break;

        case LWM2M_TYPE_OBJECT_LINK:
            // Object Link are always encoded on four bytes
            length += prv_getHeaderLength(dataP[i].id, 4) + 4;
            break;

        default:
            length = -1;
            break;
        }
    }

    return length;
}
