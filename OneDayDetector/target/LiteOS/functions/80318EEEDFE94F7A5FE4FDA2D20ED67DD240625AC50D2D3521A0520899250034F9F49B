static void USART_RxISR_16BIT_FIFOEN(USART_HandleTypeDef *husart)
{
  uint16_t* tmp;
  uint16_t uhMask = husart->Mask;
  uint8_t  nb_rx_data;
  
  /* Check that a Tx process is ongoing */
  if ((husart->State == HAL_USART_STATE_BUSY_RX) ||
      (husart->State == HAL_USART_STATE_BUSY_TX_RX))
  {
    for(nb_rx_data = husart->NbRxDataToProcess ; nb_rx_data > 0 ; nb_rx_data--)
    { 
      if (__HAL_USART_GET_FLAG(husart, USART_FLAG_RXFNE) == SET)
      {
        tmp = (uint16_t*) husart->pRxBuffPtr;
        *tmp = (uint16_t)(husart->Instance->RDR & uhMask);
        husart->pRxBuffPtr += 2;
        
        if(--husart->RxXferCount == 0)
        {
          /* Disable the USART Parity Error Interrupt */
          CLEAR_BIT(husart->Instance->CR1, USART_CR1_PEIE);
          
          /* Disable the USART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
          CLEAR_BIT(husart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
          
          /* Clear RxISR function pointer */
          husart->RxISR = NULL;
          
          if(husart->State == HAL_USART_STATE_BUSY_RX)
          {
#if defined(USART_CR2_SLVEN)
            /* Clear SPI slave underrun flag and discard transmit data */
            if (husart->SlaveMode == USART_SLAVEMODE_ENABLE)
            {
              __HAL_USART_CLEAR_UDRFLAG(husart);
              __HAL_USART_SEND_REQ(husart, USART_TXDATA_FLUSH_REQUEST);
            }
#endif
            
            /* Rx process is completed, restore husart->State to Ready */
            husart->State = HAL_USART_STATE_READY;
            
            HAL_USART_RxCpltCallback(husart);
          } 
          else if ((husart->TxXferCount == 0) &&
                   (READ_BIT(husart->Instance->CR1, USART_CR1_TCIE) != USART_CR1_TCIE))
          {
            /* TxRx process is completed, restore husart->State to Ready */
            husart->State = HAL_USART_STATE_READY;
            
            HAL_USART_TxRxCpltCallback(husart);
          }
        }
#if defined(USART_CR2_SLVEN)
        else if ((husart->State == HAL_USART_STATE_BUSY_RX) &&
                 (husart->SlaveMode == USART_SLAVEMODE_DISABLE))
#else
        else if (husart->State == HAL_USART_STATE_BUSY_RX)
#endif
        {
          /* Send dummy byte in order to generate the clock for the Slave to Send the next data */
          husart->Instance->TDR = (USART_DUMMY_DATA & (uint16_t)0x00FF);
        }
      }
    }
    
    /* When remaining number of bytes to receive is less than the RX FIFO 
    threshold, next incoming frames are processed as if FIFO mode was 
    disabled (i.e. one interrupt per received frame).
    */
    if (((husart->RxXferCount != 0U)) && (husart->RxXferCount < husart->NbRxDataToProcess))
    {
      /* Disable the USART RXFT interrupt*/
      CLEAR_BIT(husart->Instance->CR3, USART_CR3_RXFTIE);
      
      /* Update the RxISR function pointer */
      husart->RxISR = USART_RxISR_16BIT;
      
      /* Enable the USART Data Register Not Empty interrupt */
      SET_BIT(husart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
      
#if defined(USART_CR2_SLVEN)
      if ( (husart->State == HAL_USART_STATE_BUSY_TX_RX) &&
           (husart->SlaveMode == USART_SLAVEMODE_DISABLE) &&
           (husart->TxXferCount == 0U))
#else
      if ( (husart->State == HAL_USART_STATE_BUSY_TX_RX) &&
           (husart->TxXferCount == 0U))
#endif
      {
        /* Send dummy byte in order to generate the clock for the Slave to Send the next data */
        husart->Instance->TDR = (USART_DUMMY_DATA & (uint16_t)0x00FF);
      }
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_USART_SEND_REQ(husart, USART_RXDATA_FLUSH_REQUEST);
  }
}
