static int ret_to_errno(FRESULT result)
{
    int err = 0;

    switch (result) {
        case FR_OK:
            return 0;

        case FR_NO_PATH:
            err = ENOTDIR;
            break;

        case FR_NO_FILE:
            err = ENOENT;
            break;

        case FR_NO_FILESYSTEM:
            err = ENODEV;
            break;

        case FR_TOO_MANY_OPEN_FILES:
            err = ENFILE;
            break;

        case FR_INVALID_NAME:
            err = ENAMETOOLONG;
            break;

        case FR_INVALID_PARAMETER:
        case FR_INVALID_OBJECT:
        case FR_INT_ERR:
            err = EINVAL;
            break;

        case FR_INVALID_DRIVE:
        case FR_NOT_ENABLED:
            err = ENXIO;
            break;

        case FR_EXIST:
            err = EEXIST;
            break;

        case FR_DISK_ERR:
        case FR_NOT_READY:
            err = EIO;
            break;

        case FR_WRITE_PROTECTED:
            err = EROFS;
            break;

        case FR_LOCKED:
            err = EBUSY;
            break;

        case FR_DENIED:
            err = EISDIR;
            break;

        case FR_MKFS_ABORTED:
            err = EBUSY;
            break;

        case FR_NOT_ENOUGH_CORE:
            err = ENOMEM;
            break;

        case FR_TIMEOUT:
            err = ETIMEDOUT;
            break;

        default:
            err = EIO;
            break;
    }

    VFS_ERRNO_SET(err);
    return -err;
}
