int test4(struct Options options)
{
    int i = 0;
    int rc = 0;
    unsigned char buf[100];
    int buflen = sizeof(buf);
#define TOPIC_COUNT 2

    int msgid = 23;
    int count = TOPIC_COUNT;
    int granted_qoss[TOPIC_COUNT] = {2, 1};

    unsigned short msgid2 = 2223;
    int count2 = 0;
    int granted_qoss2[TOPIC_COUNT] = {0, 0};

    fprintf(xml, "<testcase classname=\"test1\" name=\"de/serialization\"");
    global_start_time = start_clock();
    failures = 0;
    MyLog(LOGA_INFO, "Starting test 4 - serialization of suback and back");

    rc = MQTTSerialize_suback(buf, buflen, msgid, count, granted_qoss);
    assert("good rc from serialize suback", rc > 0, "rc was %d\n", rc);

    rc = MQTTDeserialize_suback(&msgid2, 2, &count2, granted_qoss2, buf, buflen);
    assert("good rc from deserialize suback", rc == 1, "rc was %d\n", rc);

    /* data after should be the same as data before */
    assert("msgids should be the same", msgid == msgid2, "msgids were different %d\n", msgid2);

    assert("count should be the same", count == count2, "counts were different %d\n", count2);

    for (i = 0; i < count2; ++i)
        assert("qoss should be the same", granted_qoss[i] == granted_qoss2[i], "qoss were different %d\n", granted_qoss2[i]);

    /* exit: */
    MyLog(LOGA_INFO, "TEST4: test %s. %d tests run, %d failures.",
          (failures == 0) ? "passed" : "failed", tests, failures);
    write_test_result();
    return failures;
}
