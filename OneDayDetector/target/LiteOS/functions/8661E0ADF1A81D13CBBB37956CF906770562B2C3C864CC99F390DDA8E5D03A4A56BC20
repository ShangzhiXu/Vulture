lv_obj_t * lv_textarea_create(lv_obj_t * par, const lv_obj_t * copy)
{
    LV_LOG_TRACE("text area create started");

    /*Create the ancestor object*/
    lv_obj_t * ta = lv_page_create(par, copy);
    LV_ASSERT_MEM(ta);
    if(ta == NULL) return NULL;

    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_cb(ta);
    if(ancestor_design == NULL) ancestor_design = lv_obj_get_design_cb(ta);
    if(scrl_signal == NULL) scrl_signal = lv_obj_get_signal_cb(lv_page_get_scrllable(ta));
    if(scrl_design == NULL) scrl_design = lv_obj_get_design_cb(lv_page_get_scrllable(ta));

    /*Allocate the object type specific extended data*/
    lv_textarea_ext_t * ext = lv_obj_allocate_ext_attr(ta, sizeof(lv_textarea_ext_t));
    LV_ASSERT_MEM(ext);
    if(ext == NULL) {
        lv_obj_del(ta);
        return NULL;
    }

    ext->pwd_mode          = 0;
    ext->pwd_tmp           = NULL;
    ext->pwd_show_time     = LV_TEXTAREA_DEF_PWD_SHOW_TIME;
    ext->accapted_chars    = NULL;
    ext->max_length        = 0;
    ext->cursor.state      = 1;
    ext->cursor.hidden     = 0;
    ext->cursor.blink_time = LV_TEXTAREA_DEF_CURSOR_BLINK_TIME;
    ext->cursor.pos        = 0;
    ext->cursor.click_pos  = 1;
    ext->cursor.valid_x    = 0;
    ext->one_line          = 0;
#if LV_LABEL_TEXT_SEL
    ext->text_sel_en = 0;
#endif
    ext->label       = NULL;
    ext->placeholder_txt = NULL;

    lv_style_list_init(&ext->cursor.style);
    lv_style_list_init(&ext->style_placeholder);

#if LV_USE_ANIMATION == 0
    ext->pwd_show_time     = 0;
    ext->cursor.blink_time = 0;
#endif

    lv_obj_set_signal_cb(ta, lv_textarea_signal);
    lv_obj_set_signal_cb(lv_page_get_scrllable(ta), lv_textarea_scrollable_signal);
    lv_obj_set_design_cb(ta, lv_textarea_design);

    /*Init the new text area object*/
    if(copy == NULL) {
        lv_page_set_scrllable_fit2(ta, LV_FIT_PARENT, LV_FIT_TIGHT);

        ext->label = lv_label_create(ta, NULL);

        lv_obj_set_design_cb(ext->page.scrl, lv_textarea_scrollable_design);

        lv_label_set_long_mode(ext->label, LV_LABEL_LONG_BREAK);
        lv_label_set_text(ext->label, "Text area");
        lv_obj_set_click(ext->label, false);
        lv_obj_set_size(ta, LV_TEXTAREA_DEF_WIDTH, LV_TEXTAREA_DEF_HEIGHT);
        lv_textarea_set_sscrollbar_mode(ta, LV_SCROLLBAR_MODE_DRAG);

        lv_obj_reset_style_list(ta, LV_PAGE_PART_SCROLLABLE);
        lv_theme_apply(ta, LV_THEME_TEXTAREA);

    }
    /*Copy an existing object*/
    else {
        lv_obj_set_design_cb(ext->page.scrl, lv_textarea_scrollable_design);
        lv_textarea_ext_t * copy_ext = lv_obj_get_ext_attr(copy);
        ext->label             = lv_label_create(ta, copy_ext->label);
        ext->pwd_mode          = copy_ext->pwd_mode;
        ext->accapted_chars    = copy_ext->accapted_chars;
        ext->max_length        = copy_ext->max_length;
        ext->cursor.pos        = copy_ext->cursor.pos;
        ext->cursor.valid_x    = copy_ext->cursor.valid_x;
        ext->cursor.hidden    = copy_ext->cursor.hidden;

        lv_style_list_copy(&ext->cursor.style, &copy_ext->cursor.style);
        lv_style_list_copy(&ext->style_placeholder, &copy_ext->style_placeholder);

        if(ext->pwd_mode != 0) pwd_char_hider(ta);

        if(copy_ext->placeholder_txt) {
            lv_textarea_set_placeholder_text(ta, copy_ext->placeholder_txt);
        }

        if(copy_ext->pwd_tmp) {
            uint16_t len = _lv_mem_get_size(copy_ext->pwd_tmp);
            ext->pwd_tmp = lv_mem_alloc(len);
            LV_ASSERT_MEM(ext->pwd_tmp);
            if(ext->pwd_tmp == NULL) return NULL;

            _lv_memcpy(ext->pwd_tmp, copy_ext->pwd_tmp, len);
        }

        if(copy_ext->one_line) lv_textarea_set_one_line(ta, true);

        /*Refresh the style with new signal function*/
        lv_obj_refresh_style(ta, LV_STYLE_PROP_ALL);
    }

#if LV_USE_ANIMATION
    if(ext->cursor.blink_time) {
        /*Create a cursor blinker animation*/
        lv_anim_path_t path;
        lv_anim_path_init(&path);
        lv_anim_path_set_cb(&path, lv_anim_path_step);

        lv_anim_t a;
        lv_anim_init(&a);
        lv_anim_set_var(&a, ta);
        lv_anim_set_exec_cb(&a, (lv_anim_exec_xcb_t)cursor_blink_anim);
        lv_anim_set_time(&a, ext->cursor.blink_time);
        lv_anim_set_playback_time(&a, ext->cursor.blink_time);
        lv_anim_set_values(&a, 0, 1);
        lv_anim_set_path(&a, &path);
        lv_anim_set_repeat_count(&a, LV_ANIM_REPEAT_INFINITE);
        lv_anim_start(&a);
    }
#endif

    LV_LOG_INFO("text area created");

    return ta;
}
