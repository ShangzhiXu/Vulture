int32_t esp8266_connect(const int8_t *host, const int8_t *port, int32_t proto)
{
    int32_t ret = AT_FAILED;
    int32_t id = 0;
    char cmd[64] = {0};

    AT_LOG("host:%s, port:%s", host, port);

    if (at.mux_mode == AT_MUXMODE_SINGLE) {
        snprintf(cmd, 64, "%s=\"%s\",\"%s\",%s", AT_CMD_CONN, proto == ATINY_PROTO_UDP ? "UDP" : "TCP", host, port);
    } else {
        id = at.get_id();
        if ((id < 0) || (id >= AT_MAX_LINK_NUM)) {
            AT_LOG("no vailed linkid for use(id = %ld)", id);
            return AT_FAILED;
        }
        snprintf(cmd, 64, "%s=%ld,\"%s\",\"%s\",%s", AT_CMD_CONN, id, proto == ATINY_PROTO_UDP ? "UDP" : "TCP", host,
            port);
    }

    // init at_link
    memcpy(at.linkid[id].remote_ip, host, sizeof(at.linkid[id].remote_ip));
    (void)sscanf((char *)port, "%d", &at.linkid[id].remote_port);

    ret = LOS_QueueCreate("dataQueue", 16, &at.linkid[id].qid, 0, sizeof(QUEUE_BUFF));
    if (ret != LOS_OK) {
        AT_LOG("init dataQueue failed!");
        at.linkid[id].usable = AT_LINK_UNUSE;
        return AT_FAILED;
    }
    ret = esp8266_cmd((int8_t *)cmd, strlen(cmd), "OK\r\n", NULL, NULL);
    if (ret == AT_FAILED) {
        AT_LOG("at.cmd return failed!");
        (void)LOS_QueueDelete(at.linkid[id].qid);
        at.linkid[id].usable = AT_LINK_UNUSE;
        return AT_FAILED;
    }
    return id;
}
