s32_t spiffs_object_append(spiffs_fd *fd, u32_t offset, u8_t *data, u32_t len)
{
    spiffs *fs = fd->fs;
    s32_t res = SPIFFS_OK;
    u32_t written = 0;

    SPIFFS_DBG("append: "_SPIPRIi" bytes @ offs "_SPIPRIi" of size "_SPIPRIi"\n", len, offset, fd->size);

    if (offset > fd->size)
    {
        SPIFFS_DBG("append: offset reversed to size\n");
        offset = fd->size;
    }

    res = spiffs_gc_check(fs, len + SPIFFS_DATA_PAGE_SIZE(fs)); // add an extra page of data worth for meta
    if (res != SPIFFS_OK)
    {
        SPIFFS_DBG("append: gc check fail "_SPIPRIi"\n", res);
    }
    SPIFFS_CHECK_RES(res);

    spiffs_page_object_ix_header *objix_hdr = (spiffs_page_object_ix_header *)fs->work;
    spiffs_page_object_ix *objix = (spiffs_page_object_ix *)fs->work;
    spiffs_page_header p_hdr;

    spiffs_span_ix cur_objix_spix = 0;
    spiffs_span_ix prev_objix_spix = (spiffs_span_ix) - 1;
    spiffs_page_ix cur_objix_pix = fd->objix_hdr_pix;
    spiffs_page_ix new_objix_hdr_page;

    spiffs_span_ix data_spix = offset / SPIFFS_DATA_PAGE_SIZE(fs);
    spiffs_page_ix data_page;
    u32_t page_offs = offset % SPIFFS_DATA_PAGE_SIZE(fs);

    // write all data
    while (res == SPIFFS_OK && written < len)
    {
        // calculate object index page span index
        cur_objix_spix = SPIFFS_OBJ_IX_ENTRY_SPAN_IX(fs, data_spix);

        // handle storing and loading of object indices
        if (cur_objix_spix != prev_objix_spix)
        {
            // new object index page
            // within this clause we return directly if something fails, object index mess-up
            if (written > 0)
            {
                // store previous object index page, unless first pass
                SPIFFS_DBG("append: "_SPIPRIid" store objix "_SPIPRIpg":"_SPIPRIsp", written "_SPIPRIi"\n", fd->obj_id,
                           cur_objix_pix, prev_objix_spix, written);
                if (prev_objix_spix == 0)
                {
                    // this is an update to object index header page
                    objix_hdr->size = offset + written;
                    if (offset == 0)
                    {
                        // was an empty object, update same page (size was 0xffffffff)
                        res = spiffs_page_index_check(fs, fd, cur_objix_pix, 0);
                        SPIFFS_CHECK_RES(res);
                        res = _spiffs_wr(fs, SPIFFS_OP_T_OBJ_IX | SPIFFS_OP_C_UPDT,
                                         fd->file_nbr, SPIFFS_PAGE_TO_PADDR(fs, cur_objix_pix), SPIFFS_CFG_LOG_PAGE_SZ(fs), fs->work);
                        SPIFFS_CHECK_RES(res);
                    }
                    else
                    {
                        // was a nonempty object, update to new page
                        res = spiffs_object_update_index_hdr(fs, fd, fd->obj_id,
                                                             fd->objix_hdr_pix, fs->work, 0, 0, offset + written, &new_objix_hdr_page);
                        SPIFFS_CHECK_RES(res);
                        SPIFFS_DBG("append: "_SPIPRIid" store new objix_hdr, "_SPIPRIpg":"_SPIPRIsp", written "_SPIPRIi"\n", fd->obj_id,
                                   new_objix_hdr_page, 0, written);
                    }
                }
                else
                {
                    // this is an update to an object index page
                    res = spiffs_page_index_check(fs, fd, cur_objix_pix, prev_objix_spix);
                    SPIFFS_CHECK_RES(res);

                    res = _spiffs_wr(fs, SPIFFS_OP_T_OBJ_IX | SPIFFS_OP_C_UPDT,
                                     fd->file_nbr, SPIFFS_PAGE_TO_PADDR(fs, cur_objix_pix), SPIFFS_CFG_LOG_PAGE_SZ(fs), fs->work);
                    SPIFFS_CHECK_RES(res);
                    spiffs_cb_object_event(fs, (spiffs_page_object_ix *)fs->work,
                                           SPIFFS_EV_IX_UPD, fd->obj_id, objix->p_hdr.span_ix, cur_objix_pix, 0);
                    // update length in object index header page
                    res = spiffs_object_update_index_hdr(fs, fd, fd->obj_id,
                                                         fd->objix_hdr_pix, 0, 0, 0, offset + written, &new_objix_hdr_page);
                    SPIFFS_CHECK_RES(res);
                    SPIFFS_DBG("append: "_SPIPRIid" store new size I "_SPIPRIi" in objix_hdr, "_SPIPRIpg":"_SPIPRIsp", written "_SPIPRIi"\n", fd->obj_id,
                               offset + written, new_objix_hdr_page, 0, written);
                }
                fd->size = offset + written;
                fd->offset = offset + written;
            }

            // create or load new object index page
            if (cur_objix_spix == 0)
            {
                // load object index header page, must always exist
                SPIFFS_DBG("append: "_SPIPRIid" load objixhdr page "_SPIPRIpg":"_SPIPRIsp"\n", fd->obj_id, cur_objix_pix, cur_objix_spix);
                res = _spiffs_rd(fs, SPIFFS_OP_T_OBJ_IX | SPIFFS_OP_C_READ,
                                 fd->file_nbr, SPIFFS_PAGE_TO_PADDR(fs, cur_objix_pix), SPIFFS_CFG_LOG_PAGE_SZ(fs), fs->work);
                SPIFFS_CHECK_RES(res);
                SPIFFS_VALIDATE_OBJIX(objix_hdr->p_hdr, fd->obj_id, cur_objix_spix);
            }
            else
            {
                spiffs_span_ix len_objix_spix = SPIFFS_OBJ_IX_ENTRY_SPAN_IX(fs, (fd->size - 1) / SPIFFS_DATA_PAGE_SIZE(fs));
                // on subsequent passes, create a new object index page
                if (written > 0 || cur_objix_spix > len_objix_spix)
                {
                    p_hdr.obj_id = fd->obj_id | SPIFFS_OBJ_ID_IX_FLAG;
                    p_hdr.span_ix = cur_objix_spix;
                    p_hdr.flags = 0xff & ~(SPIFFS_PH_FLAG_FINAL | SPIFFS_PH_FLAG_INDEX);
                    res = spiffs_page_allocate_data(fs, fd->obj_id | SPIFFS_OBJ_ID_IX_FLAG,
                                                    &p_hdr, 0, 0, 0, 1, &cur_objix_pix);
                    SPIFFS_CHECK_RES(res);
                    // quick "load" of new object index page
                    memset(fs->work, 0xff, SPIFFS_CFG_LOG_PAGE_SZ(fs));
                    _SPIFFS_MEMCPY(fs->work, &p_hdr, sizeof(spiffs_page_header));
                    spiffs_cb_object_event(fs, (spiffs_page_object_ix *)fs->work,
                                           SPIFFS_EV_IX_NEW, fd->obj_id, cur_objix_spix, cur_objix_pix, 0);
                    SPIFFS_DBG("append: "_SPIPRIid" create objix page, "_SPIPRIpg":"_SPIPRIsp", written "_SPIPRIi"\n", fd->obj_id
                               , cur_objix_pix, cur_objix_spix, written);
                }
                else
                {
                    // on first pass, we load existing object index page
                    spiffs_page_ix pix;
                    SPIFFS_DBG("append: "_SPIPRIid" find objix span_ix:"_SPIPRIsp"\n", fd->obj_id, cur_objix_spix);
                    if (fd->cursor_objix_spix == cur_objix_spix)
                    {
                        pix = fd->cursor_objix_pix;
                    }
                    else
                    {
                        res = spiffs_obj_lu_find_id_and_span(fs, fd->obj_id | SPIFFS_OBJ_ID_IX_FLAG, cur_objix_spix, 0, &pix);
                        SPIFFS_CHECK_RES(res);
                    }
                    SPIFFS_DBG("append: "_SPIPRIid" found object index at page "_SPIPRIpg" [fd size "_SPIPRIi"]\n", fd->obj_id, pix, fd->size);
                    res = _spiffs_rd(fs, SPIFFS_OP_T_OBJ_IX | SPIFFS_OP_C_READ,
                                     fd->file_nbr, SPIFFS_PAGE_TO_PADDR(fs, pix), SPIFFS_CFG_LOG_PAGE_SZ(fs), fs->work);
                    SPIFFS_CHECK_RES(res);
                    SPIFFS_VALIDATE_OBJIX(objix_hdr->p_hdr, fd->obj_id, cur_objix_spix);
                    cur_objix_pix = pix;
                }
                fd->cursor_objix_pix = cur_objix_pix;
                fd->cursor_objix_spix = cur_objix_spix;
                fd->offset = offset + written;
                fd->size = offset + written;
            }
            prev_objix_spix = cur_objix_spix;
        }

        // write data
        u32_t to_write = MIN(len - written, SPIFFS_DATA_PAGE_SIZE(fs) - page_offs);
        if (page_offs == 0)
        {
            // at beginning of a page, allocate and write a new page of data
            p_hdr.obj_id = fd->obj_id & ~SPIFFS_OBJ_ID_IX_FLAG;
            p_hdr.span_ix = data_spix;
            p_hdr.flags = 0xff & ~(SPIFFS_PH_FLAG_FINAL);  // finalize immediately
            res = spiffs_page_allocate_data(fs, fd->obj_id & ~SPIFFS_OBJ_ID_IX_FLAG,
                                            &p_hdr, &data[written], to_write, page_offs, 1, &data_page);
            SPIFFS_DBG("append: "_SPIPRIid" store new data page, "_SPIPRIpg":"_SPIPRIsp" offset:"_SPIPRIi", len "_SPIPRIi", written "_SPIPRIi"\n", fd->obj_id,
                       data_page, data_spix, page_offs, to_write, written);
        }
        else
        {
            // append to existing page, fill out free data in existing page
            if (cur_objix_spix == 0)
            {
                // get data page from object index header page
                data_page = ((spiffs_page_ix *)((u8_t *)objix_hdr + sizeof(spiffs_page_object_ix_header)))[data_spix];
            }
            else
            {
                // get data page from object index page
                data_page = ((spiffs_page_ix *)((u8_t *)objix + sizeof(spiffs_page_object_ix)))[SPIFFS_OBJ_IX_ENTRY(fs, data_spix)];
            }

            res = spiffs_page_data_check(fs, fd, data_page, data_spix);
            SPIFFS_CHECK_RES(res);

            res = _spiffs_wr(fs, SPIFFS_OP_T_OBJ_DA | SPIFFS_OP_C_UPDT,
                             fd->file_nbr, SPIFFS_PAGE_TO_PADDR(fs, data_page) + sizeof(spiffs_page_header) + page_offs, to_write, &data[written]);
            SPIFFS_DBG("append: "_SPIPRIid" store to existing data page, "_SPIPRIpg":"_SPIPRIsp" offset:"_SPIPRIi", len "_SPIPRIi", written "_SPIPRIi"\n", fd->obj_id
                       , data_page, data_spix, page_offs, to_write, written);
        }

        if (res != SPIFFS_OK) break;

        // update memory representation of object index page with new data page
        if (cur_objix_spix == 0)
        {
            // update object index header page
            ((spiffs_page_ix *)((u8_t *)objix_hdr + sizeof(spiffs_page_object_ix_header)))[data_spix] = data_page;
            SPIFFS_DBG("append: "_SPIPRIid" wrote page "_SPIPRIpg" to objix_hdr entry "_SPIPRIsp" in mem\n", fd->obj_id
                       , data_page, data_spix);
            objix_hdr->size = offset + written;
        }
        else
        {
            // update object index page
            ((spiffs_page_ix *)((u8_t *)objix + sizeof(spiffs_page_object_ix)))[SPIFFS_OBJ_IX_ENTRY(fs, data_spix)] = data_page;
            SPIFFS_DBG("append: "_SPIPRIid" wrote page "_SPIPRIpg" to objix entry "_SPIPRIsp" in mem\n", fd->obj_id
                       , data_page, (spiffs_span_ix)SPIFFS_OBJ_IX_ENTRY(fs, data_spix));
        }

        // update internals
        page_offs = 0;
        data_spix++;
        written += to_write;
    } // while all data

    fd->size = offset + written;
    fd->offset = offset + written;
    fd->cursor_objix_pix = cur_objix_pix;
    fd->cursor_objix_spix = cur_objix_spix;

    // finalize updated object indices
    s32_t res2 = SPIFFS_OK;
    if (cur_objix_spix != 0)
    {
        // wrote beyond object index header page
        // write last modified object index page, unless object header index page
        SPIFFS_DBG("append: "_SPIPRIid" store objix page, "_SPIPRIpg":"_SPIPRIsp", written "_SPIPRIi"\n", fd->obj_id,
                   cur_objix_pix, cur_objix_spix, written);

        res2 = spiffs_page_index_check(fs, fd, cur_objix_pix, cur_objix_spix);
        SPIFFS_CHECK_RES(res2);

        res2 = _spiffs_wr(fs, SPIFFS_OP_T_OBJ_IX | SPIFFS_OP_C_UPDT,
                          fd->file_nbr, SPIFFS_PAGE_TO_PADDR(fs, cur_objix_pix), SPIFFS_CFG_LOG_PAGE_SZ(fs), fs->work);
        SPIFFS_CHECK_RES(res2);
        spiffs_cb_object_event(fs, (spiffs_page_object_ix *)fs->work,
                               SPIFFS_EV_IX_UPD, fd->obj_id, objix->p_hdr.span_ix, cur_objix_pix, 0);

        // update size in object header index page
        res2 = spiffs_object_update_index_hdr(fs, fd, fd->obj_id,
                                              fd->objix_hdr_pix, 0, 0, 0, offset + written, &new_objix_hdr_page);
        SPIFFS_DBG("append: "_SPIPRIid" store new size II "_SPIPRIi" in objix_hdr, "_SPIPRIpg":"_SPIPRIsp", written "_SPIPRIi", res "_SPIPRIi"\n", fd->obj_id
                   , offset + written, new_objix_hdr_page, 0, written, res2);
        SPIFFS_CHECK_RES(res2);
    }
    else
    {
        // wrote within object index header page
        if (offset == 0)
        {
            // wrote to empty object - simply update size and write whole page
            objix_hdr->size = offset + written;
            SPIFFS_DBG("append: "_SPIPRIid" store fresh objix_hdr page, "_SPIPRIpg":"_SPIPRIsp", written "_SPIPRIi"\n", fd->obj_id
                       , cur_objix_pix, cur_objix_spix, written);

            res2 = spiffs_page_index_check(fs, fd, cur_objix_pix, cur_objix_spix);
            SPIFFS_CHECK_RES(res2);

            res2 = _spiffs_wr(fs, SPIFFS_OP_T_OBJ_IX | SPIFFS_OP_C_UPDT,
                              fd->file_nbr, SPIFFS_PAGE_TO_PADDR(fs, cur_objix_pix), SPIFFS_CFG_LOG_PAGE_SZ(fs), fs->work);
            SPIFFS_CHECK_RES(res2);
            // callback on object index update
            spiffs_cb_object_event(fs, (spiffs_page_object_ix *)fs->work,
                                   SPIFFS_EV_IX_UPD_HDR, fd->obj_id, objix_hdr->p_hdr.span_ix, cur_objix_pix, objix_hdr->size);
        }
        else
        {
            // modifying object index header page, update size and make new copy
            res2 = spiffs_object_update_index_hdr(fs, fd, fd->obj_id,
                                                  fd->objix_hdr_pix, fs->work, 0, 0, offset + written, &new_objix_hdr_page);
            SPIFFS_DBG("append: "_SPIPRIid" store modified objix_hdr page, "_SPIPRIpg":"_SPIPRIsp", written "_SPIPRIi"\n", fd->obj_id
                       , new_objix_hdr_page, 0, written);
            SPIFFS_CHECK_RES(res2);
        }
    }

    return res;
} // spiffs_object_append
