static s32_t spiffs_object_index_consistency_check_v(spiffs *fs, spiffs_obj_id obj_id, spiffs_block_ix cur_block,
        int cur_entry, const void *user_const_p, void *user_var_p)
{
    (void)user_const_p;
    s32_t res_c = SPIFFS_VIS_COUNTINUE;
    s32_t res = SPIFFS_OK;
    u32_t *log_ix = (u32_t *)user_var_p;
    spiffs_obj_id *obj_table = (spiffs_obj_id *)fs->work;

    CHECK_CB(fs, SPIFFS_CHECK_INDEX, SPIFFS_CHECK_PROGRESS,
             (cur_block * 256) / fs->block_count, 0);

    if (obj_id != SPIFFS_OBJ_ID_FREE && obj_id != SPIFFS_OBJ_ID_DELETED && (obj_id & SPIFFS_OBJ_ID_IX_FLAG))
    {
        spiffs_page_header p_hdr;
        spiffs_page_ix cur_pix = SPIFFS_OBJ_LOOKUP_ENTRY_TO_PIX(fs, cur_block, cur_entry);

        // load header
        res = _spiffs_rd(fs, SPIFFS_OP_T_OBJ_LU2 | SPIFFS_OP_C_READ,
                         0, SPIFFS_PAGE_TO_PADDR(fs, cur_pix), sizeof(spiffs_page_header), (u8_t *)&p_hdr);
        SPIFFS_CHECK_RES(res);

        if (p_hdr.span_ix == 0 &&
                (p_hdr.flags & (SPIFFS_PH_FLAG_INDEX | SPIFFS_PH_FLAG_FINAL | SPIFFS_PH_FLAG_DELET | SPIFFS_PH_FLAG_IXDELE)) ==
                (SPIFFS_PH_FLAG_DELET))
        {
            SPIFFS_CHECK_DBG("IX: pix "_SPIPRIpg", obj id:"_SPIPRIid" spix:"_SPIPRIsp" header not fully deleted - deleting\n",
                             cur_pix, obj_id, p_hdr.span_ix);
            CHECK_CB(fs, SPIFFS_CHECK_INDEX, SPIFFS_CHECK_DELETE_PAGE, cur_pix, obj_id);
            res = spiffs_page_delete(fs, cur_pix);
            SPIFFS_CHECK_RES(res);
            return res_c;
        }

        if ((p_hdr.flags & (SPIFFS_PH_FLAG_INDEX | SPIFFS_PH_FLAG_FINAL | SPIFFS_PH_FLAG_DELET | SPIFFS_PH_FLAG_IXDELE)) ==
                (SPIFFS_PH_FLAG_DELET | SPIFFS_PH_FLAG_IXDELE))
        {
            return res_c;
        }

        if (p_hdr.span_ix == 0)
        {
            // objix header page, register objid as reachable
            int r = spiffs_object_index_search(fs, obj_id);
            if (r == -1)
            {
                // not registered, do it
                obj_table[*log_ix] = obj_id & ~SPIFFS_OBJ_ID_IX_FLAG;
                (*log_ix)++;
                if (*log_ix >= SPIFFS_CFG_LOG_PAGE_SZ(fs) / sizeof(spiffs_obj_id))
                {
                    *log_ix = 0;
                }
            }
        }
        else     // span index
        {
            // objix page, see if header can be found
            int r = spiffs_object_index_search(fs, obj_id);
            u8_t delete = 0;
            if (r == -1)
            {
                // not in temporary index, try finding it
                spiffs_page_ix objix_hdr_pix;
                res = spiffs_obj_lu_find_id_and_span(fs, obj_id | SPIFFS_OBJ_ID_IX_FLAG, 0, 0, &objix_hdr_pix);
                res_c = SPIFFS_VIS_COUNTINUE_RELOAD;
                if (res == SPIFFS_OK)
                {
                    // found, register as reachable
                    obj_table[*log_ix] = obj_id & ~SPIFFS_OBJ_ID_IX_FLAG;
                }
                else if (res == SPIFFS_ERR_NOT_FOUND)
                {
                    // not found, register as unreachable
                    delete = 1;
                    obj_table[*log_ix] = obj_id | SPIFFS_OBJ_ID_IX_FLAG;
                }
                else
                {
                    SPIFFS_CHECK_RES(res);
                }
                (*log_ix)++;
                if (*log_ix >= SPIFFS_CFG_LOG_PAGE_SZ(fs) / sizeof(spiffs_obj_id))
                {
                    *log_ix = 0;
                }
            }
            else
            {
                // in temporary index, check reachable flag
                if ((obj_table[r] & SPIFFS_OBJ_ID_IX_FLAG))
                {
                    // registered as unreachable
                    delete = 1;
                }
            }

            if (delete)
            {
                SPIFFS_CHECK_DBG("IX: FIXUP: pix "_SPIPRIpg", obj id:"_SPIPRIid" spix:"_SPIPRIsp" is orphan index - deleting\n",
                                 cur_pix, obj_id, p_hdr.span_ix);
                CHECK_CB(fs, SPIFFS_CHECK_INDEX, SPIFFS_CHECK_DELETE_ORPHANED_INDEX, cur_pix, obj_id);
                res = spiffs_page_delete(fs, cur_pix);
                SPIFFS_CHECK_RES(res);
            }
        } // span index
    } // valid object index id

    return res_c;
}
