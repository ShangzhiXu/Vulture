void spiffs_cb_object_event(
    spiffs *fs,
    spiffs_page_object_ix *objix,
    int ev,
    spiffs_obj_id obj_id_raw,
    spiffs_span_ix spix,
    spiffs_page_ix new_pix,
    u32_t new_size)
{
#if SPIFFS_IX_MAP == 0
    (void)objix;
#endif
    // update index caches in all file descriptors
    spiffs_obj_id obj_id = obj_id_raw & ~SPIFFS_OBJ_ID_IX_FLAG;
    u32_t i;
    spiffs_fd *fds = (spiffs_fd *)fs->fd_space;
    SPIFFS_DBG("       CALLBACK  %s obj_id:"_SPIPRIid" spix:"_SPIPRIsp" npix:"_SPIPRIpg" nsz:"_SPIPRIi"\n", (const char *[])
    {"UPD", "NEW", "DEL", "MOV", "HUP", "???"
    }[MIN(ev, 5)],
    obj_id_raw, spix, new_pix, new_size);
    for (i = 0; i < fs->fd_count; i++)
    {
        spiffs_fd *cur_fd = &fds[i];
        if ((cur_fd->obj_id & ~SPIFFS_OBJ_ID_IX_FLAG) != obj_id) continue; // fd not related to updated file
#if !SPIFFS_TEMPORAL_FD_CACHE
        if (cur_fd->file_nbr == 0) continue; // fd closed
#endif
        if (spix == 0)   // object index header update
        {
            if (ev != SPIFFS_EV_IX_DEL)
            {
#if SPIFFS_TEMPORAL_FD_CACHE
                if (cur_fd->score == 0) continue; // never used fd
#endif
                SPIFFS_DBG("       callback: setting fd "_SPIPRIfd":"_SPIPRIid"(fdoffs:"_SPIPRIi" offs:"_SPIPRIi") objix_hdr_pix to "_SPIPRIpg", size:"_SPIPRIi"\n",
                           SPIFFS_FH_OFFS(fs, cur_fd->file_nbr), cur_fd->obj_id, cur_fd->fdoffset, cur_fd->offset, new_pix, new_size);
                cur_fd->objix_hdr_pix = new_pix;
                if (new_size != 0)
                {
                    // update size and offsets for fds to this file
                    cur_fd->size = new_size;
                    u32_t act_new_size = new_size == SPIFFS_UNDEFINED_LEN ? 0 : new_size;
#if SPIFFS_CACHE_WR
                    if (act_new_size > 0 && cur_fd->cache_page)
                    {
                        act_new_size = MAX(act_new_size, cur_fd->cache_page->offset + cur_fd->cache_page->size);
                    }
#endif
                    if (cur_fd->offset > act_new_size)
                    {
                        cur_fd->offset = act_new_size;
                    }
                    if (cur_fd->fdoffset > act_new_size)
                    {
                        cur_fd->fdoffset = act_new_size;
                    }
#if SPIFFS_CACHE_WR
                    if (cur_fd->cache_page && cur_fd->cache_page->offset > act_new_size + 1)
                    {
                        SPIFFS_CACHE_DBG("CACHE_DROP: file trunced, dropping cache page "_SPIPRIi", no writeback\n", cur_fd->cache_page->ix);
                        spiffs_cache_fd_release(fs, cur_fd->cache_page);
                    }
#endif
                }
            }
            else
            {
                // removing file
#if SPIFFS_CACHE_WR
                if (cur_fd->file_nbr && cur_fd->cache_page)
                {
                    SPIFFS_CACHE_DBG("CACHE_DROP: file deleted, dropping cache page "_SPIPRIi", no writeback\n", cur_fd->cache_page->ix);
                    spiffs_cache_fd_release(fs, cur_fd->cache_page);
                }
#endif
                SPIFFS_DBG("       callback: release fd "_SPIPRIfd":"_SPIPRIid" span:"_SPIPRIsp" objix_pix to "_SPIPRIpg"\n", SPIFFS_FH_OFFS(fs, cur_fd->file_nbr), cur_fd->obj_id, spix, new_pix);
                cur_fd->file_nbr = 0;
                cur_fd->obj_id = SPIFFS_OBJ_ID_DELETED;
            }
        } // object index header update
        if (cur_fd->cursor_objix_spix == spix)
        {
            if (ev != SPIFFS_EV_IX_DEL)
            {
                SPIFFS_DBG("       callback: setting fd "_SPIPRIfd":"_SPIPRIid" span:"_SPIPRIsp" objix_pix to "_SPIPRIpg"\n", SPIFFS_FH_OFFS(fs, cur_fd->file_nbr), cur_fd->obj_id, spix, new_pix);
                cur_fd->cursor_objix_pix = new_pix;
            }
            else
            {
                cur_fd->cursor_objix_pix = 0;
            }
        }
    } // fd update loop

#if SPIFFS_IX_MAP

    // update index maps
    if (ev == SPIFFS_EV_IX_UPD || ev == SPIFFS_EV_IX_NEW)
    {
        for (i = 0; i < fs->fd_count; i++)
        {
            spiffs_fd *cur_fd = &fds[i];
            // check fd opened, having ix map, match obj id
            if (cur_fd->file_nbr == 0 ||
                    cur_fd->ix_map == 0 ||
                    (cur_fd->obj_id & ~SPIFFS_OBJ_ID_IX_FLAG) != obj_id) continue;
            SPIFFS_DBG("       callback: map ix update fd "_SPIPRIfd":"_SPIPRIid" span:"_SPIPRIsp"\n", SPIFFS_FH_OFFS(fs, cur_fd->file_nbr), cur_fd->obj_id, spix);
            spiffs_update_ix_map(fs, cur_fd, spix, objix);
        }
    }

#endif

    // callback to user if object index header
    if (fs->file_cb_f && spix == 0 && (obj_id_raw & SPIFFS_OBJ_ID_IX_FLAG))
    {
        spiffs_fileop_type op;
        if (ev == SPIFFS_EV_IX_NEW)
        {
            op = SPIFFS_CB_CREATED;
        }
        else if (ev == SPIFFS_EV_IX_UPD ||
                 ev == SPIFFS_EV_IX_MOV ||
                 ev == SPIFFS_EV_IX_UPD_HDR)
        {
            op = SPIFFS_CB_UPDATED;
        }
        else if (ev == SPIFFS_EV_IX_DEL)
        {
            op = SPIFFS_CB_DELETED;
        }
        else
        {
            SPIFFS_DBG("       callback: WARNING unknown callback event "_SPIPRIi"\n", ev);
            return; // bail out
        }
        fs->file_cb_f(fs, op, obj_id, new_pix);
    }
}
