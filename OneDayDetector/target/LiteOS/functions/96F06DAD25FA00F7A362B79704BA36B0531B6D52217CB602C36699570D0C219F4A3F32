s32_t ring_read(tagRingBuf *ring, u8_t *buf, s32_t len)
{
    int ret = -1;
    int cpylen;  //the current time we should move
    int lenleft;  //and how many data still left to move
    int offset;
    unsigned char *src;
    unsigned char *dst;
    if((NULL == ring) || (NULL == buf) || (0 == len))
    {
        return ret;//which means parameters error
    }
    if(ring->datalen == 0)
    {
        ret = 0;
        return  ret;//which means you could copy nothing here
    }
    ret = len > ring->datalen ? ring->datalen : len;
    //now let us think the method to fill the data,take care of the roll back
    lenleft = ret;
    dst = buf;
    if((ring->dataoff + lenleft) >= ring->buflen) //which means the data has roll back
    {
        offset = ring->dataoff; //we cpy part
        cpylen = ring->buflen - ring->dataoff;
        src = ring->buf + offset;
        memcpy(dst, src, cpylen);
        ring->dataoff = (ring->dataoff + cpylen) % ring->buflen;
        ring->datalen -= cpylen;
        lenleft -= cpylen;
        dst += cpylen;
    }
    //here means we could move it by one time
    if(lenleft > 0)
    {
        offset = ring->dataoff; //we cpy part
        cpylen = lenleft;
        src = ring->buf + offset;
        memcpy(dst, src, cpylen);
        ring->dataoff = ring->dataoff + cpylen;
        ring->datalen -= cpylen;
    }
    return ret;
}
