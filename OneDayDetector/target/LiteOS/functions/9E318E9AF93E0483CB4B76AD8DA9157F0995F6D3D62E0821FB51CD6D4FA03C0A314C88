static lv_design_res_t lv_textarea_scrollable_design(lv_obj_t * scrl, const lv_area_t * clip_area,
                                                     lv_design_mode_t mode)
{
    if(mode == LV_DESIGN_COVER_CHK) {
        /*Return false if the object is not covers the mask_p area*/
        return scrl_design(scrl, clip_area, mode);
    }
    else if(mode == LV_DESIGN_DRAW_MAIN) {
        /*Draw the object*/
        scrl_design(scrl, clip_area, mode);
    }
    else if(mode == LV_DESIGN_DRAW_POST) {
        scrl_design(scrl, clip_area, mode);

        lv_obj_t * ta     = lv_obj_get_parent(scrl);
        lv_textarea_ext_t * ext = lv_obj_get_ext_attr(ta);
        const char * txt = lv_label_get_text(ext->label);

        /*Draw the place holder*/
        if(txt[0] == '\0' && ext->placeholder_txt && ext->placeholder_txt[0] != 0) {
            lv_draw_label_dsc_t ph_dsc;
            lv_draw_label_dsc_init(&ph_dsc);
            lv_obj_init_draw_label_dsc(ta, LV_TEXTAREA_PART_PLACEHOLDER, &ph_dsc);
            switch(lv_label_get_align(ext->label)) {
                case LV_LABEL_ALIGN_CENTER:
                    ph_dsc.flag |= LV_TXT_FLAG_CENTER;
                    break;
                case LV_LABEL_ALIGN_RIGHT:
                    ph_dsc.flag |= LV_TXT_FLAG_RIGHT;
                    break;
                default:
                    break;
            }

            if(ext->one_line) ph_dsc.flag |= LV_TXT_FLAG_EXPAND;

            lv_draw_label(&scrl->coords, clip_area, &ph_dsc, ext->placeholder_txt, NULL);
        }

        /*Draw the cursor*/

        if(ext->cursor.hidden || ext->cursor.state == 0) {
            return LV_DESIGN_RES_OK; /*The cursor is not visible now*/
        }

        lv_draw_rect_dsc_t cur_dsc;
        lv_draw_rect_dsc_init(&cur_dsc);
        lv_obj_init_draw_rect_dsc(ta, LV_TEXTAREA_PART_CURSOR, &cur_dsc);

        /*Draw he cursor according to the type*/
        lv_area_t cur_area;
        lv_area_copy(&cur_area, &ext->cursor.area);

        cur_area.x1 += ext->label->coords.x1;
        cur_area.y1 += ext->label->coords.y1;
        cur_area.x2 += ext->label->coords.x1;
        cur_area.y2 += ext->label->coords.y1;

        lv_draw_rect(&cur_area, clip_area, &cur_dsc);

        char letter_buf[8] = {0};
        _lv_memcpy(letter_buf, &txt[ext->cursor.txt_byte_pos], _lv_txt_encoded_size(&txt[ext->cursor.txt_byte_pos]));

        if(cur_dsc.bg_opa == LV_OPA_COVER) {
            lv_style_int_t left = lv_obj_get_style_pad_left(ta, LV_TEXTAREA_PART_CURSOR);
            lv_style_int_t top = lv_obj_get_style_pad_top(ta, LV_TEXTAREA_PART_CURSOR);
            cur_area.x1 += left;
            cur_area.y1 += top;

            lv_draw_label_dsc_t cur_label_dsc;
            lv_draw_label_dsc_init(&cur_label_dsc);
            lv_obj_init_draw_label_dsc(ta, LV_TEXTAREA_PART_CURSOR, &cur_label_dsc);
            lv_draw_label(&cur_area, clip_area, &cur_label_dsc, letter_buf, NULL);
        }
    }

    return LV_DESIGN_RES_OK;
}
