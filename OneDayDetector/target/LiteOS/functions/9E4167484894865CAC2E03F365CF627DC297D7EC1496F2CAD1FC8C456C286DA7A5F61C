s32_t spiffs_obj_lu_find_free_obj_id(spiffs *fs, spiffs_obj_id *obj_id, const u8_t *conflicting_name)
{
    s32_t res = SPIFFS_OK;
    u32_t max_objects = (fs->block_count * SPIFFS_OBJ_LOOKUP_MAX_ENTRIES(fs)) / 2;
    spiffs_free_obj_id_state state;
    spiffs_obj_id free_obj_id = SPIFFS_OBJ_ID_FREE;
    state.min_obj_id = 1;
    state.max_obj_id = max_objects + 1;
    if (state.max_obj_id & SPIFFS_OBJ_ID_IX_FLAG)
    {
        state.max_obj_id = ((spiffs_obj_id) - 1) & ~SPIFFS_OBJ_ID_IX_FLAG;
    }
    state.compaction = 0;
    state.conflicting_name = conflicting_name;
    while (res == SPIFFS_OK && free_obj_id == SPIFFS_OBJ_ID_FREE)
    {
        if (state.max_obj_id - state.min_obj_id <= (spiffs_obj_id)SPIFFS_CFG_LOG_PAGE_SZ(fs) * 8)
        {
            // possible to represent in bitmap
            u32_t i, j;
            SPIFFS_DBG("free_obj_id: BITM min:"_SPIPRIid" max:"_SPIPRIid"\n", state.min_obj_id, state.max_obj_id);

            memset(fs->work, 0, SPIFFS_CFG_LOG_PAGE_SZ(fs));
            res = spiffs_obj_lu_find_entry_visitor(fs, 0, 0, 0, 0, spiffs_obj_lu_find_free_obj_id_bitmap_v,
                                                   conflicting_name, &state.min_obj_id, 0, 0);
            if (res == SPIFFS_VIS_END) res = SPIFFS_OK;
            SPIFFS_CHECK_RES(res);
            // traverse bitmask until found free obj_id
            for (i = 0; i < SPIFFS_CFG_LOG_PAGE_SZ(fs); i++)
            {
                u8_t mask = fs->work[i];
                if (mask == 0xff)
                {
                    continue;
                }
                for (j = 0; j < 8; j++)
                {
                    if ((mask & (1 << j)) == 0)
                    {
                        *obj_id = (i << 3) + j + state.min_obj_id;
                        return SPIFFS_OK;
                    }
                }
            }
            return SPIFFS_ERR_FULL;
        }
        else
        {
            // not possible to represent all ids in range in a bitmap, compact and count
            if (state.compaction != 0)
            {
                // select element in compacted table, decrease range and recompact
                u32_t i, min_i = 0;
                u8_t *map = (u8_t *)fs->work;
                u8_t min_count = 0xff;

                for (i = 0; i < SPIFFS_CFG_LOG_PAGE_SZ(fs) / sizeof(u8_t); i++)
                {
                    if (map[i] < min_count)
                    {
                        min_count = map[i];
                        min_i = i;
                        if (min_count == 0)
                        {
                            break;
                        }
                    }
                }

                if (min_count == state.compaction)
                {
                    // there are no free objids!
                    SPIFFS_DBG("free_obj_id: compacted table is full\n");
                    return SPIFFS_ERR_FULL;
                }

                SPIFFS_DBG("free_obj_id: COMP select index:"_SPIPRIi" min_count:"_SPIPRIi" min:"_SPIPRIid" max:"_SPIPRIid" compact:"_SPIPRIi"\n", min_i, min_count, state.min_obj_id, state.max_obj_id, state.compaction);

                if (min_count == 0)
                {
                    // no id in this range, skip compacting and use directly
                    *obj_id = min_i * state.compaction + state.min_obj_id;
                    return SPIFFS_OK;
                }
                else
                {
                    SPIFFS_DBG("free_obj_id: COMP SEL chunk:"_SPIPRIi" min:"_SPIPRIid" -> "_SPIPRIid"\n", state.compaction, state.min_obj_id, state.min_obj_id + min_i *  state.compaction);
                    state.min_obj_id += min_i *  state.compaction;
                    state.max_obj_id = state.min_obj_id + state.compaction;
                    // decrease compaction
                }
                if ((state.max_obj_id - state.min_obj_id <= (spiffs_obj_id)SPIFFS_CFG_LOG_PAGE_SZ(fs) * 8))
                {
                    // no need for compacting, use bitmap
                    continue;
                }
            }
            // in a work memory of log_page_size bytes, we may fit in log_page_size ids
            // todo what if compaction is > 255 - then we cannot fit it in a byte
            state.compaction = (state.max_obj_id - state.min_obj_id) / ((SPIFFS_CFG_LOG_PAGE_SZ(fs) / sizeof(u8_t)));
            SPIFFS_DBG("free_obj_id: COMP min:"_SPIPRIid" max:"_SPIPRIid" compact:"_SPIPRIi"\n", state.min_obj_id, state.max_obj_id, state.compaction);

            memset(fs->work, 0, SPIFFS_CFG_LOG_PAGE_SZ(fs));
            res = spiffs_obj_lu_find_entry_visitor(fs, 0, 0, 0, 0, spiffs_obj_lu_find_free_obj_id_compact_v, &state, 0, 0, 0);
            if (res == SPIFFS_VIS_END) res = SPIFFS_OK;
            SPIFFS_CHECK_RES(res);
            state.conflicting_name = 0; // searched for conflicting name once, no need to do it again
        }
    }

    return res;
}
