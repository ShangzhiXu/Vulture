static int ecp_drbg_random( void *p_rng, unsigned char *output, size_t output_len )
{
    ecp_drbg_context *ctx = p_rng;
    int ret;
    size_t len_done = 0;
    uint8_t tmp[HASH_BLOCK_BYTES];

    while( len_done < output_len )
    {
        uint8_t use_len;

        /* This function is only called for coordinate randomisation, which
         * happens only twice in a scalar multiplication. Each time needs a
         * random value in the range [2, p-1], and gets it by drawing len(p)
         * bytes from this function, and retrying up to 10 times if unlucky.
         *
         * So for the largest curve, each scalar multiplication draws at most
         * 20 * 66 bytes. The minimum block size is 32 (SHA-256), so with
         * rounding that means a most 20 * 3 blocks.
         *
         * Since we don't need to draw more that 255 blocks, don't bother
         * with carry propagation and just return an error instead. We can
         * change that it we even need to draw more blinding values.
         */
        ctx->buf[3] += 1;
        if( ctx->buf[3] == 0 )
            return( MBEDTLS_ERR_ECP_RANDOM_FAILED );

        ret = HASH_FUNC( ctx->buf, ctx->total_len, tmp );
        if( ret != 0 )
            return( ret );

        if( output_len - len_done > HASH_BLOCK_BYTES )
            use_len = HASH_BLOCK_BYTES;
        else
            use_len = output_len - len_done;

        memcpy( output + len_done, tmp, use_len );
        len_done += use_len;
    }

    mbedtls_platform_zeroize( tmp, sizeof( tmp ) );

    return( 0 );
}
