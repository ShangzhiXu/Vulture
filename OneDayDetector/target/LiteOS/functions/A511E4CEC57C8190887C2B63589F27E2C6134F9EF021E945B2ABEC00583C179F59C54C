s32_t spiffs_object_update_index_hdr(
    spiffs *fs,
    spiffs_fd *fd,
    spiffs_obj_id obj_id,
    spiffs_page_ix objix_hdr_pix,
    u8_t *new_objix_hdr_data,
    const u8_t name[],
    const u8_t meta[],
    u32_t size,
    spiffs_page_ix *new_pix)
{
    s32_t res = SPIFFS_OK;
    spiffs_page_object_ix_header *objix_hdr;
    spiffs_page_ix new_objix_hdr_pix;

    obj_id |=  SPIFFS_OBJ_ID_IX_FLAG;

    if (new_objix_hdr_data)
    {
        // object index header page already given to us, no need to load it
        objix_hdr = (spiffs_page_object_ix_header *)new_objix_hdr_data;
    }
    else
    {
        // read object index header page
        res = _spiffs_rd(fs, SPIFFS_OP_T_OBJ_IX | SPIFFS_OP_C_READ,
                         fd->file_nbr, SPIFFS_PAGE_TO_PADDR(fs, objix_hdr_pix), SPIFFS_CFG_LOG_PAGE_SZ(fs), fs->work);
        SPIFFS_CHECK_RES(res);
        objix_hdr = (spiffs_page_object_ix_header *)fs->work;
    }

    SPIFFS_VALIDATE_OBJIX(objix_hdr->p_hdr, obj_id, 0);

    // change name
    if (name)
    {
        strncpy((char *)objix_hdr->name, (const char *)name, SPIFFS_OBJ_NAME_LEN);
    }
#if SPIFFS_OBJ_META_LEN
    if (meta)
    {
        _SPIFFS_MEMCPY(objix_hdr->meta, meta, SPIFFS_OBJ_META_LEN);
    }
#else
    (void) meta;
#endif
    if (size)
    {
        objix_hdr->size = size;
    }

    // move and update page
    res = spiffs_page_move(fs, fd == 0 ? 0 : fd->file_nbr, (u8_t *)objix_hdr, obj_id, 0, objix_hdr_pix, &new_objix_hdr_pix);

    if (res == SPIFFS_OK)
    {
        if (new_pix)
        {
            *new_pix = new_objix_hdr_pix;
        }
        // callback on object index update
        spiffs_cb_object_event(fs, (spiffs_page_object_ix *)objix_hdr,
                               new_objix_hdr_data ? SPIFFS_EV_IX_UPD : SPIFFS_EV_IX_UPD_HDR,
                               obj_id, objix_hdr->p_hdr.span_ix, new_objix_hdr_pix, objix_hdr->size);
        if (fd) fd->objix_hdr_pix = new_objix_hdr_pix; // if this is not in the registered cluster
    }

    return res;
}
