static lv_res_t lv_roller_signal(lv_obj_t * roller, lv_signal_t sign, void * param)
{
    lv_res_t res = LV_RES_OK;
    if(sign == LV_SIGNAL_GET_STYLE) {
        lv_get_style_info_t * info = param;
        info->result = lv_roller_get_style(roller, info->part);
        if(info->result != NULL) return LV_RES_OK;
        else return ancestor_signal(roller, sign, param);
    }

    /* Include the ancient signal function */
    if(sign != LV_SIGNAL_CONTROL) { /*Don't let the page to scroll on keys*/
        res = ancestor_signal(roller, sign, param);
        if(res != LV_RES_OK) return res;
    }

    if(sign == LV_SIGNAL_GET_TYPE) return lv_obj_handle_get_type_signal(param, LV_OBJX_NAME);

    lv_roller_ext_t * ext = lv_obj_get_ext_attr(roller);

    if(sign == LV_SIGNAL_STYLE_CHG) {
        refr_height(roller);
        refr_width(roller);
        refr_position(roller, false);
    }
    else if(sign == LV_SIGNAL_COORD_CHG) {

        if(lv_obj_get_width(roller) != lv_area_get_width(param) ||
           lv_obj_get_height(roller) != lv_area_get_height(param)) {
#if LV_USE_ANIMATION
            lv_anim_del(lv_page_get_scrllable(roller), (lv_anim_exec_xcb_t)lv_obj_set_y);
#endif
            refr_position(roller, false);
            refr_width(roller);
        }
    }
    else if(sign == LV_SIGNAL_RELEASED) {
        release_handler(roller);
    }
    else if(sign == LV_SIGNAL_FOCUS) {
#if LV_USE_GROUP
        lv_group_t * g             = lv_obj_get_group(roller);
        bool editing               = lv_group_get_editing(g);
        lv_indev_type_t indev_type = lv_indev_get_type(lv_indev_get_act());

        /*Encoders need special handling*/
        if(indev_type == LV_INDEV_TYPE_ENCODER) {
            /*In navigate mode revert the original value*/
            if(!editing) {
                if(ext->sel_opt_id != ext->sel_opt_id_ori) {
                    ext->sel_opt_id = ext->sel_opt_id_ori;
                    refr_position(roller, true);
                }
            }
            /*Save the current state when entered to edit mode*/
            else {
                ext->sel_opt_id_ori = ext->sel_opt_id;
            }
        }
        else {
            ext->sel_opt_id_ori = ext->sel_opt_id; /*Save the current value. Used to revert this state if
                                                                    ENTER wont't be pressed*/
        }
#endif
    }
    else if(sign == LV_SIGNAL_DEFOCUS) {
#if LV_USE_GROUP
        /*Revert the original state*/
        if(ext->sel_opt_id != ext->sel_opt_id_ori) {
            ext->sel_opt_id = ext->sel_opt_id_ori;
            refr_position(roller, true);
        }
#endif
    }
    else if(sign == LV_SIGNAL_CONTROL) {
        char c = *((char *)param);
        if(c == LV_KEY_RIGHT || c == LV_KEY_DOWN) {
            if(ext->sel_opt_id + 1 < ext->option_cnt) {
                uint16_t ori_id = ext->sel_opt_id_ori; /*lv_roller_set_selceted will overwrite this*/
                lv_roller_set_selected(roller, ext->sel_opt_id + 1, true);
                ext->sel_opt_id_ori = ori_id;
            }
        }
        else if(c == LV_KEY_LEFT || c == LV_KEY_UP) {
            if(ext->sel_opt_id > 0) {
                uint16_t ori_id = ext->sel_opt_id_ori; /*lv_roller_set_selceted will overwrite this*/
                lv_roller_set_selected(roller, ext->sel_opt_id - 1, true);
                ext->sel_opt_id_ori = ori_id;
            }
        }
    }
    else if(sign == LV_SIGNAL_CLEANUP) {
        lv_obj_clean_style_list(roller, LV_ROLLER_PART_SELECTED);
    }
    return res;
}
