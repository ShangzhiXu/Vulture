int atiny_mqtt_data_send(mqtt_client_s *phandle, const char *msg,  uint32_t msg_len, mqtt_qos_e qos)
{
    MQTTMessage message;
    int rc;
    char *topic;
    size_t payloadlen;

    if ((phandle == NULL) || (qos >= MQTT_QOS_MAX)) {
        ATINY_LOG(LOG_FATAL, "Parameter invalid");
        return ATINY_ARG_INVALID;
    }
    if (phandle->device_info.codec_mode == MQTT_CODEC_MODE_JSON) {
        if ((msg == NULL) || (msg_len <= 0)) {
            ATINY_LOG(LOG_FATAL, "msg invalid");
            return ATINY_ARG_INVALID;
        }
        payloadlen = strnlen(msg, msg_len);
    } else {
        if ((msg == NULL) && (msg_len > 0)) {
            ATINY_LOG(LOG_FATAL, "msg invalid");
            return ATINY_ARG_INVALID;
        }
        payloadlen = msg_len;
    }

    if (!atiny_mqtt_isconnected(phandle)) {
        ATINY_LOG(LOG_FATAL, "not connected");
        return ATINY_ERR;
    }

    topic = mqtt_get_device_topic(phandle, DATA_TOPIC_FMT, sizeof(DATA_TOPIC_FMT) - VARIABLE_SIZE);
    if (topic == NULL) {
        return ATINY_MALLOC_FAILED;
    }
    memset(&message, 0, sizeof(message));
    message.qos = (enum QoS)qos;
    message.payload = (void *)msg;
    message.payloadlen = payloadlen;
    rc = MQTTPublish(&phandle->client, topic, &message);
    atiny_free(topic);
    if (rc != MQTT_SUCCESS) {
        ATINY_LOG(LOG_FATAL, "MQTTPublish fail,rc %d", rc);
        return ATINY_ERR;
    }
    return ATINY_OK;
}
