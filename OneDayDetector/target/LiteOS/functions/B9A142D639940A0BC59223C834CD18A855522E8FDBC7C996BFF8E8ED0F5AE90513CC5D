void lv_linemeter_draw_scale(lv_obj_t * lmeter, const lv_area_t * clip_area, uint8_t part)
{
    lv_linemeter_ext_t * ext    = lv_obj_get_ext_attr(lmeter);

    lv_style_int_t left = lv_obj_get_style_pad_left(lmeter, LV_LINEMETER_PART_MAIN);
    lv_style_int_t right = lv_obj_get_style_pad_right(lmeter, LV_LINEMETER_PART_MAIN);
    lv_style_int_t top = lv_obj_get_style_pad_top(lmeter, LV_LINEMETER_PART_MAIN);

    lv_coord_t r_out = (lv_obj_get_width(lmeter) - left - right) / 2 ;
    lv_coord_t r_in  = r_out - lv_obj_get_style_scale_width(lmeter, part);
    if(r_in < 1) r_in = 1;

    lv_coord_t x_ofs  = lmeter->coords.x1 + r_out + left;
    lv_coord_t y_ofs  = lmeter->coords.y1 + r_out + top;
    int16_t angle_ofs = ext->angle_ofs + 90 + (360 - ext->scale_angle) / 2;
    int16_t level =
        (int32_t)((int32_t)(ext->cur_value - ext->min_value) * ext->line_cnt) / (ext->max_value - ext->min_value);
    uint8_t i;

    lv_color_t main_color = lv_obj_get_style_line_color(lmeter, part);
    lv_color_t grad_color = lv_obj_get_style_scale_grad_color(lmeter, part);
    lv_color_t end_color = lv_obj_get_style_scale_end_color(lmeter, part);


    lv_draw_line_dsc_t line_dsc;
    lv_draw_line_dsc_init(&line_dsc);
    lv_obj_init_draw_line_dsc(lmeter, part, &line_dsc);
#if LV_LINEMETER_PRECISE == 2
    line_dsc.raw_end = 1;
#endif

    lv_style_int_t end_line_width = lv_obj_get_style_scale_end_line_width(lmeter, part);

#if LV_LINEMETER_PRECISE > 0
    lv_area_t mask_area;
    mask_area.x1 = x_ofs - r_in;
    mask_area.x2 = x_ofs + r_in - 1;
    mask_area.y1 = y_ofs - r_in;
    mask_area.y2 = y_ofs + r_in - 1;

    lv_draw_mask_radius_param_t mask_in_param;
    lv_draw_mask_radius_init(&mask_in_param, &mask_area, LV_RADIUS_CIRCLE, true);
    int16_t mask_in_id = lv_draw_mask_add(&mask_in_param, 0);
#endif


#if LV_LINEMETER_PRECISE > 1
    mask_area.x1 = x_ofs - r_out;
    mask_area.x2 = x_ofs + r_out - 1;
    mask_area.y1 = y_ofs - r_out;
    mask_area.y2 = y_ofs + r_out - 1;
    lv_draw_mask_radius_param_t mask_out_param;
    lv_draw_mask_radius_init(&mask_out_param, &mask_area, LV_RADIUS_CIRCLE, false);
    int16_t mask_out_id = lv_draw_mask_add(&mask_out_param, 0);
    /*In calculation use a larger radius to avoid rounding errors */
    lv_coord_t r_out_extra = r_out + LV_DPI;
#else
    lv_coord_t r_out_extra = r_out;
#endif

    for(i = 0; i < ext->line_cnt; i++) {
        /* `* 256` for extra precision*/
        int32_t angle_upscale = (i * ext->scale_angle * 256) / (ext->line_cnt - 1);
        int32_t angle_normal = angle_upscale >> 8;

        int32_t angle_low = (angle_upscale >> 8);
        int32_t angle_high = angle_low + 1;
        int32_t angle_rem = angle_upscale & 0xFF;

        /*Interpolate sine and cos*/
        int32_t sin_low = _lv_trigo_sin(angle_low + angle_ofs);
        int32_t sin_high = _lv_trigo_sin(angle_high + angle_ofs);
        int32_t sin_mid = (sin_low * (256 - angle_rem) + sin_high * angle_rem) >> 8;

        int32_t cos_low = _lv_trigo_sin(angle_low + 90 + angle_ofs);
        int32_t cos_high = _lv_trigo_sin(angle_high + 90 + angle_ofs);
        int32_t cos_mid = (cos_low * (256 - angle_rem) + cos_high * angle_rem) >> 8;

        /*Use the interpolated values to get x and y coordinates*/
        int32_t y_out_extra = (int32_t)((int32_t)sin_mid * r_out_extra) >> (LV_TRIGO_SHIFT - 8);
        int32_t x_out_extra = (int32_t)((int32_t)cos_mid * r_out_extra) >> (LV_TRIGO_SHIFT - 8);

        /*Rounding*/
        if(x_out_extra > 0) x_out_extra = (x_out_extra + 127) >> 8;
        else x_out_extra = (x_out_extra - 127) >> 8;

        if(y_out_extra > 0) y_out_extra = (y_out_extra + 127) >> 8;
        else y_out_extra = (y_out_extra - 127) >> 8;

        x_out_extra += x_ofs;
        y_out_extra += y_ofs;

        /*With no extra precision use the coordinates on the inner radius*/
#if LV_LINEMETER_PRECISE == 0
        /*Use the interpolated values to get x and y coordinates*/
        int32_t y_in_extra = (int32_t)((int32_t)sin_mid * r_in) >> (LV_TRIGO_SHIFT - 8);
        int32_t x_in_extra = (int32_t)((int32_t)cos_mid * r_in) >> (LV_TRIGO_SHIFT - 8);

        /*Rounding*/
        if(x_in_extra > 0) x_in_extra = (x_in_extra + 127) >> 8;
        else x_in_extra = (x_in_extra - 127) >> 8;

        if(y_in_extra > 0) y_in_extra = (y_in_extra + 127) >> 8;
        else y_in_extra = (y_in_extra - 127) >> 8;

        x_in_extra += x_ofs;
        y_in_extra += y_ofs;
#else
        int32_t x_in_extra = x_ofs;
        int32_t y_in_extra = y_ofs;
#endif

        /*Use smaller clip area only around the visible line*/
        int32_t y_in  = (int32_t)((int32_t)_lv_trigo_sin(angle_normal + angle_ofs) * r_in) >> LV_TRIGO_SHIFT;
        int32_t x_in  = (int32_t)((int32_t)_lv_trigo_sin(angle_normal + 90 + angle_ofs) * r_in) >> LV_TRIGO_SHIFT;

        x_in += x_ofs;
        y_in += y_ofs;

        int32_t y_out  = (int32_t)((int32_t)_lv_trigo_sin(angle_normal + angle_ofs) * r_out) >> LV_TRIGO_SHIFT;
        int32_t x_out  = (int32_t)((int32_t)_lv_trigo_sin(angle_normal + 90 + angle_ofs) * r_out) >> LV_TRIGO_SHIFT;

        x_out += x_ofs;
        y_out += y_ofs;

        lv_area_t clip_sub;
        clip_sub.x1 = LV_MATH_MIN(x_in, x_out) - line_dsc.width;
        clip_sub.x2 = LV_MATH_MAX(x_in, x_out) + line_dsc.width;
        clip_sub.y1 = LV_MATH_MIN(y_in, y_out) - line_dsc.width;
        clip_sub.y2 = LV_MATH_MAX(y_in, y_out) + line_dsc.width;

        if(_lv_area_intersect(&clip_sub, &clip_sub, clip_area) == false) continue;

        lv_point_t p1;
        lv_point_t p2;

        p2.x = x_in_extra;
        p2.y = y_in_extra;

        p1.x = x_out_extra;
        p1.y = y_out_extra;

        if(i >= level) {
            line_dsc.color = end_color;
            line_dsc.width = end_line_width;
        }
        else {
            line_dsc.color = lv_color_mix(grad_color, main_color, (255 * i) / ext->line_cnt);
        }

        lv_draw_line(&p1, &p2, &clip_sub, &line_dsc);
    }

#if LV_LINEMETER_PRECISE > 0
    lv_draw_mask_remove_id(mask_in_id);
#endif

#if LV_LINEMETER_PRECISE > 1
    lv_draw_mask_remove_id(mask_out_id);
#endif

    if(part == LV_LINEMETER_PART_MAIN) {
        lv_style_int_t border_width = lv_obj_get_style_scale_border_width(lmeter, part);
        lv_style_int_t end_border_width = lv_obj_get_style_scale_end_border_width(lmeter, part);

        if(border_width || end_border_width) {
            int16_t end_angle = (level * ext->scale_angle) / (ext->line_cnt - 1) + angle_ofs - 1;
            lv_draw_line_dsc_t arc_dsc;
            lv_draw_line_dsc_init(&arc_dsc);
            lv_obj_init_draw_line_dsc(lmeter, part, &arc_dsc);

            if(border_width) {
                arc_dsc.width = border_width;
                arc_dsc.color = main_color;
                lv_draw_arc(x_ofs, y_ofs, r_out, angle_ofs, end_angle, clip_area, &arc_dsc);
            }

            if(end_border_width) {
                arc_dsc.width = end_border_width;
                arc_dsc.color = end_color;
                lv_draw_arc(x_ofs, y_ofs, r_out, end_angle, (angle_ofs + ext->scale_angle) % 360, clip_area, &arc_dsc);
            }


        }
    }


}
