int transport_open(char *addr, int port)
{
    int *sock = &mysock;
    int type = SOCK_STREAM;
    struct sockaddr_in address;
#if defined(AF_INET6)
    struct sockaddr_in6 address6;
#endif
    int rc = -1;
#if defined(WIN32)
    short family;
#else
    sa_family_t family = AF_INET;
#endif
    struct addrinfo *result = NULL;
    struct addrinfo hints = {0, AF_UNSPEC, SOCK_STREAM, IPPROTO_TCP, 0, NULL, NULL, NULL};
    static struct timeval tv;

    *sock = -1;
    if (addr[0] == '[')
        ++addr;

    if ((rc = getaddrinfo(addr, NULL, &hints, &result)) == 0)
    {
        struct addrinfo *res = result;

        /* prefer ip4 addresses */
        while (res)
        {
            if (res->ai_family == AF_INET)
            {
                result = res;
                break;
            }
            res = res->ai_next;
        }

#if defined(AF_INET6)
        if (result->ai_family == AF_INET6)
        {
            address6.sin6_port = htons(port);
            address6.sin6_family = family = AF_INET6;
            address6.sin6_addr = ((struct sockaddr_in6 *)(result->ai_addr))->sin6_addr;
        }
        else
#endif
            if (result->ai_family == AF_INET)
            {
                address.sin_port = htons(port);
                address.sin_family = family = AF_INET;
                address.sin_addr = ((struct sockaddr_in *)(result->ai_addr))->sin_addr;
            }
            else
                rc = -1;

        freeaddrinfo(result);
    }

    if (rc == 0)
    {
        *sock =	socket(family, type, 0);
        if (*sock != -1)
        {
#if defined(NOSIGPIPE)
            int opt = 1;

            if (setsockopt(*sock, SOL_SOCKET, SO_NOSIGPIPE, (void *)&opt, sizeof(opt)) != 0)
                Log(TRACE_MIN, -1, "Could not set SO_NOSIGPIPE for socket %d", *sock);
#endif

            if (family == AF_INET)
                rc = connect(*sock, (struct sockaddr *)&address, sizeof(address));
#if defined(AF_INET6)
            else
                rc = connect(*sock, (struct sockaddr *)&address6, sizeof(address6));
#endif
        }
    }
    if (mysock == INVALID_SOCKET)
        return rc;

    tv.tv_sec = 1;  /* 1 second Timeout */
    tv.tv_usec = 0;
    setsockopt(mysock, SOL_SOCKET, SO_RCVTIMEO, (char *)&tv, sizeof(struct timeval));
    return mysock;
}
