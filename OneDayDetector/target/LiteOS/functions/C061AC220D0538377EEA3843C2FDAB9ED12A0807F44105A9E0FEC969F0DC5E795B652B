int discover_serialize(lwm2m_context_t *contextP,
                       lwm2m_uri_t *uriP,
                       lwm2m_server_t *serverP,
                       int size,
                       lwm2m_data_t *dataP,
                       uint8_t **bufferP)
{
    uint8_t bufferLink[PRV_LINK_BUFFER_SIZE];
    uint8_t baseUriStr[URI_MAX_STRING_LEN];
    int baseUriLen;
    int index;
    size_t head;
    int res;
    lwm2m_uri_t parentUri;
    lwm2m_attributes_t *paramP;
    lwm2m_attributes_t mergedParam;

    LOG_ARG("size: %d", size);
    LOG_URI(uriP);

    head = 0;
    memset(&parentUri, 0, sizeof(lwm2m_uri_t));
    parentUri.objectId = uriP->objectId;
    parentUri.flag = LWM2M_URI_FLAG_OBJECT_ID;

    if (LWM2M_URI_IS_SET_RESOURCE(uriP))
    {
        lwm2m_uri_t tempUri;
        lwm2m_attributes_t *objParamP;
        lwm2m_attributes_t *instParamP;

        memset(&parentUri, 0, sizeof(lwm2m_uri_t));
        tempUri.objectId = uriP->objectId;
        tempUri.flag = LWM2M_URI_FLAG_OBJECT_ID;

        // get object level attributes
        objParamP = prv_findAttributes(contextP, &tempUri, serverP);

        // get object instance level attributes
        tempUri.instanceId = uriP->instanceId;
        tempUri.flag = LWM2M_URI_FLAG_INSTANCE_ID;
        instParamP = prv_findAttributes(contextP, &tempUri, serverP);

        if (objParamP != NULL)
        {
            if (instParamP != NULL)
            {
                memset(&mergedParam, 0, sizeof(lwm2m_attributes_t));
                mergedParam.toSet = objParamP->toSet | instParamP->toSet;
                if (mergedParam.toSet & LWM2M_ATTR_FLAG_MIN_PERIOD)
                {
                    if (instParamP->toSet & LWM2M_ATTR_FLAG_MIN_PERIOD)
                    {
                        mergedParam.minPeriod = instParamP->minPeriod;
                    }
                    else
                    {
                        mergedParam.minPeriod = objParamP->minPeriod;
                    }
                }
                if (mergedParam.toSet & LWM2M_ATTR_FLAG_MAX_PERIOD)
                {
                    if (instParamP->toSet & LWM2M_ATTR_FLAG_MAX_PERIOD)
                    {
                        mergedParam.maxPeriod = instParamP->maxPeriod;
                    }
                    else
                    {
                        mergedParam.maxPeriod = objParamP->maxPeriod;
                    }
                }
                paramP = &mergedParam;
            }
            else
            {
                paramP = objParamP;
            }
        }
        else
        {
            paramP = instParamP;
        }
        uriP->flag &= ~LWM2M_URI_FLAG_RESOURCE_ID;
    }
    else
    {
        paramP = NULL;

        if (LWM2M_URI_IS_SET_INSTANCE(uriP))
        {
            PRV_CONCAT_STR(bufferLink, PRV_LINK_BUFFER_SIZE, head, LINK_ITEM_START, LINK_ITEM_START_SIZE);
            PRV_CONCAT_STR(bufferLink, PRV_LINK_BUFFER_SIZE, head, LINK_URI_SEPARATOR, LINK_URI_SEPARATOR_SIZE);
            res = utils_intToText(uriP->objectId, bufferLink + head, PRV_LINK_BUFFER_SIZE - head);
            if (res <= 0) return -1;
            head += res;
            PRV_CONCAT_STR(bufferLink, PRV_LINK_BUFFER_SIZE, head, LINK_URI_SEPARATOR, LINK_URI_SEPARATOR_SIZE);
            res = utils_intToText(uriP->instanceId, bufferLink + head, PRV_LINK_BUFFER_SIZE - head);
            if (res <= 0) return -1;
            head += res;
            PRV_CONCAT_STR(bufferLink, PRV_LINK_BUFFER_SIZE, head, LINK_ITEM_END, LINK_ITEM_END_SIZE);
            parentUri.instanceId = uriP->instanceId;
            parentUri.flag = LWM2M_URI_FLAG_INSTANCE_ID;
            if (serverP != NULL)
            {
                res = prv_serializeAttributes(contextP, &parentUri, serverP, NULL, bufferLink, head - 1, PRV_LINK_BUFFER_SIZE);
                if (res < 0) return -1;    // careful, 0 is valid
            }
            else
            {
                res = 0;
            }
            head += res;
        }
        else
        {
            PRV_CONCAT_STR(bufferLink, PRV_LINK_BUFFER_SIZE, head, LINK_ITEM_START, LINK_ITEM_START_SIZE);
            PRV_CONCAT_STR(bufferLink, PRV_LINK_BUFFER_SIZE, head, LINK_URI_SEPARATOR, LINK_URI_SEPARATOR_SIZE);
            res = utils_intToText(uriP->objectId, bufferLink + head, PRV_LINK_BUFFER_SIZE - head);
            if (res <= 0) return -1;
            head += res;
            PRV_CONCAT_STR(bufferLink, PRV_LINK_BUFFER_SIZE, head, LINK_ITEM_END, LINK_ITEM_END_SIZE);

            if (serverP != NULL)
            {
                res = prv_serializeAttributes(contextP, &parentUri, serverP, NULL, bufferLink, head - 1, PRV_LINK_BUFFER_SIZE);
                if (res < 0) return -1;    // careful, 0 is valid
                head += res;
            }
        }
    }

    baseUriLen = uri_toString(uriP, baseUriStr, URI_MAX_STRING_LEN, NULL);
    if (baseUriLen < 0) return -1;
    baseUriLen -= 1;

    for (index = 0; index < size && head < PRV_LINK_BUFFER_SIZE; index++)
    {
        res = prv_serializeLinkData(contextP, dataP + index, serverP, paramP, uriP, baseUriStr, baseUriLen, bufferLink + head, PRV_LINK_BUFFER_SIZE - head);
        if (res < 0) return -1;
        head += res;
    }

    if (head > 0)
    {
        head -= 1;

        *bufferP = (uint8_t *)lwm2m_malloc(head);
        if (*bufferP == NULL) return 0;
        memcpy(*bufferP, bufferLink, head);
    }

    return (int)head;
}
