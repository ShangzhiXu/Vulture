static s32_t spiffs_cache_page_free(spiffs *fs, int ix, u8_t write_back)
{
    s32_t res = SPIFFS_OK;
    spiffs_cache *cache = spiffs_get_cache(fs);
    spiffs_cache_page *cp = spiffs_get_cache_page_hdr(fs, cache, ix);
    if (cache->cpage_use_map & (1 << ix))
    {
        if (write_back &&
                (cp->flags & SPIFFS_CACHE_FLAG_TYPE_WR) == 0 &&
                (cp->flags & SPIFFS_CACHE_FLAG_DIRTY))
        {
            u8_t *mem =  spiffs_get_cache_page(fs, cache, ix);
            SPIFFS_CACHE_DBG("CACHE_FREE: write cache page "_SPIPRIi" pix "_SPIPRIpg"\n", ix, cp->pix);
            res = SPIFFS_HAL_WRITE(fs, SPIFFS_PAGE_TO_PADDR(fs, cp->pix), SPIFFS_CFG_LOG_PAGE_SZ(fs), mem);
        }

#if SPIFFS_CACHE_WR
        if (cp->flags & SPIFFS_CACHE_FLAG_TYPE_WR)
        {
            SPIFFS_CACHE_DBG("CACHE_FREE: free cache page "_SPIPRIi" objid "_SPIPRIid"\n", ix, cp->obj_id);
        }
        else
#endif
        {
            SPIFFS_CACHE_DBG("CACHE_FREE: free cache page "_SPIPRIi" pix "_SPIPRIpg"\n", ix, cp->pix);
        }
        cache->cpage_use_map &= ~(1 << ix);
        cp->flags = 0;
    }

    return res;
}
