int _run_test(
        const char * const function_name,  const UnitTestFunction Function,
        void ** const state, const UnitTestFunctionType function_type,
        const void* const heap_check_point) {
    const ListNode * const check_point = heap_check_point ?
        heap_check_point : check_point_allocated_blocks();
    void *current_state = NULL;
    int rc = 1;
    int handle_exceptions = 0;
#ifdef _WIN32
    handle_exceptions = !IsDebuggerPresent();
#endif // _WIN32
#if UNIT_TESTING_DEBUG
    handle_exceptions = 0;
#endif // UNIT_TESTING_DEBUG

    if (handle_exceptions) {
#ifndef _WIN32
        unsigned int i;
        for (i = 0; i < ARRAY_LENGTH(exception_signals); i++) {
            default_signal_functions[i] = signal(
                exception_signals[i], exception_handler);
        }
#else // _WIN32
        previous_exception_filter = SetUnhandledExceptionFilter(
            exception_filter);
#endif // !_WIN32
    }

    if (function_type == UNIT_TEST_FUNCTION_TYPE_TEST) {
        print_message("%s: Starting test\n", function_name);
    }
    initialize_testing(function_name);
    global_running_test = 1;
    if (setjmp(global_run_test_env) == 0) {
        Function(state ? state : &current_state);
        fail_if_leftover_values(function_name);

        /* If this is a setup function then ignore any allocated blocks
         * only ensure they're deallocated on tear down. */
        if (function_type != UNIT_TEST_FUNCTION_TYPE_SETUP) {
            fail_if_blocks_allocated(check_point, function_name);
        }

        global_running_test = 0;

        if (function_type == UNIT_TEST_FUNCTION_TYPE_TEST) {
            print_message("%s: Test completed successfully.\n", function_name);
        }
        rc = 0;
    } else {
        global_running_test = 0;
        print_message("%s: Test failed.\n", function_name);
    }
    teardown_testing(function_name);

    if (handle_exceptions) {
#ifndef _WIN32
        unsigned int i;
        for (i = 0; i < ARRAY_LENGTH(exception_signals); i++) {
            signal(exception_signals[i], default_signal_functions[i]);
        }
#else // _WIN32
        if (previous_exception_filter) {
            SetUnhandledExceptionFilter(previous_exception_filter);
            previous_exception_filter = NULL;
        }
#endif // !_WIN32
    }

    return rc;
}
