static int ssl_write_supported_elliptic_curves_ext( mbedtls_ssl_context *ssl,
                                                    unsigned char *buf,
                                                    const unsigned char *end,
                                                    size_t *olen )
{
    unsigned char *p = buf;
    unsigned char *elliptic_curve_list = p + 6;
    size_t elliptic_curve_len = 0;
    const mbedtls_ecp_curve_info *info;
    const mbedtls_ecp_group_id *grp_id;

    *olen = 0;

    MBEDTLS_SSL_DEBUG_MSG( 3,
        ( "client hello, adding supported_elliptic_curves extension" ) );

    if( ssl->conf->curve_list == NULL )
        return( MBEDTLS_ERR_SSL_BAD_CONFIG );

    for( grp_id = ssl->conf->curve_list;
         *grp_id != MBEDTLS_ECP_DP_NONE;
         grp_id++ )
    {
        info = mbedtls_ecp_curve_info_from_grp_id( *grp_id );
        if( info == NULL )
        {
            MBEDTLS_SSL_DEBUG_MSG( 1,
                ( "invalid curve in ssl configuration" ) );
            return( MBEDTLS_ERR_SSL_BAD_CONFIG );
        }
        elliptic_curve_len += 2;

        if( elliptic_curve_len > MBEDTLS_SSL_MAX_CURVE_LIST_LEN )
        {
            MBEDTLS_SSL_DEBUG_MSG( 3,
                ( "malformed supported_elliptic_curves extension in config" ) );
            return( MBEDTLS_ERR_SSL_BAD_CONFIG );
        }
    }

    /* Empty elliptic curve list, this is a configuration error. */
    if( elliptic_curve_len == 0 )
        return( MBEDTLS_ERR_SSL_BAD_CONFIG );

    MBEDTLS_SSL_CHK_BUF_PTR( p, end, 6 + elliptic_curve_len );

    elliptic_curve_len = 0;

    for( grp_id = ssl->conf->curve_list;
         *grp_id != MBEDTLS_ECP_DP_NONE;
         grp_id++ )
    {
        info = mbedtls_ecp_curve_info_from_grp_id( *grp_id );
        elliptic_curve_list[elliptic_curve_len++] = info->tls_id >> 8;
        elliptic_curve_list[elliptic_curve_len++] = info->tls_id & 0xFF;
    }

    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SUPPORTED_ELLIPTIC_CURVES >> 8 )
                            & 0xFF );
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SUPPORTED_ELLIPTIC_CURVES      )
                            & 0xFF );

    *p++ = (unsigned char)( ( ( elliptic_curve_len + 2 ) >> 8 ) & 0xFF );
    *p++ = (unsigned char)( ( ( elliptic_curve_len + 2 )      ) & 0xFF );

    *p++ = (unsigned char)( ( ( elliptic_curve_len     ) >> 8 ) & 0xFF );
    *p++ = (unsigned char)( ( ( elliptic_curve_len     )      ) & 0xFF );

    *olen = 6 + elliptic_curve_len;

    return( 0 );
}
