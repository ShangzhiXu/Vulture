int32_t sim900a_connect(const int8_t *host, const int8_t *port, int32_t proto)
{
    int32_t ret = AT_FAILED;
    int32_t id = at.get_id();
    sim900a_reset();
    char cmd1[64] = {0};
    snprintf(cmd1, 64, "%s=\"B\"", AT_CMD_CLASS);
    at.cmd((int8_t *)cmd1, strlen(cmd1), "OK", NULL, NULL);
    char cmd2[64] = {0};
    snprintf(cmd2, 64, "%s=1,\"IP\",\"CMNET\"", AT_CMD_PDP_CONT);
    at.cmd((int8_t *)cmd2, strlen(cmd2), "OK", NULL, NULL);
    char cmd3[64] = {0};
    snprintf(cmd3, 64, "%s=1", AT_CMD_PDP_ATT);
    at.cmd((int8_t *)cmd3, strlen(cmd3), "OK", NULL, NULL);
    char cmd4[64] = {0};
    snprintf(cmd4, 64, "%s=1", AT_CMD_CIPHEAD);
    at.cmd((int8_t *)cmd4, strlen(cmd4), "OK", NULL, NULL);
    char cmd5[64] = {0};

    AT_LOG_DEBUG("host:%s, port:%s", host, port);

    if (at.mux_mode == AT_MUXMODE_SINGLE) {
        snprintf(cmd5, 64, "%s=\"%s\",\"%s\",\"%s\"", AT_CMD_CONN, proto == ATINY_PROTO_UDP ? "UDP" : "TCP", host,
            port);
    } else {
        at.cmd((int8_t *)(AT_CMD_PDP_ACT "=1,1"), strlen(AT_CMD_PDP_ACT "=1,1"), "OK", NULL, NULL);
        at.cmd((int8_t *)AT_CMD_CSTT, strlen(AT_CMD_CSTT), "OK", NULL, NULL);
        at.cmd((int8_t *)AT_CMD_CIICR, strlen(AT_CMD_CIICR), "OK", NULL, NULL);
        at.cmd((int8_t *)AT_CMD_CIFSR, strlen(AT_CMD_CIFSR), "", NULL, NULL);
        snprintf(cmd5, 64, "%s=%ld,\"%s\",\"%s\",\"%s\"", AT_CMD_CONN, id, proto == ATINY_PROTO_UDP ? "UDP" : "TCP",
            host, port);
    }
    if ((id < 0) || (id >= AT_MAX_LINK_NUM)) {
        AT_LOG("no vailed linkid for use(id = %ld)", id);
        return -1;
    }
    ret = LOS_QueueCreate("dataQueue", 16, &at.linkid[id].qid, 0, sizeof(QUEUE_BUFF));
    if (ret != LOS_OK) {
        AT_LOG("init dataQueue failed!");
        at.linkid[id].usable = AT_LINK_UNUSE;
        return -1;
    }
    at.cmd((int8_t *)cmd5, strlen(cmd5), "CONNECT OK", NULL, NULL);
    return id;
}
