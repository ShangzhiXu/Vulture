s32_t SPIFFS_ix_remap(spiffs *fs, spiffs_file fh, u32_t offset)
{
    SPIFFS_API_DBG("%s "_SPIPRIfd " "_SPIPRIi "\n", __func__, fh, offset);
    s32_t res = SPIFFS_OK;
    SPIFFS_API_CHECK_CFG(fs);
    SPIFFS_API_CHECK_MOUNT(fs);
    SPIFFS_LOCK(fs);

    fh = SPIFFS_FH_UNOFFS(fs, fh);

    spiffs_fd *fd;
    res = spiffs_fd_get(fs, fh, &fd);
    SPIFFS_API_CHECK_RES_UNLOCK(fs, res);

    if (fd->ix_map == 0)
    {
        SPIFFS_API_CHECK_RES_UNLOCK(fs, SPIFFS_ERR_IX_MAP_UNMAPPED);
    }

    spiffs_ix_map *map = fd->ix_map;

    s32_t spix_diff = offset / SPIFFS_DATA_PAGE_SIZE(fs) - map->start_spix;
    map->offset = offset;

    // move existing pixes if within map offs
    if (spix_diff != 0)
    {
        // move vector
        int i;
        const s32_t vec_len = map->end_spix - map->start_spix + 1; // spix range includes last
        map->start_spix += spix_diff;
        map->end_spix += spix_diff;
        if (spix_diff >= vec_len)
        {
            // moving beyond range
            memset(&map->map_buf, 0, vec_len * sizeof(spiffs_page_ix));
            // populate_ix_map is inclusive
            res = spiffs_populate_ix_map(fs, fd, 0, vec_len - 1);
            SPIFFS_API_CHECK_RES_UNLOCK(fs, res);
        }
        else if (spix_diff > 0)
        {
            // diff positive
            for (i = 0; i < vec_len - spix_diff; i++)
            {
                map->map_buf[i] = map->map_buf[i + spix_diff];
            }
            // memset is non-inclusive
            memset(&map->map_buf[vec_len - spix_diff], 0, spix_diff * sizeof(spiffs_page_ix));
            // populate_ix_map is inclusive
            res = spiffs_populate_ix_map(fs, fd, vec_len - spix_diff, vec_len - 1);
            SPIFFS_API_CHECK_RES_UNLOCK(fs, res);
        }
        else
        {
            // diff negative
            for (i = vec_len - 1; i >= -spix_diff; i--)
            {
                map->map_buf[i] = map->map_buf[i + spix_diff];
            }
            // memset is non-inclusive
            memset(&map->map_buf[0], 0, -spix_diff * sizeof(spiffs_page_ix));
            // populate_ix_map is inclusive
            res = spiffs_populate_ix_map(fs, fd, 0, -spix_diff - 1);
            SPIFFS_API_CHECK_RES_UNLOCK(fs, res);
        }

    }

    SPIFFS_UNLOCK(fs);
    return res;
}
