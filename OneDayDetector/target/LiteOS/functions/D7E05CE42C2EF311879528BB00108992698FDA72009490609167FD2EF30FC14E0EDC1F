int pthread_mutex_init(pthread_mutex_t *mutex, const pthread_mutexattr_t *mutexAttr)
{
    pthread_mutexattr_t useAttr;
    MuxBaseCB *muxCreated = NULL;
    UINT32 intSave;

    if (mutex == NULL) {
        return EINVAL;
    }

    /* Set up the attributes we are going to use. */
    if (mutexAttr == NULL) {
        (VOID)pthread_mutexattr_init(&useAttr);
    } else {
        useAttr = *mutexAttr;
    }

    if (CheckMutexAttr(&useAttr) != LOS_OK) {
        return EINVAL;
    }

    mutex->stAttr = useAttr;
    muxCreated = &mutex->stLock;

    SCHEDULER_LOCK(intSave);
    muxCreated->muxCount = 0;
    muxCreated->owner = NULL;
    LOS_ListInit(&muxCreated->muxList);
    SCHEDULER_UNLOCK(intSave);

    return ENOERR;
}
