static s32_t spiffs_stat_pix(spiffs *fs, spiffs_page_ix pix, spiffs_file fh, spiffs_stat *s)
{
    (void)fh;
    spiffs_page_object_ix_header objix_hdr;
    spiffs_obj_id obj_id;
    s32_t res = _spiffs_rd(fs,  SPIFFS_OP_T_OBJ_IX | SPIFFS_OP_C_READ, fh,
                           SPIFFS_PAGE_TO_PADDR(fs, pix), sizeof(spiffs_page_object_ix_header), (u8_t *)&objix_hdr);
    SPIFFS_API_CHECK_RES(fs, res);

    u32_t obj_id_addr = SPIFFS_BLOCK_TO_PADDR(fs, SPIFFS_BLOCK_FOR_PAGE(fs , pix)) +
                        SPIFFS_OBJ_LOOKUP_ENTRY_FOR_PAGE(fs, pix) * sizeof(spiffs_obj_id);
    res = _spiffs_rd(fs,  SPIFFS_OP_T_OBJ_LU | SPIFFS_OP_C_READ, fh,
                     obj_id_addr, sizeof(spiffs_obj_id), (u8_t *)&obj_id);
    SPIFFS_API_CHECK_RES(fs, res);

    s->obj_id = obj_id & ~SPIFFS_OBJ_ID_IX_FLAG;
    s->type = objix_hdr.type;
    s->size = objix_hdr.size == SPIFFS_UNDEFINED_LEN ? 0 : objix_hdr.size;
    s->pix = pix;
    strncpy((char *)s->name, (char *)objix_hdr.name, SPIFFS_OBJ_NAME_LEN);
#if SPIFFS_OBJ_META_LEN
    _SPIFFS_MEMCPY(s->meta, objix_hdr.meta, SPIFFS_OBJ_META_LEN);
#endif

    return res;
}
