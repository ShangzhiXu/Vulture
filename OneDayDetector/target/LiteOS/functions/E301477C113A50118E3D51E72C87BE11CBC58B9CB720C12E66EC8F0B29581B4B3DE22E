s32_t spiffs_page_delete(
    spiffs *fs,
    spiffs_page_ix pix)
{
    s32_t res;
    // mark deleted entry in source object lookup
    spiffs_obj_id d_obj_id = SPIFFS_OBJ_ID_DELETED;
    res = _spiffs_wr(fs, SPIFFS_OP_T_OBJ_LU | SPIFFS_OP_C_DELE,
                     0,
                     SPIFFS_BLOCK_TO_PADDR(fs, SPIFFS_BLOCK_FOR_PAGE(fs, pix)) + SPIFFS_OBJ_LOOKUP_ENTRY_FOR_PAGE(fs, pix) * sizeof(spiffs_page_ix),
                     sizeof(spiffs_obj_id),
                     (u8_t *)&d_obj_id);
    SPIFFS_CHECK_RES(res);

    fs->stats_p_deleted++;
    fs->stats_p_allocated--;

    // mark deleted in source page
    u8_t flags = 0xff;
#if SPIFFS_NO_BLIND_WRITES
    res = _spiffs_rd(fs, SPIFFS_OP_T_OBJ_DA | SPIFFS_OP_C_READ,
                     0, SPIFFS_PAGE_TO_PADDR(fs, pix) + offsetof(spiffs_page_header, flags),
                     sizeof(flags), &flags);
    SPIFFS_CHECK_RES(res);
#endif
    flags &= ~(SPIFFS_PH_FLAG_DELET | SPIFFS_PH_FLAG_USED);
    res = _spiffs_wr(fs, SPIFFS_OP_T_OBJ_DA | SPIFFS_OP_C_DELE,
                     0,
                     SPIFFS_PAGE_TO_PADDR(fs, pix) + offsetof(spiffs_page_header, flags),
                     sizeof(flags), &flags);

    return res;
}
