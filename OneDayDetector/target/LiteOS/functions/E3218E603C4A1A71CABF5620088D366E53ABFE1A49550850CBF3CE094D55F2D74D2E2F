int MQTTDeserialize_connect(MQTTPacket_connectData *data, unsigned char *buf, int len)
{
    MQTTHeader header = {0};
    MQTTConnectFlags flags = {0};
    unsigned char *curdata = buf;
    unsigned char *enddata = &buf[len];
    int rc = 0;
    MQTTString Protocol;
    int version;
    int mylen = 0;

    FUNC_ENTRY;
    header.byte = readChar(&curdata);
    if (header.bits.type != CONNECT)
        goto exit;

    curdata += MQTTPacket_decodeBuf(curdata, &mylen); /* read remaining length */

    if (!readMQTTLenString(&Protocol, &curdata, enddata) ||
            enddata - curdata < 0) /* do we have enough data to read the protocol version byte? */
        goto exit;

    version = (int)readChar(&curdata); /* Protocol version */
    /* If we don't recognize the protocol version, we don't parse the connect packet on the
     * basis that we don't know what the format will be.
     */
    if (MQTTPacket_checkVersion(&Protocol, version))
    {
        flags.all = readChar(&curdata);
        data->cleansession = flags.bits.cleansession;
        data->keepAliveInterval = readInt(&curdata);
        if (!readMQTTLenString(&data->clientID, &curdata, enddata))
            goto exit;
        data->willFlag = flags.bits.will;
        if (flags.bits.will)
        {
            data->will.qos = flags.bits.willQoS;
            data->will.retained = flags.bits.willRetain;
            if (!readMQTTLenString(&data->will.topicName, &curdata, enddata) ||
                    !readMQTTLenString(&data->will.message, &curdata, enddata))
                goto exit;
        }
        if (flags.bits.username)
        {
            if (enddata - curdata < 3 || !readMQTTLenString(&data->username, &curdata, enddata))
                goto exit; /* username flag set, but no username supplied - invalid */
            if (flags.bits.password &&
                    (enddata - curdata < 3 || !readMQTTLenString(&data->password, &curdata, enddata)))
                goto exit; /* password flag set, but no password supplied - invalid */
        }
        else if (flags.bits.password)
            goto exit; /* password flag set without username - invalid */
        rc = 1;
    }
exit:
    FUNC_EXIT_RC(rc);
    return rc;
}
