int lwm2m_data_serialize(lwm2m_uri_t *uriP,
                         int size,
                         lwm2m_data_t *dataP,
                         lwm2m_media_type_t *formatP,
                         uint8_t **bufferP)
{
    LOG_URI(uriP);
    LOG_ARG("size: %d, formatP: %s", size, STR_MEDIA_TYPE(*formatP));

    // Check format
    if (*formatP == LWM2M_CONTENT_TEXT
            || *formatP == LWM2M_CONTENT_OPAQUE)
    {
        if (size != 1
                || (uriP != NULL && !LWM2M_URI_IS_SET_RESOURCE(uriP))
                || dataP->type == LWM2M_TYPE_OBJECT
                || dataP->type == LWM2M_TYPE_OBJECT_INSTANCE
                || dataP->type == LWM2M_TYPE_MULTIPLE_RESOURCE)
        {
#ifdef LWM2M_SUPPORT_JSON
            *formatP = LWM2M_CONTENT_JSON;
#else
            *formatP = LWM2M_CONTENT_TLV;
#endif
        }
    }

    if (*formatP == LWM2M_CONTENT_OPAQUE
            && dataP->type != LWM2M_TYPE_OPAQUE)
    {
        LOG("Opaque format is reserved to opaque resources.");
        return -1;
    }

    if (dm_isUriOpaqueHandle(uriP))
    {
        *formatP = LWM2M_CONTENT_OPAQUE;
    }

    LOG_ARG("Final format: %s", STR_MEDIA_TYPE(*formatP));

    switch (*formatP)
    {
    case LWM2M_CONTENT_TEXT:
        return prv_textSerialize(dataP, bufferP);

    case LWM2M_CONTENT_OPAQUE:
        *bufferP = (uint8_t *)lwm2m_malloc(dataP->value.asBuffer.length);
        if (*bufferP == NULL) return -1;
        memcpy(*bufferP, dataP->value.asBuffer.buffer, dataP->value.asBuffer.length);
        return (int)dataP->value.asBuffer.length;

    case LWM2M_CONTENT_TLV:
    case LWM2M_CONTENT_TLV_OLD:
    {
        bool isResourceInstance;

        if (uriP != NULL && LWM2M_URI_IS_SET_RESOURCE(uriP)
                && (size != 1 || dataP->id != uriP->resourceId))
        {
            isResourceInstance = true;
        }
        else
        {
            isResourceInstance = false;
        }
        return tlv_serialize(isResourceInstance, size, dataP, bufferP);
    }

#ifdef LWM2M_CLIENT_MODE
    case LWM2M_CONTENT_LINK:
        return discover_serialize(NULL, uriP, NULL, size, dataP, bufferP);
#endif
#ifdef LWM2M_SUPPORT_JSON
    case LWM2M_CONTENT_JSON:
    case LWM2M_CONTENT_JSON_OLD:
        return json_serialize(uriP, size, dataP, bufferP);
#endif

    default:
        return -1;
    }
}
