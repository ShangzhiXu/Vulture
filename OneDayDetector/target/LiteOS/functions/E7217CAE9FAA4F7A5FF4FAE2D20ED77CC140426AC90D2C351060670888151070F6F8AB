static void USART_RxISR_16BIT(USART_HandleTypeDef *husart)
{
  uint16_t* tmp;
  uint16_t uhMask = husart->Mask;

  if ((husart->State == HAL_USART_STATE_BUSY_RX) ||
      (husart->State == HAL_USART_STATE_BUSY_TX_RX))
  {
    tmp = (uint16_t*) husart->pRxBuffPtr;
    *tmp = (uint16_t)(husart->Instance->RDR & uhMask);
    husart->pRxBuffPtr += 2;
    
    if(--husart->RxXferCount == 0)
    {
      /* Disable the USART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(husart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(husart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif

      /* Disable the USART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(husart->Instance->CR3, USART_CR3_EIE);

      /* Clear RxISR function pointer */
      husart->RxISR = NULL;
      
      if(husart->State == HAL_USART_STATE_BUSY_RX)
      {
#if defined(USART_CR2_SLVEN)
        /* Clear SPI slave underrun flag and discard transmit data */
        if (husart->SlaveMode == USART_SLAVEMODE_ENABLE)
        {
          __HAL_USART_CLEAR_UDRFLAG(husart);
          __HAL_USART_SEND_REQ(husart, USART_TXDATA_FLUSH_REQUEST);
        }
#endif
        
        /* Rx process is completed, restore husart->State to Ready */
        husart->State = HAL_USART_STATE_READY;
        
        HAL_USART_RxCpltCallback(husart);
      }
      else if ((husart->TxXferCount == 0) &&
               (READ_BIT(husart->Instance->CR1, USART_CR1_TCIE) != USART_CR1_TCIE))
      {
        /* TxRx process is completed, restore husart->State to Ready */
        husart->State = HAL_USART_STATE_READY;
        
        HAL_USART_TxRxCpltCallback(husart);
      }
    }
#if defined(USART_CR2_SLVEN)
    else if ( (husart->State == HAL_USART_STATE_BUSY_RX) &&
              (husart->SlaveMode == USART_SLAVEMODE_DISABLE))
#else
    else if (husart->State == HAL_USART_STATE_BUSY_RX)
#endif
    {
      /* Send dummy byte in order to generate the clock for the Slave to Send the next data */
      husart->Instance->TDR = (USART_DUMMY_DATA & (uint16_t)0x00FF);
    }
  }
}
