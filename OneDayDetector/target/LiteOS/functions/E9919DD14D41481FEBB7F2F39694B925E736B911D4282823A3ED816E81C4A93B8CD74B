uint8_t dm_handleRequest(lwm2m_context_t *contextP,
                         lwm2m_uri_t *uriP,
                         lwm2m_server_t *serverP,
                         coap_packet_t *message,
                         coap_packet_t *response)
{
    uint8_t result;
    lwm2m_media_type_t format;

    LOG_ARG("Code: %02X, server status: %s", message->code, STR_STATUS(serverP->status));
    LOG_URI(uriP);

    if (IS_OPTION(message, COAP_OPTION_CONTENT_TYPE))
    {
        format = utils_convertMediaType(message->content_type);
    }
    else
    {
        format = (dm_isUriOpaqueHandle(uriP) ? LWM2M_CONTENT_OPAQUE : LWM2M_CONTENT_TLV);

    }

    if (uriP->objectId == LWM2M_SECURITY_OBJECT_ID)
    {
        return COAP_404_NOT_FOUND;
    }

    if (serverP->status != STATE_REGISTERED
            && serverP->status != STATE_REG_UPDATE_NEEDED
            && serverP->status != STATE_REG_FULL_UPDATE_NEEDED
            && serverP->status != STATE_REG_UPDATE_PENDING)
    {
        return COAP_IGNORE;
    }

    switch (message->code)
    {
    case COAP_GET:
    {
        uint8_t *buffer = NULL;
        size_t length = 0;
        int res;

        if (IS_OPTION(message, COAP_OPTION_OBSERVE))
        {
            lwm2m_data_t *dataP = NULL;
            int size = 0;

            if ((result = acc_auth_operate(contextP, uriP, OBJ_ACC_OBSERVE, serverP->shortID)) != COAP_NO_ERROR)
            {
                return result;
            }

            result = object_readData(contextP, uriP, &size, &dataP, NULL, serverP->shortID);
            if (COAP_205_CONTENT == result)
            {
                result = observe_handleRequest(contextP, uriP, serverP, size, dataP, message, response);
                if (COAP_205_CONTENT == result)
                {
                    if (IS_OPTION(message, COAP_OPTION_ACCEPT))
                    {
                        format = utils_convertMediaType((coap_content_type_t)message->accept[0]);
                    }
                    else
                    {
                        format = LWM2M_CONTENT_TLV;
                    }

                    if(dm_isUriOpaqueHandle(uriP))
                    {
                        buffer = NULL;
                        length = 0;
                        format = LWM2M_CONTENT_OPAQUE;
                    }
                    else
                    {
                        res = lwm2m_data_serialize(uriP, size, dataP, &format, &buffer);
                        if (res < 0)
                        {
                            result = COAP_500_INTERNAL_SERVER_ERROR;
                        }
                        else
                        {
                            length = (size_t)res;
                            LOG_ARG("Observe Request[/%d/%d/%d]: %.*s\n", uriP->objectId, uriP->instanceId, uriP->resourceId, length, buffer);
                        }
                    }
                }
                lwm2m_data_free(size, dataP);
            }
        }
        else if (IS_OPTION(message, COAP_OPTION_ACCEPT)
                 && message->accept_num == 1
                 && message->accept[0] == APPLICATION_LINK_FORMAT)
        {
            if ((result = acc_auth_operate(contextP, uriP, OBJ_ACC_DISCOVER, serverP->shortID)) != COAP_NO_ERROR)
            {
                return result;
            }
            format = LWM2M_CONTENT_LINK;
            result = object_discover(contextP, uriP, serverP, &buffer, &length);
        }
        else
        {
            if ((result = acc_auth_operate(contextP, uriP, OBJ_ACC_READ, serverP->shortID)) != COAP_NO_ERROR)
            {
                return result;
            }
            if (IS_OPTION(message, COAP_OPTION_ACCEPT))
            {
                format = utils_convertMediaType((coap_content_type_t)message->accept[0]);
            }

            result = object_read(contextP, uriP, &format, &buffer, &length, serverP->shortID);
        }
        if (COAP_205_CONTENT == result)
        {
            coap_set_header_content_type(response, format);
            coap_set_payload(response, buffer, length);
            // lwm2m_handle_packet will free buffer
        }
        else
        {
            lwm2m_free(buffer);
        }
    }
    break;

    case COAP_POST:
    {
        if (!LWM2M_URI_IS_SET_INSTANCE(uriP))
        {
            if ((result = acc_auth_operate(contextP, uriP, OBJ_ACC_CREATE, serverP->shortID)) != COAP_NO_ERROR)
            {
                return result;
            }
            result = object_create(contextP, uriP, format, message->payload, message->payload_len);
            if (result == COAP_201_CREATED)
            {
                //longest uri is /65535/65535 = 12 + 1 (null) chars
                char location_path[13] = "";
                //instanceId expected
                if ((uriP->flag & LWM2M_URI_FLAG_INSTANCE_ID) == 0)
                {
                    result = COAP_500_INTERNAL_SERVER_ERROR;
                    break;
                }

                if (sprintf(location_path, "/%d/%d", uriP->objectId, uriP->instanceId) < 0)
                {
                    result = COAP_500_INTERNAL_SERVER_ERROR;
                    break;
                }
                coap_set_header_location_path(response, location_path);

                lwm2m_update_registration(contextP, 0, true);
            }
        }
        else if (!LWM2M_URI_IS_SET_RESOURCE(uriP))
        {
            if ((result = acc_auth_operate(contextP, uriP, OBJ_ACC_WRITE, serverP->shortID)) != COAP_NO_ERROR)
            {
                return result;
            }
            result = object_write(contextP, uriP, format, message->payload, message->payload_len);
        }
        else
        {
            if ((result = acc_auth_operate(contextP, uriP, OBJ_ACC_EXCUTE, serverP->shortID)) != COAP_NO_ERROR)
            {
                return result;
            }
            result = object_execute(contextP, uriP, message->payload, message->payload_len);
        }

    }
    break;

    case COAP_PUT:
    {
        if (IS_OPTION(message, COAP_OPTION_URI_QUERY))
        {
            lwm2m_attributes_t attr;

            if ((result = acc_auth_operate(contextP, uriP, OBJ_ACC_WRITE_ATTR, serverP->shortID)) != COAP_NO_ERROR)
            {
                return result;
            }
            if (0 != prv_readAttributes(message->uri_query, &attr))
            {
                result = COAP_400_BAD_REQUEST;
            }
            else
            {
                result = observe_setParameters(contextP, uriP, serverP, &attr);
            }
        }
        else if (LWM2M_URI_IS_SET_INSTANCE(uriP))
        {
            if ((result = acc_auth_operate(contextP, uriP, OBJ_ACC_WRITE, serverP->shortID)) != COAP_NO_ERROR)
            {
                return result;
            }
            result = object_write(contextP, uriP, format, message->payload, message->payload_len);
        }
        else
        {
            result = COAP_400_BAD_REQUEST;
        }
    }
    break;

    case COAP_DELETE:
    {
        if (!LWM2M_URI_IS_SET_INSTANCE(uriP) || LWM2M_URI_IS_SET_RESOURCE(uriP))
        {
            result = COAP_400_BAD_REQUEST;
        }
        else
        {
            if ((result = acc_auth_operate(contextP, uriP, OBJ_ACC_DELETE, serverP->shortID)) != COAP_NO_ERROR)
            {
                return result;
            }
            result = object_delete(contextP, uriP);
            if (result == COAP_202_DELETED)
            {
                lwm2m_update_registration(contextP, 0, true);
            }
        }
    }
    break;

    default:
        result = COAP_400_BAD_REQUEST;
        break;
    }

    return result;
}
