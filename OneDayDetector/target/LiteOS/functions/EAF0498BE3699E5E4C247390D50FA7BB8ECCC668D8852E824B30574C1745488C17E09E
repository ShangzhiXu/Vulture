static HAL_StatusTypeDef CEC_Receive_IT(CEC_HandleTypeDef *hcec)
{
  static uint32_t temp;
  uint32_t tmp_state = 0;

  tmp_state = hcec->State; 
  if((tmp_state == HAL_CEC_STATE_BUSY_RX) || (tmp_state == HAL_CEC_STATE_BUSY_TX_RX)) 
  {
    temp = hcec->Instance->CSR;
    
    /* Store received data */
    *hcec->pRxBuffPtr++ = hcec->Instance->RXD;
    
    /* Acknowledge received byte by writing 0x00 */
    MODIFY_REG(hcec->Instance->CSR, CEC_FLAG_RECEIVE_MASK, 0x00);
    
    /* Increment the number of received data */
    if(hcec->RxXferSize == CEC_RXXFERSIZE_INITIALIZE)
    {
      hcec->RxXferSize = 0;
    }
    else
    {
      hcec->RxXferSize++;
    }
    
    /* If the End Of Message is reached */
    if(HAL_IS_BIT_SET(temp, CEC_FLAG_REOM))
    {
      if(hcec->State == HAL_CEC_STATE_BUSY_TX_RX) 
      {
        /* Interrupts are not disabled due to transmission still ongoing */
        
        hcec->State = HAL_CEC_STATE_BUSY_TX;
      }
      else
      {
        /* Disable the CEC Transmission Interrupts */
        __HAL_CEC_DISABLE_IT(hcec, CEC_IT_IE);
        
        hcec->State = HAL_CEC_STATE_READY;
      }

      HAL_CEC_RxCpltCallback(hcec);

      return HAL_OK;
    }    
    else
    {
      return HAL_BUSY; 
    }
  }
  else
  {
    return HAL_BUSY; 
  }
}
