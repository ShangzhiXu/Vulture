int connection_connect_dtls(connection_t *connP, security_instance_t *targetP, const char *host, const char *port, int client_or_server)
{
    int ret;
    dtls_shakehand_info_s info;
    dtls_establish_info_s establish_info;

    establish_info.psk_or_cert = VERIFY_WITH_PSK;
    establish_info.udp_or_tcp = MBEDTLS_NET_PROTO_UDP;
    establish_info.v.p.psk = (const unsigned char *)targetP->secretKey;
    establish_info.v.p.psk_len = targetP->secretKeyLen;
    establish_info.v.p.psk_identity = (const unsigned char *)targetP->publicIdentity;

    connP->net_context = (void *)dtls_ssl_new(&establish_info, client_or_server);
    if (connP->net_context == NULL) {
        ATINY_LOG(LOG_INFO, "connP->ssl is NULL in connection_create");
        return COAP_500_INTERNAL_SERVER_ERROR;
    }


    memset(&info, 0, sizeof(info));
    info.client_or_server = client_or_server;
    info.finish_notify = NULL;
    info.step_notify   = NULL;
    info.udp_or_tcp = MBEDTLS_NET_PROTO_UDP;
    info.psk_or_cert = VERIFY_WITH_PSK;
#ifdef LWM2M_BOOTSTRAP
    info.step_notify = (void(*)(void *))lwm2m_step_striger_server_initiated_bs;
    info.param = (void(*)(void *))connP;
#endif

    if (MBEDTLS_SSL_IS_CLIENT == client_or_server) {
        info.u.c.host = host;
        info.u.c.port = port;
        info.timeout = DTLS_UDP_CLIENT_SHAKEHAND_TIMEOUT;
    } else {
#ifdef LWM2M_BOOTSTRAP
        info.timeout = targetP->clientHoldOffTime;
        info.u.s.local_port = port;
        timer_init(&connP->server_triger_timer, LWM2M_TRIGER_SERVER_MODE_INITIATED_TIME, (void(*)(void*))connection_striger_server_initiated_bs, connP);
        timer_start(&connP->server_triger_timer);
#endif
    }
    ret = dtls_shakehand(connP->net_context, &info);
#ifdef LWM2M_BOOTSTRAP
    timer_stop(&connP->server_triger_timer);
#endif
    if (ret != 0) {
        ATINY_LOG(LOG_INFO, "ret is %d in connection_create", ret);
        dtls_ssl_destroy((mbedtls_ssl_context *)connP->net_context);
        connP->net_context = NULL;
        return COAP_500_INTERNAL_SERVER_ERROR;
    }
    connP->dtls_flag = true;
    return COAP_NO_ERROR;
}
