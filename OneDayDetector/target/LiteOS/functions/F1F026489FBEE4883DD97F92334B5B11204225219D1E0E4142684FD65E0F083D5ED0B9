HAL_StatusTypeDef HASH_Start_IT(HASH_HandleTypeDef *hhash, uint8_t *pInBuffer, uint32_t Size, uint8_t* pOutBuffer, uint32_t Algorithm)
{
    
  /* If State is ready or suspended, start or resume IT-based HASH processing */
  if((hhash->State == HAL_HASH_STATE_READY) || (hhash->State == HAL_HASH_STATE_SUSPENDED))  
  {
    /* Check input parameters */
    if ((pInBuffer == NULL) || (Size == 0) || (pOutBuffer == NULL))
    {
      hhash->State = HAL_HASH_STATE_READY;
      return  HAL_ERROR;
    }
      
    /* Process Locked */
    __HAL_LOCK(hhash);    
      
    /* Change the HASH state */
    hhash->State = HAL_HASH_STATE_BUSY;
    
    /* Initialize IT counter */
    hhash->HashITCounter = 1;
    
    /* Check if initialization phase has already be performed */
    if(hhash->Phase == HAL_HASH_PHASE_READY)
    {
      /* Select the HASH algorithm, clear HMAC mode and long key selection bit, reset the HASH processor core */
      MODIFY_REG(HASH->CR, HASH_CR_LKEY|HASH_CR_ALGO|HASH_CR_MODE|HASH_CR_INIT, Algorithm | HASH_CR_INIT); 
      
      /* Configure the number of valid bits in last word of the message */
     __HAL_HASH_SET_NBVALIDBITS(Size);  
     

      hhash->HashInCount = Size;               /* Counter used to keep track of number of data
                                                  to be fed to the IP */ 
      hhash->pHashInBuffPtr = pInBuffer;       /* Points at data which will be fed to the IP at 
                                                  the next interruption */
     /* In case of suspension, hhash->HashInCount and hhash->pHashInBuffPtr contain 
        the information describing where the HASH process is stopped. 
        These variables are used later on to resume the HASH processing at the 
        correct location. */                                                   
                           
      hhash->pHashOutBuffPtr = pOutBuffer;     /* Points at the computed digest */      
    }
    
    /* Set the phase */
    hhash->Phase = HAL_HASH_PHASE_PROCESS;
    
    /* Process Unlock */
    __HAL_UNLOCK(hhash);
    
    /* Enable Interrupts */
    __HAL_HASH_ENABLE_IT(HASH_IT_DINI|HASH_IT_DCI);
    
    /* Return function status */
    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
  }

}
