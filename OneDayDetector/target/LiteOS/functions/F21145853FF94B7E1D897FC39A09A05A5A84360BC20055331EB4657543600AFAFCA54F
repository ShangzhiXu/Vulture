static void SMARTCARD_RxISR_FIFOEN(SMARTCARD_HandleTypeDef *hsmartcard)
{
  uint8_t   nb_rx_data;
  
  /* Check that a Rx process is ongoing */
  if (hsmartcard->RxState == HAL_SMARTCARD_STATE_BUSY_RX)
  {
    for(nb_rx_data = hsmartcard->NbRxDataToProcess ; nb_rx_data > 0 ; nb_rx_data--)
    {
      *hsmartcard->pRxBuffPtr++ = (uint8_t)(hsmartcard->Instance->RDR & (uint8_t)0xFF);
      
      if(--hsmartcard->RxXferCount == 0)
      {
        CLEAR_BIT(hsmartcard->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
        
        /* Check if a transmit process is ongoing or not. If not disable ERR IT */
        if(hsmartcard->gState == HAL_SMARTCARD_STATE_READY)
        {
          /* Disable the SMARTCARD Error Interrupt: (Frame error, noise error, overrun error) */
          CLEAR_BIT(hsmartcard->Instance->CR3, USART_CR3_EIE);
        }
        
        /* Disable the SMARTCARD Parity Error Interrupt */
        CLEAR_BIT(hsmartcard->Instance->CR1, USART_CR1_PEIE);
        
        hsmartcard->RxState = HAL_SMARTCARD_STATE_READY;
        
        /* Clear RxISR function pointer */
        hsmartcard->RxISR = NULL;
        
        HAL_SMARTCARD_RxCpltCallback(hsmartcard);
      }
    }
    
    /* When remaining number of bytes to receive is less than the RX FIFO 
    threshold, next incoming frames are processed as if FIFO mode was 
    disabled (i.e. one interrupt per received frame).
    */
    if (((hsmartcard->RxXferCount != 0U)) && (hsmartcard->RxXferCount < hsmartcard->NbRxDataToProcess))
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(hsmartcard->Instance->CR3, USART_CR3_RXFTIE);
      
      /* Update the RxISR function pointer */
      hsmartcard->RxISR = SMARTCARD_RxISR;
      
      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(hsmartcard->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_SMARTCARD_SEND_REQ(hsmartcard, SMARTCARD_RXDATA_FLUSH_REQUEST);
  }
}
