int32_t esp8266_data_handler(void *arg, int8_t *buf, int32_t len)
{
    if ((buf == NULL) || (len <= 0)) {
        AT_LOG("param invailed!");
        return AT_FAILED;
    }
    AT_LOG("entry!");

    // process data frame, like + IPD,linkid,len:data
    int32_t ret = -1;
    int32_t linkid = 0, data_len = 0;
    int32_t remote_port = 0;
    char *remote_ip;
    char *p1, *p2;
    QUEUE_BUFF qbuf;
    p1 = (char *)buf;

LOOP:
    if (memcmp(p1, AT_DATAF_PREFIX, strlen(AT_DATAF_PREFIX)) == 0) {
        p2 = strstr(p1, ",");
        if (p2 == NULL) {
            AT_LOG("got data prefix invailed!");
            goto END;
        }

        if (at.mux_mode == AT_MUXMODE_MULTI) {
            linkid = 0;
            for (p2++; *p2 <= '9' && *p2 >= '0'; p2++) {
                linkid = linkid * 10 + (*p2 - '0');
            }
        }

        data_len = 0;
        for (p2++; *p2 <= '9' && *p2 >= '0'; p2++) {
            data_len = (data_len * 10 + (*p2 - '0'));
        }

        // remote ip:str
        remote_ip = (char *)at.linkid[linkid].remote_ip;
        for (p2++; *p2 != ','; p2++) {
            *(remote_ip++) = *p2;
        }

        // remote port
        remote_port = 0;
        for (p2++; *p2 <= '9' && *p2 >= '0'; p2++) {
            remote_port = (remote_port * 10 + (*p2 - '0'));
        }
        at.linkid[linkid].remote_port = remote_port;

        p2++; // over ':'

        qbuf.addr = at_malloc(data_len);
        if (qbuf.addr == NULL) {
            AT_LOG("malloc for qbuf failed!");
            goto END;
        }

        qbuf.len = data_len;
        memcpy(qbuf.addr, p2, data_len);

        if ((ret = LOS_QueueWriteCopy(at.linkid[linkid].qid, &qbuf, sizeof(QUEUE_BUFF), 0)) != LOS_OK) {
            AT_LOG("LOS_QueueWriteCopy  failed! ret = %lx", ret);
            at_free(qbuf.addr);
            goto END;
        }
        p1 = (p2 + data_len);

        if ((p1 - (char *)buf) < len)
            goto LOOP;
    }
END:
    return 0;
}
