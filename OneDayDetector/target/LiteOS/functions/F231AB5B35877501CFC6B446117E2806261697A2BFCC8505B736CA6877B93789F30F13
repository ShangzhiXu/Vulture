static lv_res_t lv_switch_signal(lv_obj_t * sw, lv_signal_t sign, void * param)
{
    lv_res_t res;

    if(sign == LV_SIGNAL_GET_STYLE) {
        lv_get_style_info_t * info = param;
        info->result = lv_switch_get_style(sw, info->part);
        if(info->result != NULL) return LV_RES_OK;
        else return ancestor_signal(sw, sign, param);
    }

    if(sign == LV_SIGNAL_GET_TYPE) {
        res = ancestor_signal(sw, sign, param);
        if(res != LV_RES_OK) return res;
        return lv_obj_handle_get_type_signal(param, LV_OBJX_NAME);
    }

    /* Include the ancient signal function */
    res = ancestor_signal(sw, sign, param);
    if(res != LV_RES_OK) return res;

    if(sign == LV_SIGNAL_CLEANUP) {
        lv_obj_clean_style_list(sw, LV_SWITCH_PART_KNOB);
    }
    else if(sign == LV_SIGNAL_RELEASED) {
        if(lv_switch_get_state(sw)) lv_switch_off(sw, LV_ANIM_ON);
        else lv_switch_on(sw, LV_ANIM_ON);

        res = lv_event_send(sw, LV_EVENT_VALUE_CHANGED, NULL);
        if(res != LV_RES_OK) return res;

    }
    else if(sign == LV_SIGNAL_CONTROL) {
        char c = *((char *)param);
        if(c == LV_KEY_RIGHT || c == LV_KEY_UP) lv_switch_on(sw, LV_ANIM_ON);
        else if(c == LV_KEY_LEFT || c == LV_KEY_DOWN) lv_switch_off(sw, LV_ANIM_ON);

        res   = lv_event_send(sw, LV_EVENT_VALUE_CHANGED, NULL);
        if(res != LV_RES_OK) return res;
    }
    else if(sign == LV_SIGNAL_REFR_EXT_DRAW_PAD) {
        lv_style_int_t knob_left = lv_obj_get_style_pad_left(sw,   LV_SWITCH_PART_KNOB);
        lv_style_int_t knob_right = lv_obj_get_style_pad_right(sw,  LV_SWITCH_PART_KNOB);
        lv_style_int_t knob_top = lv_obj_get_style_pad_top(sw,    LV_SWITCH_PART_KNOB);
        lv_style_int_t knob_bottom = lv_obj_get_style_pad_bottom(sw, LV_SWITCH_PART_KNOB);

        /* The smaller size is the knob diameter*/
        lv_coord_t knob_size = LV_MATH_MIN(lv_obj_get_width(sw), lv_obj_get_height(sw)) >> 1;
        knob_size += LV_MATH_MAX(LV_MATH_MAX(knob_left, knob_right), LV_MATH_MAX(knob_bottom, knob_top));
        knob_size += 2;         /*For rounding error*/

        knob_size += lv_obj_get_draw_rect_ext_pad_size(sw, LV_SWITCH_PART_KNOB);

        /*Indic. size is handled by bar*/
        sw->ext_draw_pad = LV_MATH_MAX(sw->ext_draw_pad, knob_size);
    }
    else if(sign == LV_SIGNAL_GET_EDITABLE) {
        bool * editable = (bool *)param;
        *editable       = false; /*The ancestor slider is editable the switch is not*/
    }

    return res;
}
