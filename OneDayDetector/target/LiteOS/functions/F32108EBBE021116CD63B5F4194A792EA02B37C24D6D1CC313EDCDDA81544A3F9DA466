uint8_t connectivity_moni_change(lwm2m_data_t *dataArray,
                                 lwm2m_object_t *objectP)
{
    int64_t value;
    uint8_t result;
    conn_m_data_t *data;

    data = (conn_m_data_t *)(objectP->userData);

    switch (dataArray->id) {
    case RES_M_RADIO_SIGNAL_STRENGTH: {
        if (lwm2m_data_decode_int(dataArray, &value) == 1) {
            data->signalStrength = value;
            result = COAP_204_CHANGED;
        } else {
            result = COAP_400_BAD_REQUEST;
        }
        break;
    }
    case RES_O_LINK_QUALITY: {
        if (lwm2m_data_decode_int(dataArray, &value) == 1) {
            data->linkQuality = value;
            result = COAP_204_CHANGED;
        } else {
            result = COAP_400_BAD_REQUEST;
        }
        break;
    }
    case RES_M_IP_ADDRESSES: {
        if (sizeof(data->ipAddresses[0]) <= dataArray->value.asBuffer.length) {
            result = COAP_400_BAD_REQUEST;
        } else {
            memset(data->ipAddresses[0], 0, sizeof(data->ipAddresses[0]));
            memcpy(data->ipAddresses[0], dataArray->value.asBuffer.buffer, dataArray->value.asBuffer.length);
            data->ipAddresses[0][dataArray->value.asBuffer.length] = 0;
            result = COAP_204_CHANGED;
        }
        break;
    }
    case RES_O_ROUTER_IP_ADDRESS: {
        if (sizeof(data->routerIpAddresses[0]) <= dataArray->value.asBuffer.length) {
            result = COAP_400_BAD_REQUEST;
        } else {
            memset(data->routerIpAddresses[0], 0, sizeof(data->routerIpAddresses[0]));
            memcpy(data->routerIpAddresses[0], dataArray->value.asBuffer.buffer, dataArray->value.asBuffer.length);
            data->routerIpAddresses[0][dataArray->value.asBuffer.length] = 0;
            result = COAP_204_CHANGED;
        }
        break;
    }
    case RES_O_CELL_ID: {
        if (lwm2m_data_decode_int(dataArray, &value) == 1) {
            data->cellId = value;
            result = COAP_204_CHANGED;
        } else {
            result = COAP_400_BAD_REQUEST;
        }
        break;
    }
    default:
        result = COAP_405_METHOD_NOT_ALLOWED;
    }

    return result;
}
