int32_t bg36_create_socket(const int8_t *host, const int8_t *port, int32_t proto, char *service_type)
{
    int rbuflen = 64;
    char inbuf[64] = {0};
    char tmpbuf[32] = {0};
    int conid = 0;
    int err = 0;
    char *str = NULL;
    int id = 0;
    int ret = 0;
    char cmd[64] = {0};

    AT_LOG("port:%s\r\n", port);

    if (at.mux_mode != AT_MUXMODE_MULTI) {
        AT_LOG("Only support in multi mode!\r\n");
        return AT_FAILED;
    }

    id = at.get_id();
    if (id >= MAX_BG36_SOCK_NUM) {
        AT_LOG("sock num exceeded,socket is %d", id);
        return AT_FAILED;
    }

    (void)snprintf(cmd, 64, "%s,%d,\"%s\",\"%s\",%s,0,1\r", QIOPEN_SOCKET, id, service_type, host, port);
    ret = bg36_cmd(cmd, strlen(cmd), "+QIOPEN:", inbuf, &rbuflen);
    str = strstr(inbuf, "+QIOPEN:");
    if ((str == NULL) || (ret != AT_OK)) {
        AT_LOG("QIOPEN no reply, sockid:%d", id);
        (void)bg36_close_sock((int)id);
        (void)LOS_TaskDelay(10000);
        ret = bg36_cmd(cmd, strlen(cmd), "+QIOPEN:", inbuf, &rbuflen);
        str = strstr(inbuf, "+QIOPEN:");
        if ((str == NULL) || (ret != AT_OK)) {
            at.linkid[id].usable = AT_LINK_UNUSE;
            return AT_FAILED;
        }
    }

    ret = sscanf(str, "+QIOPEN: %d,%d%s", &conid, &err, tmpbuf);
    if ((ret == -1) || (err != 0) || (conid != id)) {
        AT_LOG("Create socket %d failed. conid:%d, ret %d, err:%d", id, conid, ret, err);
        (void)bg36_close_sock(conid);
        at.linkid[id].usable = AT_LINK_UNUSE;
        return AT_FAILED;
    }

    if (LOS_QueueCreate("dataQueue", 16, &at.linkid[id].qid, 0, sizeof(QUEUE_BUFF)) != LOS_OK) {
        AT_LOG("init dataQueue failed!");
        (void)bg36_close_sock(conid);
        at.linkid[id].usable = AT_LINK_UNUSE;
        return AT_FAILED;
    }

    sockinfo[id].used_flag = true;
    AT_LOG("create socket %d success!", id);

    return id;
}
