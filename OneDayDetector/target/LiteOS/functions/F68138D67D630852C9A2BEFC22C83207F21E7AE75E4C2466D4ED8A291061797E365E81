static uint8_t prv_set_value(lwm2m_data_t *dataP)
{
    char str[MAX_STRING_LEN + 1] = {0};
    int64_t current_time;
    char UTC_offset[PRV_OFFSET_MAXLEN];
    char timezone[PRV_TIMEZONE_MAXLEN];
    lwm2m_data_t *subTlvP = NULL;
    int power;
    int voltage;
    int battery_level;
    int free_memory;
    int err;
    int result;
    // a simple switch structure is used to respond at the specified resource asked
    switch (dataP->id) {
    case RES_O_MANUFACTURER: {
        result = atiny_cmd_ioctl(ATINY_GET_MANUFACTURER, str, MAX_STRING_LEN);
        if (result == ATINY_OK) {
            lwm2m_data_encode_string(str, dataP);
            return COAP_205_CONTENT;
        } else {
            return COAP_400_BAD_REQUEST;
        }
    }
    case RES_O_MODEL_NUMBER: {
        result = atiny_cmd_ioctl(ATINY_GET_MODEL_NUMBER, str, MAX_STRING_LEN);
        if (result == ATINY_OK) {
            lwm2m_data_encode_string(str, dataP);
            return COAP_205_CONTENT;
        } else {
            return COAP_400_BAD_REQUEST;
        }
    }
    case RES_O_SERIAL_NUMBER: {
        result = atiny_cmd_ioctl(ATINY_GET_SERIAL_NUMBER, str, MAX_STRING_LEN);
        if (result == ATINY_OK) {
            lwm2m_data_encode_string(str, dataP);
            return COAP_205_CONTENT;
        } else {
            return COAP_400_BAD_REQUEST;
        }
    }
    case RES_O_FIRMWARE_VERSION: {
        result = atiny_cmd_ioctl(ATINY_GET_FIRMWARE_VER, str, MAX_STRING_LEN);
        if (result == ATINY_OK) {
            lwm2m_data_encode_string(str, dataP);
            return COAP_205_CONTENT;
        } else {
            return COAP_400_BAD_REQUEST;
        }
    }
    case RES_M_REBOOT: {
        return COAP_405_METHOD_NOT_ALLOWED;
    }
    case RES_O_FACTORY_RESET: {
        return COAP_405_METHOD_NOT_ALLOWED;
    }
    case RES_O_AVL_POWER_SOURCES: {
        subTlvP = lwm2m_data_new(1);
        if (subTlvP == NULL) {
            return COAP_500_INTERNAL_SERVER_ERROR;
        }
        subTlvP[0].id = 0;
        result = atiny_cmd_ioctl(ATINY_GET_POWER_SOURCE, (char *)&power, sizeof(int));
        if (result == ATINY_OK) {
            lwm2m_data_encode_int(power, subTlvP);
            lwm2m_data_encode_instances(subTlvP, 1, dataP);
            return COAP_205_CONTENT;
        } else {
            lwm2m_free(subTlvP);
            return COAP_400_BAD_REQUEST;
        }
    }
    case RES_O_POWER_SOURCE_VOLTAGE: {
        subTlvP = lwm2m_data_new(1);
        if (subTlvP == NULL) {
            return COAP_500_INTERNAL_SERVER_ERROR;
        }
        subTlvP[0].id = 0;
        result = atiny_cmd_ioctl(ATINY_GET_SOURCE_VOLTAGE, (char *)&voltage, sizeof(int));
        if (result == ATINY_OK) {
            lwm2m_data_encode_int(voltage, subTlvP);
            lwm2m_data_encode_instances(subTlvP, 1, dataP);
            return COAP_205_CONTENT;
        } else {
            lwm2m_free(subTlvP);
            return COAP_400_BAD_REQUEST;
        }
    }
    case RES_O_POWER_SOURCE_CURRENT: {
        subTlvP = lwm2m_data_new(1);
        if (subTlvP == NULL) {
            return COAP_500_INTERNAL_SERVER_ERROR;
        }
        subTlvP[0].id = 0;
        result = atiny_cmd_ioctl(ATINY_GET_POWER_CURRENT, (char *)&power, sizeof(int));
        if (result == ATINY_OK) {
            lwm2m_data_encode_int(power, &subTlvP[0]);
            lwm2m_data_encode_instances(subTlvP, 1, dataP);
            return COAP_205_CONTENT;
        } else {
            lwm2m_free(subTlvP);
            return COAP_400_BAD_REQUEST;
        }
    }
    case RES_O_BATTERY_LEVEL: {
        result = atiny_cmd_ioctl(ATINY_GET_BATERRY_LEVEL, (char *)&battery_level, sizeof(int));
        if (result == ATINY_OK) {
            lwm2m_data_encode_int(battery_level, dataP);
            return COAP_205_CONTENT;
        } else {
            return COAP_400_BAD_REQUEST;
        }
    }
    case RES_O_MEMORY_FREE: {
        result = atiny_cmd_ioctl(ATINY_GET_MEMORY_FREE, (char *)&free_memory, sizeof(int));
        if (result == ATINY_OK) {
            lwm2m_data_encode_int(free_memory, dataP);
            return COAP_205_CONTENT;
        } else {
            return COAP_400_BAD_REQUEST;
        }
    }
    case RES_M_ERROR_CODE: {
        subTlvP = lwm2m_data_new(1);
        if (subTlvP == NULL) {
            return COAP_500_INTERNAL_SERVER_ERROR;
        }
        subTlvP[0].id = 0;
        result = atiny_cmd_ioctl(ATINY_GET_DEV_ERR, (char *)&err, sizeof(int));
        if (result == ATINY_OK) {
            lwm2m_data_encode_int(err, subTlvP);
            lwm2m_data_encode_instances(subTlvP, 1, dataP);
            return COAP_205_CONTENT;
        } else {
            lwm2m_free(subTlvP);
            return COAP_400_BAD_REQUEST;
        }
    }
    case RES_O_RESET_ERROR_CODE: {
        return COAP_405_METHOD_NOT_ALLOWED;
    }
    case RES_O_CURRENT_TIME: {
        result = atiny_cmd_ioctl(ATINY_GET_CURRENT_TIME, (char *)&current_time, sizeof(int64_t));
        if (result == ATINY_OK) {
            lwm2m_data_encode_int(current_time, dataP);
            return COAP_205_CONTENT;
        } else {
            return COAP_400_BAD_REQUEST;
        }
    }
    case RES_O_UTC_OFFSET: {
        result = atiny_cmd_ioctl(ATINY_GET_UTC_OFFSET, UTC_offset, PRV_OFFSET_MAXLEN);
        if (result == ATINY_OK) {
            lwm2m_data_encode_string(UTC_offset, dataP);
            return COAP_205_CONTENT;
        } else {
            return COAP_400_BAD_REQUEST;
        }
    }
    case RES_O_TIMEZONE: {
        result = atiny_cmd_ioctl(ATINY_GET_TIMEZONE, timezone, PRV_TIMEZONE_MAXLEN);
        if (result == ATINY_OK) {
            lwm2m_data_encode_string(timezone, dataP);
            return COAP_205_CONTENT;
        } else {
            return COAP_400_BAD_REQUEST;
        }
    }
    case RES_M_BINDING_MODES: {
        result = atiny_cmd_ioctl(ATINY_GET_BINDING_MODES, str, MAX_STRING_LEN);
        if (result == ATINY_OK) {
            lwm2m_data_encode_string(str, dataP);
            return COAP_205_CONTENT;
        } else {
            return COAP_400_BAD_REQUEST;
        }
    }
    default:
        return COAP_404_NOT_FOUND;
    }
}
