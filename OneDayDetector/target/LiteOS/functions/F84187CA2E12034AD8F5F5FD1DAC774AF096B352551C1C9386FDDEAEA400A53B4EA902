static uint8_t prv_write_resources(uint16_t instanceId, int numData, lwm2m_data_t *tlvArray,
                                   lwm2m_object_t *objectP, bool doCreate)
{
    int i;
    uint8_t result = COAP_NO_ERROR;
    int64_t value;
    lwm2m_data_t *subTlvArray = NULL;
    int ri;

    acc_ctrl_oi_t *accCtrlOiP = (acc_ctrl_oi_t *)
                                lwm2m_list_find(objectP->instanceList, instanceId);
    if (accCtrlOiP == NULL) {
        return COAP_404_NOT_FOUND ;
    }

    i = 0;
    do {
        switch (tlvArray[i].id) {
        case RES_M_OBJECT_ID: {
            if (doCreate == false) {
                result = COAP_405_METHOD_NOT_ALLOWED;
            } else {
                if (lwm2m_data_decode_int(&tlvArray[i], &value) != 1) {
                    result = COAP_400_BAD_REQUEST;
                } else if ((value < 1) || (value > 65534)) {
                    result = COAP_406_NOT_ACCEPTABLE;
                } else {
                    accCtrlOiP->objectId = value;
                    result = COAP_204_CHANGED;
                }
            }
            break;
        }
        case RES_M_OBJECT_INSTANCE_ID: {
            if (doCreate == false) {
                result = COAP_405_METHOD_NOT_ALLOWED;
            } else {
                if (lwm2m_data_decode_int(&tlvArray[i], &value) != 1) {
                    result = COAP_400_BAD_REQUEST;
                } else if ((value < 0) || (value > MAX_DATA_VAL)) {
                    result = COAP_406_NOT_ACCEPTABLE;
                } else {
                    accCtrlOiP->objectInstId = value;
                    result = COAP_204_CHANGED;
                }
            }
            break;
        }
        case RES_O_ACL: {
            if (tlvArray[i].type != LWM2M_TYPE_MULTIPLE_RESOURCE) {
                result = COAP_400_BAD_REQUEST;
            } else {
                // MR-Write: Replace-implementation variant only
                // see LWM2M-TS:5.4.3 (wakaama has no part-update switch)
                // 1st: save accValueList!
                acc_ctrl_ri_t *acValListSave = accCtrlOiP->accCtrlValList;
                accCtrlOiP->accCtrlValList = NULL;
                subTlvArray = tlvArray[i].value.asChildren.array;
                if (tlvArray[i].value.asChildren.count == 0) {
                    result = COAP_204_CHANGED;
                } else if (subTlvArray == NULL) {
                    result = COAP_400_BAD_REQUEST;
                } else {
                    for (ri = 0; ri < tlvArray[i].value.asChildren.count; ri++) {
                        if (1 != lwm2m_data_decode_int(&subTlvArray[ri], &value)) {
                            result = COAP_400_BAD_REQUEST;
                            break;
                        } else if ((value < 0) || (value > 0xFFFF)) {
                            result = COAP_406_NOT_ACCEPTABLE;
                            break;
                        } else if (!prv_add_ac_val(accCtrlOiP, subTlvArray[ri].id,
                                    (uint16_t)value)) {
                            result = COAP_500_INTERNAL_SERVER_ERROR;
                            break;
                        } else {
                            result = COAP_204_CHANGED;
                        }
                    }
                }
                if (result != COAP_204_CHANGED) {
                    // free pot. partial created new ones
                    LWM2M_LIST_FREE(accCtrlOiP->accCtrlValList);
                    // restore old values:
                    accCtrlOiP->accCtrlValList = acValListSave;
                } else {
                    // final free saved value list
                    LWM2M_LIST_FREE(acValListSave);
                }
            }
            break;
        }
        case RES_M_ACCESS_CONTROL_OWNER: {
            if (lwm2m_data_decode_int(tlvArray + i, &value) == 1) {
                if ((value >= 0) && (value <= MAX_DATA_VAL)) {
                accCtrlOiP->accCtrlOwner = value;
                result = COAP_204_CHANGED;
                } else {
                    result = COAP_406_NOT_ACCEPTABLE;
                }
            } else {
                result = COAP_400_BAD_REQUEST;
            }
            break;
        }
        default:
            return COAP_404_NOT_FOUND ;
        }
        i++;
    }
    while ((i < numData) && (result == COAP_204_CHANGED));
    return result;
}
