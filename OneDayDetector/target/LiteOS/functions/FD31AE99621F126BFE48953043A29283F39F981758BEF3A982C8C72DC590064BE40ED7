void dtls_server_task(void)
{
    int ret;
    mbedtls_ssl_context *ssl = NULL;
    dtls_establish_info_s establish_info;

    mbedtls_net_context *bind_ctx = atiny_malloc(sizeof(mbedtls_net_context));
    mbedtls_net_context *cli_ctx = atiny_malloc(sizeof(mbedtls_net_context));
    if ((bind_ctx == NULL) || (cli_ctx == NULL)) {
        LOG("malloc failed!");
        return;
    }

    establish_info.psk_or_cert = VERIFY_WITH_PSK;
    establish_info.udp_or_tcp = MBEDTLS_NET_PROTO_UDP;
    establish_info.v.p.psk = (unsigned char *)SERVER_PSK;
    establish_info.v.p.psk_len = strlen(SERVER_PSK);
    establish_info.v.p.psk_identity = (unsigned char *)SERVER_IDENTITY;

    bind_ctx = (mbedtls_net_context *)atiny_net_bind(NULL, SERVER_PORT, 1);
    if (bind_ctx == NULL) {
        LOG("bind failed!");
        return;
    }

    ssl = dtls_ssl_new(&establish_info, MBEDTLS_SSL_IS_SERVER);
    if (bind_ctx == NULL) {
        LOG("dtls_ssl_new failed!");
        return;
    }

    do {
        unsigned char buf[64] = {0};
        ret = dtls_accept(bind_ctx, cli_ctx, NULL, 0, 0);
        LOG("dtls_accept return ret = %d, bindfd = %d, cli_fd = %d", ret, bind_ctx->fd, cli_ctx->fd);
        mbedtls_ssl_set_bio(ssl, cli_ctx, mbedtls_net_send, mbedtls_net_recv, mbedtls_net_recv_timeout);

        // new psk and handshake should been done for each client, now only for frist connection.
        do {
            ret = mbedtls_ssl_handshake(ssl);
        }
        while ((ret == MBEDTLS_ERR_SSL_WANT_READ || ret == MBEDTLS_ERR_SSL_WANT_WRITE));
        if (ret != 0) {
            LOG("mbedtls_ssl_handshake failed return 0x%x\n", -ret);
            break;
        }

        do {
            ret = dtls_read(ssl, buf, sizeof(buf), 5000);
        } while (ret < 0);
        LOG("Read from client: %d bytes read\n%s\n", ret, buf);

        unsigned char hello[] = "Hi Client\r\n";
        ret = dtls_write(ssl, hello, sizeof(hello));
        if (ret < 0) {
            LOG("dtls_write failed returned %d\n", ret);
            break;
        }
        LOG("Write to client: %d bytes written\n%s\n", ret, hello);
        LOS_TaskDelay(2000);
    } while (0);

    if (ssl != NULL) {
        dtls_ssl_destroy(ssl);
    }
    mbedtls_net_free(bind_ctx);
}
