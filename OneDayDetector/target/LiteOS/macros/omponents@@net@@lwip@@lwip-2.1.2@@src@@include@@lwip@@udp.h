#define          udp_clear_flags(pcb, clr_flags)   do { (pcb)->flags = (u8_t)((pcb)->flags & (u8_t)(~(clr_flags) & 0xff)); } while(0)
#define udp_debug_print(udphdr)
#define          udp_flags(pcb) ((pcb)->flags)
#define udp_get_multicast_netif_addr(pcb)          (&(pcb)->mcast_ip4)
#define udp_get_multicast_netif_index(pcb)         ((pcb)->mcast_ifindex)
#define udp_get_multicast_ttl(pcb)                 ((pcb)->mcast_ttl)
#define          udp_is_flag_set(pcb, flag)        (((pcb)->flags & (flag)) != 0)
#define udp_new_ip6() udp_new_ip_type(IPADDR_TYPE_V6)
#define          udp_set_flags(pcb, set_flags)     do { (pcb)->flags = (u8_t)((pcb)->flags |  (set_flags)); } while(0)
#define udp_set_multicast_netif_addr(pcb, ip4addr) ip4_addr_copy((pcb)->mcast_ip4, *(ip4addr))
#define udp_set_multicast_netif_index(pcb, idx)    ((pcb)->mcast_ifindex = (idx))
#define udp_set_multicast_ttl(pcb, value)          ((pcb)->mcast_ttl = (value))
#define          udp_setflags(pcb, f)  ((pcb)->flags = (f))
