  netif_addr_idx_t addr_hint;
    s8_t addr_index;
    s8_t addr_index;
    const ip_addr_t* address;
  netif_ext_callback_fn callback_fn;
  u16_t chksum_flags;
  void* client_data[LWIP_NETIF_CLIENT_DATA_INDEX_MAX + LWIP_NUM_NETIF_CLIENT_DATA];
  u8_t flags;
  ip_addr_t gw;
  struct netif_hint *hints;
  const char*  hostname;
  u8_t hwaddr[NETIF_MAX_HWADDR_LEN];
  u8_t hwaddr_len;
  netif_igmp_mac_filter_fn igmp_mac_filter;
  netif_input_fn input;
  ip_addr_t ip6_addr[LWIP_IPV6_NUM_ADDRESSES];
  u32_t ip6_addr_pref_life[LWIP_IPV6_NUM_ADDRESSES];
  u8_t ip6_addr_state[LWIP_IPV6_NUM_ADDRESSES];
  u32_t ip6_addr_valid_life[LWIP_IPV6_NUM_ADDRESSES];
  u8_t ip6_autoconfig_enabled;
  ip_addr_t ip_addr;
  } ipv4_changed;
  } ipv6_addr_state_changed;
  } ipv6_set;
  netif_status_callback_fn link_callback;
  } link_changed;
  u32_t link_speed;
  u8_t link_type;
  netif_linkoutput_fn linkoutput;
  u16_t loop_cnt_current;
  struct pbuf *loop_first;
  struct pbuf *loop_last;
  struct stats_mib2_netif_ctrs mib2_counters;
  netif_mld_mac_filter_fn mld_mac_filter;
  u16_t mtu;
  u16_t mtu6;
  char name[2];
  ip_addr_t netmask;
  struct netif *next;
  struct netif_ext_callback* next;
  u8_t num;
    const ip_addr_t* old_address;
    const ip_addr_t* old_address;
    const ip_addr_t* old_gw;
    const ip_addr_t* old_netmask;
    u8_t old_state;
  netif_output_fn output;
  netif_output_ip6_fn output_ip6;
  netif_status_callback_fn remove_callback;
  u8_t rs_count;
    u8_t state;
    u8_t state;
  void *state;
  netif_status_callback_fn status_callback;
  } status_changed;
  u32_t ts;
