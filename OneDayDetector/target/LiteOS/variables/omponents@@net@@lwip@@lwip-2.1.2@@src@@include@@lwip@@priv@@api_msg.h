    } ad;
    } add;
      u8_t apiflags;
    struct netbuf *b;
      u8_t backlog;
    } bc;
  struct tcpip_api_call_data call;
    } common;
  struct netconn *conn;
  u8_t dns_addrtype;
  err_t err;
      netifapi_errt_fn errtfunc;
      u8_t if_idx;
      u8_t if_idx;
    } ifs;
      u8_t index;
      netif_init_fn init;
      netif_input_fn input;
    } jl;
      enum netconn_igmp join_or_leave;
    } lb;
      size_t len;
      size_t len;
      u8_t local;
  } msg;
  } msg;
    } n;
      char name[NETIF_NAMESIZE];
  char name[DNS_MAX_NAME_LENGTH];
  struct netif *netif;
      size_t offset;
  sys_sem_t* op_completed_sem;
      u8_t polls_left;
      u16_t port;
      u8_t proto;
    } r;
    } sd;
      u8_t shut;
      void *state;
      u32_t time_started;
      u32_t time_started;
      const struct netvector *vector;
      u16_t vector_cnt;
      size_t vector_off;
      netifapi_void_fn voidfunc;
    } w;
