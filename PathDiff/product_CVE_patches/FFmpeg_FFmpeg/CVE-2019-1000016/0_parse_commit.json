{
    "current_hash": "b97a4b658814b2de8b9f2a3bce491c002d34de31",
    "parent_hash": "dfd656632e8980574dcae5c13a22c0872bc0ac75",
    "modified_file_0": {
        "mod_filename": "libavcodec/cbs_av1.c",
        "status": "modified",
        "add_lines": 40,
        "dele_lines": 18,
        "patch": "@@ -29,45 +29,67 @@ static int cbs_av1_read_uvlc(CodedBitstreamContext *ctx, GetBitContext *gbc,\n                              const char *name, uint32_t *write_to,\n                              uint32_t range_min, uint32_t range_max)\n {\n-    uint32_t value;\n-    int position, zeroes, i, j;\n-    char bits[65];\n+    uint32_t zeroes, bits_value, value;\n+    int position;\n \n     if (ctx->trace_enable)\n         position = get_bits_count(gbc);\n \n-    zeroes = i = 0;\n+    zeroes = 0;\n     while (1) {\n-        if (get_bits_left(gbc) < zeroes + 1) {\n+        if (get_bits_left(gbc) < 1) {\n             av_log(ctx->log_ctx, AV_LOG_ERROR, \"Invalid uvlc code at \"\n                    \"%s: bitstream ended.\\n\", name);\n             return AVERROR_INVALIDDATA;\n         }\n \n-        if (get_bits1(gbc)) {\n-            bits[i++] = '1';\n+        if (get_bits1(gbc))\n             break;\n-        } else {\n-            bits[i++] = '0';\n-            ++zeroes;\n-        }\n+        ++zeroes;\n     }\n \n     if (zeroes >= 32) {\n         value = MAX_UINT_BITS(32);\n     } else {\n-        value = get_bits_long(gbc, zeroes);\n-\n-        for (j = 0; j < zeroes; j++)\n-            bits[i++] = (value >> (zeroes - j - 1) & 1) ? '1' : '0';\n+        if (get_bits_left(gbc) < zeroes) {\n+            av_log(ctx->log_ctx, AV_LOG_ERROR, \"Invalid uvlc code at \"\n+                   \"%s: bitstream ended.\\n\", name);\n+            return AVERROR_INVALIDDATA;\n+        }\n \n-        value += (1 << zeroes) - 1;\n+        bits_value = get_bits_long(gbc, zeroes);\n+        value = bits_value + (UINT32_C(1) << zeroes) - 1;\n     }\n \n     if (ctx->trace_enable) {\n+        char bits[65];\n+        int i, j, k;\n+\n+        if (zeroes >= 32) {\n+            while (zeroes > 32) {\n+                k = FFMIN(zeroes - 32, 32);\n+                for (i = 0; i < k; i++)\n+                    bits[i] = '0';\n+                bits[i] = 0;\n+                ff_cbs_trace_syntax_element(ctx, position, name,\n+                                            NULL, bits, 0);\n+                zeroes -= k;\n+                position += k;\n+            }\n+        }\n+\n+        for (i = 0; i < zeroes; i++)\n+            bits[i] = '0';\n+        bits[i++] = '1';\n+\n+        if (zeroes < 32) {\n+            for (j = 0; j < zeroes; j++)\n+                bits[i++] = (bits_value >> (zeroes - j - 1) & 1) ? '1' : '0';\n+        }\n+\n         bits[i] = 0;\n-        ff_cbs_trace_syntax_element(ctx, position, name, NULL,\n-                                    bits, value);\n+        ff_cbs_trace_syntax_element(ctx, position, name,\n+                                    NULL, bits, value);\n     }\n \n     if (value < range_min || value > range_max) {"
    }
}