{
    "current_hash": "bf814387f42e9b0dea9d75c03db4723c88e7d962",
    "parent_hash": "5ddab49d48343385eadb3a435a5491c476b66ecc",
    "modified_file_0": {
        "mod_filename": "libavcodec/jpegxl_parser.c",
        "status": "modified",
        "add_lines": 17,
        "dele_lines": 13,
        "patch": "@@ -683,7 +683,7 @@ static int read_vlc_prefix(GetBitContext *gb, JXLEntropyDecoder *dec, JXLSymbolD\n     int repeat_count_prev = 0, repeat_count_zero = 0, prev = 8;\n     int total_code = 0, len, hskip, num_codes = 0, ret;\n \n-    VLC level1_vlc;\n+    VLC level1_vlc = { 0 };\n \n     if (dist->alphabet_size == 1) {\n         dist->vlc.bits = 0;\n@@ -709,8 +709,10 @@ static int read_vlc_prefix(GetBitContext *gb, JXLEntropyDecoder *dec, JXLSymbolD\n         }\n     }\n \n-    if (total_code != 32 && num_codes >= 2 || num_codes < 1)\n-        return AVERROR_INVALIDDATA;\n+    if (total_code != 32 && num_codes >= 2 || num_codes < 1) {\n+        ret = AVERROR_INVALIDDATA;\n+        goto end;\n+    }\n \n     for (int i = 1; i < 19; i++)\n          level1_codecounts[i] += level1_codecounts[i - 1];\n@@ -726,29 +728,30 @@ static int read_vlc_prefix(GetBitContext *gb, JXLEntropyDecoder *dec, JXLSymbolD\n     if (ret < 0)\n         goto end;\n \n-    buf = av_mallocz(dist->alphabet_size * (2 * sizeof(int8_t) + sizeof(int16_t) + sizeof(uint32_t))\n+    buf = av_mallocz(MAX_PREFIX_ALPHABET_SIZE * (2 * sizeof(int8_t) + sizeof(int16_t) + sizeof(uint32_t))\n                      + sizeof(uint32_t));\n     if (!buf) {\n         ret = AVERROR(ENOMEM);\n         goto end;\n     }\n \n     level2_lens = (int8_t *)buf;\n-    level2_lens_s = (int8_t *)(buf + dist->alphabet_size * sizeof(int8_t));\n-    level2_syms = (int16_t *)(buf + dist->alphabet_size * (2 * sizeof(int8_t)));\n-    level2_codecounts = (uint32_t *)(buf + dist->alphabet_size * (2 * sizeof(int8_t) + sizeof(int16_t)));\n+    level2_lens_s = (int8_t *)(buf + MAX_PREFIX_ALPHABET_SIZE * sizeof(int8_t));\n+    level2_syms = (int16_t *)(buf + MAX_PREFIX_ALPHABET_SIZE * (2 * sizeof(int8_t)));\n+    level2_codecounts = (uint32_t *)(buf + MAX_PREFIX_ALPHABET_SIZE * (2 * sizeof(int8_t) + sizeof(int16_t)));\n \n     total_code = 0;\n     for (int i = 0; i < dist->alphabet_size; i++) {\n         len = get_vlc2(gb, level1_vlc.table, 5, 1);\n+        if (get_bits_left(gb) < 0) {\n+            ret = AVERROR_BUFFER_TOO_SMALL;\n+            goto end;\n+        }\n         if (len == 16) {\n             int extra = 3 + get_bits(gb, 2);\n             if (repeat_count_prev)\n-                extra = 4 * (repeat_count_prev - 2) - repeat_count_prev + extra;\n-            if (i + extra > dist->alphabet_size) {\n-                ret = AVERROR_INVALIDDATA;\n-                goto end;\n-            }\n+                extra += 4 * (repeat_count_prev - 2) - repeat_count_prev;\n+            extra = FFMIN(extra, dist->alphabet_size - i);\n             for (int j = 0; j < extra; j++)\n                 level2_lens[i + j] = prev;\n             total_code += (32768 >> prev) * extra;\n@@ -759,7 +762,8 @@ static int read_vlc_prefix(GetBitContext *gb, JXLEntropyDecoder *dec, JXLSymbolD\n         } else if (len == 17) {\n             int extra = 3 + get_bits(gb, 3);\n             if (repeat_count_zero > 0)\n-                extra = 8 * (repeat_count_zero - 2) - repeat_count_zero + extra;\n+                extra += 8 * (repeat_count_zero - 2) - repeat_count_zero;\n+            extra = FFMIN(extra, dist->alphabet_size - i);\n             i += extra - 1;\n             repeat_count_prev = 0;\n             repeat_count_zero += extra;"
    }
}