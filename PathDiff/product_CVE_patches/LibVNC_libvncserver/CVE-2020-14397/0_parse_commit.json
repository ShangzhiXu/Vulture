{
    "current_hash": "38e98ee61d74f5f5ab4aa4c77146faad1962d6d0",
    "parent_hash": "74e8a70f2c9a5248d6718ce443e07c7ed314dfff",
    "modified_file_0": {
        "mod_filename": "libvncserver/rfbregion.c",
        "status": "modified",
        "add_lines": 16,
        "dele_lines": 10,
        "patch": "@@ -51,24 +51,30 @@ sraSpanDup(const sraSpan *src) {\n \n static void\n sraSpanInsertAfter(sraSpan *newspan, sraSpan *after) {\n-  newspan->_next = after->_next;\n-  newspan->_prev = after;\n-  after->_next->_prev = newspan;\n-  after->_next = newspan;\n+  if(newspan && after) {\n+    newspan->_next = after->_next;\n+    newspan->_prev = after;\n+    after->_next->_prev = newspan;\n+    after->_next = newspan;\n+  }\n }\n \n static void\n sraSpanInsertBefore(sraSpan *newspan, sraSpan *before) {\n-  newspan->_next = before;\n-  newspan->_prev = before->_prev;\n-  before->_prev->_next = newspan;\n-  before->_prev = newspan;\n+  if(newspan && before) {\n+    newspan->_next = before;\n+    newspan->_prev = before->_prev;\n+    before->_prev->_next = newspan;\n+    before->_prev = newspan;\n+  }\n }\n \n static void\n sraSpanRemove(sraSpan *span) {\n-  span->_prev->_next = span->_next;\n-  span->_next->_prev = span->_prev;\n+  if(span) {\n+    span->_prev->_next = span->_next;\n+    span->_next->_prev = span->_prev;\n+  }\n }\n \n static void"
    },
    "modified_file_1": {
        "mod_filename": "libvncserver/rfbserver.c",
        "status": "modified",
        "add_lines": 3,
        "dele_lines": 1,
        "patch": "@@ -207,6 +207,8 @@ rfbClientIteratorHead(rfbClientIteratorPtr i)\n rfbClientPtr\n rfbClientIteratorNext(rfbClientIteratorPtr i)\n {\n+  if (!i)\n+    return NULL;\n   if(i->next == 0) {\n     LOCK(rfbClientListMutex);\n     i->next = i->screen->clientHead;\n@@ -231,7 +233,7 @@ rfbClientIteratorNext(rfbClientIteratorPtr i)\n void\n rfbReleaseClientIterator(rfbClientIteratorPtr iterator)\n {\n-  if(iterator->next) rfbDecrClientRef(iterator->next);\n+  if(iterator && iterator->next) rfbDecrClientRef(iterator->next);\n   free(iterator);\n }\n "
    }
}