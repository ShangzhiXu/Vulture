{
    "current_hash": "8f274035756c04efeb77eb654e9d4c4447287d65",
    "parent_hash": "a4809b89909c912998fee9bcfedc43aae5bbe505",
    "modified_file_0": {
        "mod_filename": "backend/beh.c",
        "status": "modified",
        "add_lines": 84,
        "dele_lines": 25,
        "patch": "@@ -26,13 +26,14 @@\n #include <signal.h>\n #include <string.h>\n #include <errno.h>\n+#include <sys/wait.h>\n \n \n //\n // Local globals...\n //\n \n-static int\t\tjob_canceled = 0; // Set to 1 on SIGTERM\n+static volatile int\tjob_canceled = 0; // Set to 1 on SIGTERM\n \n \n //\n@@ -237,21 +238,44 @@ call_backend(char *uri,                 // I - URI of final destination\n \t     char *filename)            // I - File name of input data\n {\n   const char\t*cups_serverbin;\t// Location of programs\n+  char          *backend_argv[8];       // Arguments for called CUPS backend\n   char\t\tscheme[1024],           // Scheme from URI\n                 *ptr,\t\t\t// Pointer into scheme\n-\t\tcmdline[65536];\t\t// Backend command line\n-  int           retval;\n+\t\tbackend_path[2048];\t// Backend path\n+  int           pid,\n+                wait_pid,\n+                wait_status,\n+                retval = 0;\n+  int           bytes;\n+\n \n   //\n   // Build the backend command line...\n   //\n \n-  strncpy(scheme, uri, sizeof(scheme) - 1);\n-  if (strlen(uri) > 1023)\n-    scheme[1023] = '\\0';\n+  scheme[0] = '\\0';\n+  strncat(scheme, uri, sizeof(scheme) - 1);\n   if ((ptr = strchr(scheme, ':')) != NULL)\n     *ptr = '\\0';\n-\n+  else\n+  {\n+    fprintf(stderr,\n+\t    \"ERROR: beh: Invalid URI, no colon (':') to mark end of scheme part.\\n\");\n+    exit (CUPS_BACKEND_FAILED);\n+  }\n+  if (strchr(scheme, '/'))\n+  {\n+    fprintf(stderr,\n+\t    \"ERROR: beh: Invalid URI, scheme contains a slash ('/').\\n\");\n+    exit (CUPS_BACKEND_FAILED);\n+  }\n+  if (!strcmp(scheme, \".\") || !strcmp(scheme, \"..\"))\n+  {\n+    fprintf(stderr,\n+\t    \"ERROR: beh: Invalid URI, scheme (\\\"%s\\\") is a directory.\\n\",\n+\t    scheme);\n+    exit (CUPS_BACKEND_FAILED);\n+  }\n   if ((cups_serverbin = getenv(\"CUPS_SERVERBIN\")) == NULL)\n     cups_serverbin = CUPS_SERVERBIN;\n \n@@ -261,16 +285,25 @@ call_backend(char *uri,                 // I - URI of final destination\n \t    \"ERROR: beh: Direct output into a file not supported.\\n\");\n     exit (CUPS_BACKEND_FAILED);\n   }\n-  else\n-    snprintf(cmdline, sizeof(cmdline),\n-\t     \"%s/backend/%s '%s' '%s' '%s' '%s' '%s' %s\",\n-\t     cups_serverbin, scheme, argv[1], argv[2], argv[3],\n-\t     // Apply number of copies only if beh was called with a\n-\t     // file name and not with the print data in stdin, as\n-\t     // backends should handle copies only if they are called\n-\t     // with a file name\n-\t     (argc == 6 ? \"1\" : argv[4]),\n-\t     argv[5], filename);\n+\n+  backend_argv[0] = uri;\n+  backend_argv[1] = argv[1];\n+  backend_argv[2] = argv[2];\n+  backend_argv[3] = argv[3];\n+  backend_argv[4] = (argc == 6 ? \"1\" : argv[4]);\n+  backend_argv[5] = argv[5];\n+  backend_argv[6] = filename;\n+  backend_argv[7] = NULL;\n+\n+  bytes = snprintf(backend_path, sizeof(backend_path),\n+\t\t   \"%s/backend/%s\", cups_serverbin, scheme);\n+  if (bytes < 0 || bytes >= sizeof(backend_path))\n+  {\n+    fprintf(stderr,\n+\t    \"ERROR: beh: Invalid scheme (\\\"%s\\\"), could not determing backend path.\\n\",\n+\t    scheme);\n+    exit (CUPS_BACKEND_FAILED);\n+  }\n \n   //\n   // Overwrite the device URI and run the actual backend...\n@@ -279,17 +312,41 @@ call_backend(char *uri,                 // I - URI of final destination\n   setenv(\"DEVICE_URI\", uri, 1);\n \n   fprintf(stderr,\n-\t  \"DEBUG: beh: Executing backend command line \\\"%s\\\"...\\n\",\n-\t  cmdline);\n+\t  \"DEBUG: beh: Executing backend command line \\\"%s '%s' '%s' '%s' '%s' '%s'%s%s\\\"...\\n\",\n+\t  backend_path, backend_argv[1], backend_argv[2], backend_argv[3],\n+\t  backend_argv[4], backend_argv[5],\n+\t  (backend_argv[6] && backend_argv[6][0] ? \" \" : \"\"),\n+\t  (backend_argv[6] && backend_argv[6][0] ? backend_argv[6] : \"\"));\n   fprintf(stderr,\n \t  \"DEBUG: beh: Using device URI: %s\\n\",\n \t  uri);\n \n-  retval = system(cmdline) >> 8;\n+  if ((pid = fork()) == 0)\n+  {\n+    retval = execv(backend_path, backend_argv);\n \n-  if (retval == -1)\n-    fprintf(stderr, \"ERROR: Unable to execute backend command line: %s\\n\",\n-\t    strerror(errno));\n+    if (retval == -1)\n+      fprintf(stderr, \"ERROR: Unable to execute backend: %s\\n\",\n+\t      strerror(errno));\n+    exit (CUPS_BACKEND_FAILED);\n+  }\n+  else if (pid < 0)\n+  {\n+    fprintf(stderr, \"ERROR: Unable to fork for backend\\n\");\n+    return (CUPS_BACKEND_FAILED);\n+  }\n+\n+  while ((wait_pid = wait(&wait_status)) < 0 && errno == EINTR);\n+\n+  if (wait_pid >= 0 && wait_status)\n+  {\n+    if (WIFEXITED(wait_status))\n+      retval = WEXITSTATUS(wait_status);\n+    else if (WTERMSIG(wait_status) != SIGTERM)\n+      retval = WTERMSIG(wait_status);\n+    else\n+      retval = 0;\n+  }\n \n   return (retval);\n }\n@@ -304,8 +361,10 @@ sigterm_handler(int sig)\t\t// I - Signal number (unused)\n {\n   (void)sig;\n \n-  fprintf(stderr,\n-\t  \"DEBUG: beh: Job canceled.\\n\");\n+  const char * const msg = \"DEBUG: beh: Job canceled.\\n\";\n+  // The if() is to eliminate the return value and silence the warning\n+  // about an unused return value.\n+  if (write(2, msg, strlen(msg)));\n \n   if (job_canceled)\n     _exit(CUPS_BACKEND_OK);"
    }
}