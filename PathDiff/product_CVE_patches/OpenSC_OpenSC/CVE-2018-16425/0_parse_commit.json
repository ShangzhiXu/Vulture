{
    "current_hash": "360e95d45ac4123255a4c796db96337f332160ad",
    "parent_hash": "8fe377e93b4b56060e5bbfb6f3142ceaeca744fa",
    "modified_file_0": {
        "mod_filename": "src/libopensc/card-cac.c",
        "status": "modified",
        "add_lines": 1,
        "dele_lines": 1,
        "patch": "@@ -794,7 +794,7 @@ static int cac_get_serial_nr_from_CUID(sc_card_t* card, sc_serial_number_t* seri\n         }\n \tif (priv->cac_id_len) {\n \t\tserial->len = MIN(priv->cac_id_len, SC_MAX_SERIALNR);\n-\t\tmemcpy(serial->value, priv->cac_id, priv->cac_id_len);\n+\t\tmemcpy(serial->value, priv->cac_id, serial->len);\n \t\tSC_FUNC_RETURN(card->ctx, SC_LOG_DEBUG_NORMAL, SC_SUCCESS);\n \t}\n \tSC_FUNC_RETURN(card->ctx, SC_LOG_DEBUG_NORMAL, SC_ERROR_FILE_NOT_FOUND);"
    },
    "modified_file_1": {
        "mod_filename": "src/libopensc/card-epass2003.c",
        "status": "modified",
        "add_lines": 2,
        "dele_lines": 1,
        "patch": "@@ -951,7 +951,7 @@ decrypt_response(struct sc_card *card, unsigned char *in, size_t inlen, unsigned\n \twhile (0x80 != plaintext[cipher_len - 2] && (cipher_len - 2 > 0))\n \t\tcipher_len--;\n \n-\tif (2 == cipher_len)\n+\tif (2 == cipher_len || *out_len < cipher_len - 2)\n \t\treturn -1;\n \n \tmemcpy(out, plaintext, cipher_len - 2);\n@@ -977,6 +977,7 @@ epass2003_sm_unwrap_apdu(struct sc_card *card, struct sc_apdu *sm, struct sc_apd\n \tr = sc_check_sw(card, sm->sw1, sm->sw2);\n \tif (r == SC_SUCCESS) {\n \t\tif (exdata->sm) {\n+\t\t\tlen = plain->resplen;\n \t\t\tif (0 != decrypt_response(card, sm->resp, sm->resplen, plain->resp, &len))\n \t\t\t\treturn SC_ERROR_CARD_CMD_FAILED;\n \t\t}"
    },
    "modified_file_2": {
        "mod_filename": "src/libopensc/card-muscle.c",
        "status": "modified",
        "add_lines": 5,
        "dele_lines": 2,
        "patch": "@@ -518,7 +518,9 @@ static int muscle_list_files(sc_card_t *card, u8 *buf, size_t bufLen)\n \tmscfs_check_cache(priv->fs);\n \n \tfor(x = 0; x < fs->cache.size; x++) {\n-\t\tu8* oid= fs->cache.array[x].objectId.id;\n+\t\tu8* oid = fs->cache.array[x].objectId.id;\n+\t\tif (bufLen < 2)\n+\t\t\tbreak;\n \t\tsc_debug(card->ctx, SC_LOG_DEBUG_NORMAL,\n \t\t\t\"FILE: %02X%02X%02X%02X\\n\",\n \t\t\toid[0],oid[1],oid[2],oid[3]);\n@@ -527,7 +529,8 @@ static int muscle_list_files(sc_card_t *card, u8 *buf, size_t bufLen)\n \t\t\tbuf[1] = oid[3];\n \t\t\tif(buf[0] == 0x00 && buf[1] == 0x00) continue; /* No directories/null names outside of root */\n \t\t\tbuf += 2;\n-\t\t\tcount+=2;\n+\t\t\tcount += 2;\n+\t\t\tbufLen -= 2;\n \t\t}\n \t}\n \treturn count;"
    },
    "modified_file_3": {
        "mod_filename": "src/libopensc/card-tcos.c",
        "status": "modified",
        "add_lines": 3,
        "dele_lines": 3,
        "patch": "@@ -408,7 +408,7 @@ static int tcos_select_file(sc_card_t *card,\n \tfile->path = *in_path;\n \n \tfor(i=2; i+1<apdu.resplen && i+1+apdu.resp[i+1]<apdu.resplen; i+=2+apdu.resp[i+1]){\n-\t\tint j, len=apdu.resp[i+1];\n+\t\tsize_t j, len=apdu.resp[i+1];\n \t\tunsigned char type=apdu.resp[i], *d=apdu.resp+i+2;\n \n \t\tswitch (type) {\n@@ -432,8 +432,8 @@ static int tcos_select_file(sc_card_t *card,\n \t\t\tfile->id = (d[0]<<8) | d[1];\n \t\t\tbreak;\n \t\tcase 0x84:\n-\t\t\tmemcpy(file->name, d, len);\n-\t\t\tfile->namelen = len;\n+\t\t\tfile->namelen = MIN(sizeof file->name, len);\n+\t\t\tmemcpy(file->name, d, file->namelen);\n \t\t\tbreak;\n \t\tcase 0x86:\n \t\t\tsc_file_set_sec_attr(file, d, len); "
    },
    "modified_file_4": {
        "mod_filename": "src/libopensc/pkcs15-esteid.c",
        "status": "modified",
        "add_lines": 1,
        "dele_lines": 1,
        "patch": "@@ -79,7 +79,7 @@ sc_pkcs15emu_esteid_init (sc_pkcs15_card_t * p15card)\n \t/* read the serial (document number) */\n \tr = sc_read_record (card, SC_ESTEID_PD_DOCUMENT_NR, buff, sizeof(buff), SC_RECORD_BY_REC_NR);\n \tSC_TEST_RET(card->ctx, SC_LOG_DEBUG_NORMAL, r, \"read document number failed\");\n-\tbuff[r] = '\\0';\n+\tbuff[MIN((size_t) r, (sizeof buff)-1)] = '\\0';\n \tset_string (&p15card->tokeninfo->serial_number, (const char *) buff);\n \n \tp15card->tokeninfo->flags = SC_PKCS15_TOKEN_PRN_GENERATION"
    },
    "modified_file_5": {
        "mod_filename": "src/libopensc/pkcs15-gemsafeV1.c",
        "status": "modified",
        "add_lines": 1,
        "dele_lines": 1,
        "patch": "@@ -208,7 +208,7 @@ static int gemsafe_get_cert_len(sc_card_t *card)\n \t * the private key.\n \t */\n \tind = 2; /* skip length */\n-\twhile (ibuf[ind] == 0x01) {\n+\twhile (ibuf[ind] == 0x01 && i < gemsafe_cert_max) {\n \t\tif (ibuf[ind+1] == 0xFE) {\n \t\t\tgemsafe_prkeys[i].ref = ibuf[ind+4];\n \t\t\tsc_log(card->ctx, \"Key container %d is allocated and uses key_ref %d\","
    },
    "modified_file_6": {
        "mod_filename": "src/libopensc/pkcs15-sc-hsm.c",
        "status": "modified",
        "add_lines": 8,
        "dele_lines": 6,
        "patch": "@@ -837,12 +837,14 @@ static int sc_pkcs15emu_sc_hsm_init (sc_pkcs15_card_t * p15card)\n \t\tr = read_file(p15card, (u8 *) \"\\x2F\\x02\", efbin, &len, 1);\n \t\tLOG_TEST_RET(card->ctx, r, \"Skipping optional EF.C_DevAut\");\n \n-\t\t/* save EF_C_DevAut for further use */\n-\t\tptr = realloc(priv->EF_C_DevAut, len);\n-\t\tif (ptr) {\n-\t\t\tmemcpy(ptr, efbin, len);\n-\t\t\tpriv->EF_C_DevAut = ptr;\n-\t\t\tpriv->EF_C_DevAut_len = len;\n+\t\tif (len > 0) {\n+\t\t\t/* save EF_C_DevAut for further use */\n+\t\t\tptr = realloc(priv->EF_C_DevAut, len);\n+\t\t\tif (ptr) {\n+\t\t\t\tmemcpy(ptr, efbin, len);\n+\t\t\t\tpriv->EF_C_DevAut = ptr;\n+\t\t\t\tpriv->EF_C_DevAut_len = len;\n+\t\t\t}\n \t\t}\n \n \t\tptr = efbin;"
    },
    "modified_file_7": {
        "mod_filename": "src/libopensc/sc.c",
        "status": "modified",
        "add_lines": 1,
        "dele_lines": 1,
        "patch": "@@ -628,7 +628,7 @@ int sc_file_set_sec_attr(sc_file_t *file, const u8 *sec_attr,\n \t\treturn SC_ERROR_INVALID_ARGUMENTS;\n \t}\n \n-\tif (sec_attr == NULL) {\n+\tif (sec_attr == NULL || sec_attr_len) {\n \t\tif (file->sec_attr != NULL)\n \t\t\tfree(file->sec_attr);\n \t\tfile->sec_attr = NULL;"
    },
    "modified_file_8": {
        "mod_filename": "src/tools/cryptoflex-tool.c",
        "status": "modified",
        "add_lines": 3,
        "dele_lines": 2,
        "patch": "@@ -21,6 +21,7 @@\n #include \"config.h\"\n \n #include \"libopensc/sc-ossl-compat.h\"\n+#include \"libopensc/internal.h\"\n #include <openssl/bn.h>\n #include <openssl/rsa.h>\n #include <openssl/x509.h>\n@@ -331,7 +332,7 @@ static int read_public_key(RSA *rsa)\n \t\tfprintf(stderr, \"Unable to select public key file: %s\\n\", sc_strerror(r));\n \t\treturn 2;\n \t}\n-\tbufsize = file->size;\n+\tbufsize = MIN(file->size, sizeof buf);\n \tsc_file_free(file);\n \tr = sc_read_binary(card, 0, buf, bufsize, 0);\n \tif (r < 0) {\n@@ -382,7 +383,7 @@ static int read_private_key(RSA *rsa)\n \te = sc_file_get_acl_entry(file, SC_AC_OP_READ);\n \tif (e == NULL || e->method == SC_AC_NEVER)\n \t\treturn 10;\n-\tbufsize = file->size;\n+\tbufsize = MIN(file->size, sizeof buf);\n \tsc_file_free(file);\n \tr = sc_read_binary(card, 0, buf, bufsize, 0);\n \tif (r < 0) {"
    },
    "modified_file_9": {
        "mod_filename": "src/tools/egk-tool.c",
        "status": "modified",
        "add_lines": 1,
        "dele_lines": 1,
        "patch": "@@ -149,7 +149,7 @@ int read_file(struct sc_card *card, char *str_path, unsigned char **data, size_t\n \t\tgoto err;\n \t}\n \n-\tlen = file ? file->size : 4096;\n+\tlen = file && file->size > 0 ? file->size : 4096;\n \tp = realloc(*data, len);\n \tif (!p) {\n \t\tgoto err;"
    },
    "modified_file_10": {
        "mod_filename": "src/tools/util.c",
        "status": "modified",
        "add_lines": 3,
        "dele_lines": 2,
        "patch": "@@ -339,10 +339,11 @@ const char * util_acl_to_str(const sc_acl_entry_t *e)\n \t\t\tstrcpy(buf, \"????\");\n \t\t\tbreak;\n \t\t}\n-\t\tstrcat(line, buf);\n-\t\tstrcat(line, \" \");\n+\t\tstrncat(line, buf, sizeof line);\n+\t\tstrncat(line, \" \", sizeof line);\n \t\te = e->next;\n \t}\n+\tline[(sizeof line)-1] = '\\0'; /* make sure it's NUL terminated */\n \tline[strlen(line)-1] = 0; /* get rid of trailing space */\n \treturn line;\n }"
    }
}