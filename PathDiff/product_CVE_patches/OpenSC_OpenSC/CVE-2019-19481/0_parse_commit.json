{
    "current_hash": "b75c002cfb1fd61cd20ec938ff4937d7b1a94278",
    "parent_hash": "bfa8415ea3f5a0b055ef383863e2711b95b04ec8",
    "modified_file_0": {
        "mod_filename": "src/libopensc/card-cac1.c",
        "status": "modified",
        "add_lines": 8,
        "dele_lines": 6,
        "patch": "@@ -69,17 +69,16 @@ static int cac_cac1_get_certificate(sc_card_t *card, u8 **out_buf, size_t *out_l\n \tu8 *out_ptr;\n \tsize_t size = 0;\n \tsize_t left = 0;\n-\tsize_t len, next_len;\n+\tsize_t len;\n \tsc_apdu_t apdu;\n \tint r = SC_SUCCESS;\n \tSC_FUNC_CALLED(card->ctx, SC_LOG_DEBUG_VERBOSE);\n \t/* get the size */\n \tsize = left = *out_buf ? *out_len : sizeof(buf);\n \tout_ptr = *out_buf ? *out_buf : buf;\n \tsc_format_apdu(card, &apdu, SC_APDU_CASE_2_SHORT, CAC_INS_GET_CERTIFICATE, 0, 0 );\n-\tnext_len = MIN(left, 100);\n-\tfor (; left > 0; left -= len, out_ptr += len) {\n-\t\tlen = next_len;\n+\tlen = MIN(left, 100);\n+\tfor (; left > 0;) { /* Increments for readability in the end of the function */\n \t\tapdu.resp = out_ptr;\n \t\tapdu.le = len;\n \t\tapdu.resplen = left;\n@@ -98,7 +97,10 @@ static int cac_cac1_get_certificate(sc_card_t *card, u8 **out_buf, size_t *out_l\n \t\t\tleft -= len;\n \t\t\tbreak;\n \t\t}\n-\t\tnext_len = MIN(left, apdu.sw2);\n+\t\t/* Adjust the lengths */\n+\t\tleft -= len;\n+\t\tout_ptr += len;\n+\t\tlen = MIN(left, apdu.sw2);\n \t}\n \tif (r < 0) {\n \t\tSC_FUNC_RETURN(card->ctx, SC_LOG_DEBUG_VERBOSE, r);\n@@ -128,7 +130,7 @@ static int cac_read_binary(sc_card_t *card, unsigned int idx,\n \tint r = 0;\n \tu8 *val = NULL;\n \tu8 *cert_ptr;\n-\tsize_t val_len;\n+\tsize_t val_len = 0;\n \tsize_t len, cert_len;\n \tu8 cert_type;\n "
    }
}