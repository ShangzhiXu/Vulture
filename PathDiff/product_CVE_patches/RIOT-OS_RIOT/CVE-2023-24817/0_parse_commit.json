{
    "current_hash": "34dc1757f5621be48e226cfebb2f4c63505b5360",
    "parent_hash": "88d1d2eb6416fc149d9ce6f810158cc91ad1c473",
    "modified_file_0": {
        "mod_filename": "sys/net/gnrc/routing/rpl/srh/gnrc_rpl_srh.c",
        "status": "modified",
        "add_lines": 7,
        "dele_lines": 0,
        "patch": "@@ -74,6 +74,13 @@ int gnrc_rpl_srh_process(ipv6_hdr_t *ipv6, gnrc_rpl_srh_t *rh, void **err_ptr)\n     uint8_t current_pos, pref_elided, addr_len, compri_addr_len;\n     const uint8_t new_seg_left = rh->seg_left - 1;\n \n+    if ((rh->len * 8) < (GNRC_RPL_SRH_PADDING(rh->pad_resv) +\n+                         (16 - GNRC_RPL_SRH_COMPRE(rh->compr)))) {\n+        DEBUG(\"RPL SRH: inconsistent header received\\n\");\n+        *err_ptr = &rh->len;\n+        return GNRC_IPV6_EXT_RH_ERROR;\n+    }\n+\n     assert(rh->seg_left > 0);\n     num_addr = (((rh->len * 8) - GNRC_RPL_SRH_PADDING(rh->pad_resv) -\n                  (16 - GNRC_RPL_SRH_COMPRE(rh->compr))) /"
    },
    "modified_file_1": {
        "mod_filename": "tests/gnrc_rpl_srh/main.c",
        "status": "modified",
        "add_lines": 22,
        "dele_lines": 0,
        "patch": "@@ -120,6 +120,27 @@ static void test_rpl_srh_route_multicast(void)\n     TEST_ASSERT_NULL(err_ptr);\n }\n \n+static void test_rpl_srh_inconsistent_hdr(void)\n+{\n+    static const ipv6_addr_t dst = IPV6_DST;\n+    gnrc_rpl_srh_t srh;\n+    void *err_ptr;\n+    int res;\n+\n+    memset(&srh, 0, sizeof(srh));\n+    memcpy(&hdr.dst, &dst, sizeof(hdr.dst));\n+    srh.nh = 128U;\n+    srh.len = 0U;\n+    srh.type = 3U;\n+    srh.seg_left = 220U;\n+    srh.compr = 0xc0;\n+    srh.pad_resv = 0xf0;\n+\n+    res = gnrc_rpl_srh_process(&hdr, &srh, &err_ptr);\n+    TEST_ASSERT_EQUAL_INT(res, GNRC_IPV6_EXT_RH_ERROR);\n+    TEST_ASSERT((&srh.len) == err_ptr);\n+}\n+\n static void test_rpl_srh_too_many_seg_left(void)\n {\n     static const ipv6_addr_t a1 = IPV6_ADDR1;\n@@ -239,6 +260,7 @@ static void run_unittests(void)\n     EMB_UNIT_TESTFIXTURES(fixtures) {\n         new_TestFixture(test_rpl_srh_dst_multicast),\n         new_TestFixture(test_rpl_srh_route_multicast),\n+        new_TestFixture(test_rpl_srh_inconsistent_hdr),\n         new_TestFixture(test_rpl_srh_too_many_seg_left),\n         new_TestFixture(test_rpl_srh_nexthop_no_prefix_elided),\n         new_TestFixture(test_rpl_srh_nexthop_prefix_elided),"
    },
    "modified_file_2": {
        "mod_filename": "tests/gnrc_rpl_srh/tests-as-root/01-run.py",
        "status": "modified",
        "add_lines": 3,
        "dele_lines": 3,
        "patch": "@@ -167,7 +167,7 @@ def test_wrong_type(child, iface, hw_dst, ll_dst, ll_src):\n     pktbuf_empty(child)\n \n \n-def test_seg_left_gt_len_addresses(child, iface, hw_dst, ll_dst, ll_src):\n+def test_inconsistent_header(child, iface, hw_dst, ll_dst, ll_src):\n     # send routing header with no (0) addresses but segleft set to a value\n     # larger than 0\n     p = srp1(Ether(dst=hw_dst) / IPv6(dst=ll_dst, src=ll_src) /\n@@ -176,7 +176,7 @@ def test_seg_left_gt_len_addresses(child, iface, hw_dst, ll_dst, ll_src):\n     assert(p is not None)\n     assert(ICMPv6ParamProblem in p)\n     assert(p[ICMPv6ParamProblem].code == 0)     # erroneous header field encountered\n-    assert(p[ICMPv6ParamProblem].ptr == 43)     # segleft field\n+    assert(p[ICMPv6ParamProblem].ptr == 41)     # len field\n     pktbuf_empty(child)\n \n \n@@ -348,7 +348,7 @@ def run(func):\n                 raise e\n \n     run(test_wrong_type)\n-    run(test_seg_left_gt_len_addresses)\n+    run(test_inconsistent_header)\n     run(test_multicast_dst)\n     run(test_multicast_addr)\n     run(test_multiple_addrs_of_mine_uncomp)"
    }
}