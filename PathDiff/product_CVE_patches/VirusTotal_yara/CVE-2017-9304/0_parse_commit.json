{
    "current_hash": "925bcf3c3b0a28b5b78e25d9efda5c0bf27ae699",
    "parent_hash": "aa871746d89010ea96272344d993675e982fbe52",
    "modified_file_0": {
        "mod_filename": "libyara/include/yara/limits.h",
        "status": "modified",
        "add_lines": 20,
        "dele_lines": 0,
        "patch": "@@ -65,4 +65,24 @@ SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n #define LEX_BUF_SIZE                    8192\n \n \n+// Maximum allowed split ID, also limiting the number of split instructions\n+// allowed in a regular expression. This number can't be increased\n+// over 255 without changing RE_SPLIT_ID_TYPE.\n+#define RE_MAX_SPLIT_ID                 128\n+\n+// Maximum stack size for regexp evaluation\n+#define RE_MAX_STACK                    1024\n+\n+// Maximum code size for a compiled regexp\n+#define RE_MAX_CODE_SIZE                32768\n+\n+// Maximum input size scanned by yr_re_exec\n+#define RE_SCAN_LIMIT                   4096\n+\n+// Maximum number of fibers\n+#define RE_MAX_FIBERS                   1024\n+\n+// Maximum number of levels in regexp's AST\n+#define RE_MAX_AST_LEVELS               2000\n+\n #endif"
    },
    "modified_file_1": {
        "mod_filename": "libyara/include/yara/re.h",
        "status": "modified",
        "add_lines": 1,
        "dele_lines": 0,
        "patch": "@@ -136,6 +136,7 @@ struct RE_NODE\n struct RE_AST\n {\n   uint32_t flags;\n+  uint16_t levels;\n   RE_NODE* root_node;\n };\n "
    },
    "modified_file_2": {
        "mod_filename": "libyara/re.c",
        "status": "modified",
        "add_lines": 1,
        "dele_lines": 17,
        "patch": "@@ -52,23 +52,6 @@ order to avoid confusion with operating system threads.\n #include <yara/re_lexer.h>\n #include <yara/hex_lexer.h>\n \n-// Maximum allowed split ID, also limiting the number of split instructions\n-// allowed in a regular expression. This number can't be increased\n-// over 255 without changing RE_SPLIT_ID_TYPE.\n-#define RE_MAX_SPLIT_ID     128\n-\n-// Maximum stack size for regexp evaluation\n-#define RE_MAX_STACK      1024\n-\n-// Maximum code size for a compiled regexp\n-#define RE_MAX_CODE_SIZE  32768\n-\n-// Maximum input size scanned by yr_re_exec\n-#define RE_SCAN_LIMIT     4096\n-\n-// Maximum number of fibers\n-#define RE_MAX_FIBERS     1024\n-\n \n #define EMIT_BACKWARDS                  0x01\n #define EMIT_DONT_SET_FORWARDS_CODE     0x02\n@@ -268,6 +251,7 @@ int yr_re_ast_create(\n     return ERROR_INSUFFICIENT_MEMORY;\n \n   (*re_ast)->flags = 0;\n+  (*re_ast)->levels = 0;\n   (*re_ast)->root_node = NULL;\n \n   return ERROR_SUCCESS;"
    },
    "modified_file_3": {
        "mod_filename": "libyara/re_grammar.c",
        "status": "modified",
        "add_lines": 92,
        "dele_lines": 78,
        "patch": "@@ -88,6 +88,14 @@\n #define mark_as_not_fast_regexp() \\\n     ((RE_AST*) yyget_extra(yyscanner))->flags &= ~RE_FLAGS_FAST_REGEXP\n \n+#define incr_ast_levels() \\\n+    if (((RE_AST*) yyget_extra(yyscanner))->levels++ > RE_MAX_AST_LEVELS) \\\n+    { \\\n+      lex_env->last_error_code = ERROR_INVALID_REGULAR_EXPRESSION; \\\n+      YYABORT; \\\n+    }\n+\n+\n #define ERROR_IF(x, error) \\\n     if (x) \\\n     { \\\n@@ -102,7 +110,7 @@\n     } \\\n \n \n-#line 106 \"re_grammar.c\" /* yacc.c:339  */\n+#line 114 \"re_grammar.c\" /* yacc.c:339  */\n \n # ifndef YY_NULLPTR\n #  if defined __cplusplus && 201103L <= __cplusplus\n@@ -170,14 +178,14 @@ extern int re_yydebug;\n \n union YYSTYPE\n {\n-#line 73 \"re_grammar.y\" /* yacc.c:355  */\n+#line 81 \"re_grammar.y\" /* yacc.c:355  */\n \n   int integer;\n   uint32_t range;\n   RE_NODE* re_node;\n   uint8_t* class_vector;\n \n-#line 181 \"re_grammar.c\" /* yacc.c:355  */\n+#line 189 \"re_grammar.c\" /* yacc.c:355  */\n };\n \n typedef union YYSTYPE YYSTYPE;\n@@ -193,7 +201,7 @@ int re_yyparse (void *yyscanner, RE_LEX_ENVIRONMENT *lex_env);\n \n /* Copy the second part of user declarations.  */\n \n-#line 197 \"re_grammar.c\" /* yacc.c:358  */\n+#line 205 \"re_grammar.c\" /* yacc.c:358  */\n \n #ifdef short\n # undef short\n@@ -491,10 +499,10 @@ static const yytype_uint8 yytranslate[] =\n   /* YYRLINE[YYN] -- Source line where rule number YYN was defined.  */\n static const yytype_uint16 yyrline[] =\n {\n-       0,   104,   104,   109,   113,   117,   128,   146,   150,   161,\n-     175,   191,   205,   221,   244,   268,   290,   313,   317,   323,\n-     329,   335,   344,   348,   354,   362,   368,   374,   380,   386,\n-     392,   398\n+       0,   112,   112,   117,   121,   125,   137,   156,   160,   173,\n+     187,   203,   217,   233,   256,   280,   302,   325,   329,   335,\n+     341,   347,   356,   362,   368,   376,   382,   388,   394,   400,\n+     406,   412\n };\n #endif\n \n@@ -1039,33 +1047,33 @@ yydestruct (const char *yymsg, int yytype, YYSTYPE *yyvaluep, void *yyscanner, R\n   switch (yytype)\n     {\n           case 6: /* _CLASS_  */\n-#line 96 \"re_grammar.y\" /* yacc.c:1257  */\n+#line 104 \"re_grammar.y\" /* yacc.c:1257  */\n       { yr_free(((*yyvaluep).class_vector)); }\n-#line 1045 \"re_grammar.c\" /* yacc.c:1257  */\n+#line 1053 \"re_grammar.c\" /* yacc.c:1257  */\n         break;\n \n     case 26: /* alternative  */\n-#line 97 \"re_grammar.y\" /* yacc.c:1257  */\n+#line 105 \"re_grammar.y\" /* yacc.c:1257  */\n       { yr_re_node_destroy(((*yyvaluep).re_node)); }\n-#line 1051 \"re_grammar.c\" /* yacc.c:1257  */\n+#line 1059 \"re_grammar.c\" /* yacc.c:1257  */\n         break;\n \n     case 27: /* concatenation  */\n-#line 98 \"re_grammar.y\" /* yacc.c:1257  */\n+#line 106 \"re_grammar.y\" /* yacc.c:1257  */\n       { yr_re_node_destroy(((*yyvaluep).re_node)); }\n-#line 1057 \"re_grammar.c\" /* yacc.c:1257  */\n+#line 1065 \"re_grammar.c\" /* yacc.c:1257  */\n         break;\n \n     case 28: /* repeat  */\n-#line 99 \"re_grammar.y\" /* yacc.c:1257  */\n+#line 107 \"re_grammar.y\" /* yacc.c:1257  */\n       { yr_re_node_destroy(((*yyvaluep).re_node)); }\n-#line 1063 \"re_grammar.c\" /* yacc.c:1257  */\n+#line 1071 \"re_grammar.c\" /* yacc.c:1257  */\n         break;\n \n     case 29: /* single  */\n-#line 100 \"re_grammar.y\" /* yacc.c:1257  */\n+#line 108 \"re_grammar.y\" /* yacc.c:1257  */\n       { yr_re_node_destroy(((*yyvaluep).re_node)); }\n-#line 1069 \"re_grammar.c\" /* yacc.c:1257  */\n+#line 1077 \"re_grammar.c\" /* yacc.c:1257  */\n         break;\n \n \n@@ -1331,26 +1339,27 @@ YYSTYPE yylval YY_INITIAL_VALUE (= yyval_default);\n   switch (yyn)\n     {\n         case 2:\n-#line 105 \"re_grammar.y\" /* yacc.c:1646  */\n+#line 113 \"re_grammar.y\" /* yacc.c:1646  */\n     {\n         RE_AST* re_ast = yyget_extra(yyscanner);\n         re_ast->root_node = (yyvsp[0].re_node);\n       }\n-#line 1340 \"re_grammar.c\" /* yacc.c:1646  */\n+#line 1348 \"re_grammar.c\" /* yacc.c:1646  */\n     break;\n \n   case 4:\n-#line 114 \"re_grammar.y\" /* yacc.c:1646  */\n+#line 122 \"re_grammar.y\" /* yacc.c:1646  */\n     {\n         (yyval.re_node) = (yyvsp[0].re_node);\n       }\n-#line 1348 \"re_grammar.c\" /* yacc.c:1646  */\n+#line 1356 \"re_grammar.c\" /* yacc.c:1646  */\n     break;\n \n   case 5:\n-#line 118 \"re_grammar.y\" /* yacc.c:1646  */\n+#line 126 \"re_grammar.y\" /* yacc.c:1646  */\n     {\n         mark_as_not_fast_regexp();\n+        incr_ast_levels();\n \n         (yyval.re_node) = yr_re_node_create(RE_NODE_ALT, (yyvsp[-2].re_node), (yyvsp[0].re_node));\n \n@@ -1359,15 +1368,16 @@ YYSTYPE yylval YY_INITIAL_VALUE (= yyval_default);\n \n         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);\n       }\n-#line 1363 \"re_grammar.c\" /* yacc.c:1646  */\n+#line 1372 \"re_grammar.c\" /* yacc.c:1646  */\n     break;\n \n   case 6:\n-#line 129 \"re_grammar.y\" /* yacc.c:1646  */\n+#line 138 \"re_grammar.y\" /* yacc.c:1646  */\n     {\n         RE_NODE* node;\n \n         mark_as_not_fast_regexp();\n+        incr_ast_levels();\n \n         node = yr_re_node_create(RE_NODE_EMPTY, NULL, NULL);\n \n@@ -1378,31 +1388,33 @@ YYSTYPE yylval YY_INITIAL_VALUE (= yyval_default);\n \n         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);\n       }\n-#line 1382 \"re_grammar.c\" /* yacc.c:1646  */\n+#line 1392 \"re_grammar.c\" /* yacc.c:1646  */\n     break;\n \n   case 7:\n-#line 147 \"re_grammar.y\" /* yacc.c:1646  */\n+#line 157 \"re_grammar.y\" /* yacc.c:1646  */\n     {\n         (yyval.re_node) = (yyvsp[0].re_node);\n       }\n-#line 1390 \"re_grammar.c\" /* yacc.c:1646  */\n+#line 1400 \"re_grammar.c\" /* yacc.c:1646  */\n     break;\n \n   case 8:\n-#line 151 \"re_grammar.y\" /* yacc.c:1646  */\n+#line 161 \"re_grammar.y\" /* yacc.c:1646  */\n     {\n+        incr_ast_levels();\n+\n         (yyval.re_node) = yr_re_node_create(RE_NODE_CONCAT, (yyvsp[-1].re_node), (yyvsp[0].re_node));\n \n         DESTROY_NODE_IF((yyval.re_node) == NULL, (yyvsp[-1].re_node));\n         DESTROY_NODE_IF((yyval.re_node) == NULL, (yyvsp[0].re_node));\n         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);\n       }\n-#line 1402 \"re_grammar.c\" /* yacc.c:1646  */\n+#line 1414 \"re_grammar.c\" /* yacc.c:1646  */\n     break;\n \n   case 9:\n-#line 162 \"re_grammar.y\" /* yacc.c:1646  */\n+#line 174 \"re_grammar.y\" /* yacc.c:1646  */\n     {\n         RE_AST* re_ast;\n \n@@ -1416,11 +1428,11 @@ YYSTYPE yylval YY_INITIAL_VALUE (= yyval_default);\n         DESTROY_NODE_IF((yyval.re_node) == NULL, (yyvsp[-1].re_node));\n         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);\n       }\n-#line 1420 \"re_grammar.c\" /* yacc.c:1646  */\n+#line 1432 \"re_grammar.c\" /* yacc.c:1646  */\n     break;\n \n   case 10:\n-#line 176 \"re_grammar.y\" /* yacc.c:1646  */\n+#line 188 \"re_grammar.y\" /* yacc.c:1646  */\n     {\n         RE_AST* re_ast;\n \n@@ -1436,11 +1448,11 @@ YYSTYPE yylval YY_INITIAL_VALUE (= yyval_default);\n \n         (yyval.re_node)->greedy = FALSE;\n       }\n-#line 1440 \"re_grammar.c\" /* yacc.c:1646  */\n+#line 1452 \"re_grammar.c\" /* yacc.c:1646  */\n     break;\n \n   case 11:\n-#line 192 \"re_grammar.y\" /* yacc.c:1646  */\n+#line 204 \"re_grammar.y\" /* yacc.c:1646  */\n     {\n         RE_AST* re_ast;\n \n@@ -1454,11 +1466,11 @@ YYSTYPE yylval YY_INITIAL_VALUE (= yyval_default);\n         DESTROY_NODE_IF((yyval.re_node) == NULL, (yyvsp[-1].re_node));\n         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);\n       }\n-#line 1458 \"re_grammar.c\" /* yacc.c:1646  */\n+#line 1470 \"re_grammar.c\" /* yacc.c:1646  */\n     break;\n \n   case 12:\n-#line 206 \"re_grammar.y\" /* yacc.c:1646  */\n+#line 218 \"re_grammar.y\" /* yacc.c:1646  */\n     {\n         RE_AST* re_ast;\n \n@@ -1474,11 +1486,11 @@ YYSTYPE yylval YY_INITIAL_VALUE (= yyval_default);\n \n         (yyval.re_node)->greedy = FALSE;\n       }\n-#line 1478 \"re_grammar.c\" /* yacc.c:1646  */\n+#line 1490 \"re_grammar.c\" /* yacc.c:1646  */\n     break;\n \n   case 13:\n-#line 222 \"re_grammar.y\" /* yacc.c:1646  */\n+#line 234 \"re_grammar.y\" /* yacc.c:1646  */\n     {\n         RE_AST* re_ast = yyget_extra(yyscanner);\n         re_ast->flags |= RE_FLAGS_GREEDY;\n@@ -1501,11 +1513,11 @@ YYSTYPE yylval YY_INITIAL_VALUE (= yyval_default);\n         (yyval.re_node)->start = 0;\n         (yyval.re_node)->end = 1;\n       }\n-#line 1505 \"re_grammar.c\" /* yacc.c:1646  */\n+#line 1517 \"re_grammar.c\" /* yacc.c:1646  */\n     break;\n \n   case 14:\n-#line 245 \"re_grammar.y\" /* yacc.c:1646  */\n+#line 257 \"re_grammar.y\" /* yacc.c:1646  */\n     {\n         RE_AST* re_ast = yyget_extra(yyscanner);\n         re_ast->flags |= RE_FLAGS_UNGREEDY;\n@@ -1529,11 +1541,11 @@ YYSTYPE yylval YY_INITIAL_VALUE (= yyval_default);\n         (yyval.re_node)->end = 1;\n         (yyval.re_node)->greedy = FALSE;\n       }\n-#line 1533 \"re_grammar.c\" /* yacc.c:1646  */\n+#line 1545 \"re_grammar.c\" /* yacc.c:1646  */\n     break;\n \n   case 15:\n-#line 269 \"re_grammar.y\" /* yacc.c:1646  */\n+#line 281 \"re_grammar.y\" /* yacc.c:1646  */\n     {\n         RE_AST* re_ast = yyget_extra(yyscanner);\n         re_ast->flags |= RE_FLAGS_GREEDY;\n@@ -1555,11 +1567,11 @@ YYSTYPE yylval YY_INITIAL_VALUE (= yyval_default);\n         (yyval.re_node)->start = (yyvsp[0].range) & 0xFFFF;;\n         (yyval.re_node)->end = (yyvsp[0].range) >> 16;;\n       }\n-#line 1559 \"re_grammar.c\" /* yacc.c:1646  */\n+#line 1571 \"re_grammar.c\" /* yacc.c:1646  */\n     break;\n \n   case 16:\n-#line 291 \"re_grammar.y\" /* yacc.c:1646  */\n+#line 303 \"re_grammar.y\" /* yacc.c:1646  */\n     {\n         RE_AST* re_ast = yyget_extra(yyscanner);\n         re_ast->flags |= RE_FLAGS_UNGREEDY;\n@@ -1582,161 +1594,163 @@ YYSTYPE yylval YY_INITIAL_VALUE (= yyval_default);\n         (yyval.re_node)->end = (yyvsp[-1].range) >> 16;;\n         (yyval.re_node)->greedy = FALSE;\n       }\n-#line 1586 \"re_grammar.c\" /* yacc.c:1646  */\n+#line 1598 \"re_grammar.c\" /* yacc.c:1646  */\n     break;\n \n   case 17:\n-#line 314 \"re_grammar.y\" /* yacc.c:1646  */\n+#line 326 \"re_grammar.y\" /* yacc.c:1646  */\n     {\n         (yyval.re_node) = (yyvsp[0].re_node);\n       }\n-#line 1594 \"re_grammar.c\" /* yacc.c:1646  */\n+#line 1606 \"re_grammar.c\" /* yacc.c:1646  */\n     break;\n \n   case 18:\n-#line 318 \"re_grammar.y\" /* yacc.c:1646  */\n+#line 330 \"re_grammar.y\" /* yacc.c:1646  */\n     {\n         (yyval.re_node) = yr_re_node_create(RE_NODE_WORD_BOUNDARY, NULL, NULL);\n \n         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);\n       }\n-#line 1604 \"re_grammar.c\" /* yacc.c:1646  */\n+#line 1616 \"re_grammar.c\" /* yacc.c:1646  */\n     break;\n \n   case 19:\n-#line 324 \"re_grammar.y\" /* yacc.c:1646  */\n+#line 336 \"re_grammar.y\" /* yacc.c:1646  */\n     {\n         (yyval.re_node) = yr_re_node_create(RE_NODE_NON_WORD_BOUNDARY, NULL, NULL);\n \n         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);\n       }\n-#line 1614 \"re_grammar.c\" /* yacc.c:1646  */\n+#line 1626 \"re_grammar.c\" /* yacc.c:1646  */\n     break;\n \n   case 20:\n-#line 330 \"re_grammar.y\" /* yacc.c:1646  */\n+#line 342 \"re_grammar.y\" /* yacc.c:1646  */\n     {\n         (yyval.re_node) = yr_re_node_create(RE_NODE_ANCHOR_START, NULL, NULL);\n \n         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);\n       }\n-#line 1624 \"re_grammar.c\" /* yacc.c:1646  */\n+#line 1636 \"re_grammar.c\" /* yacc.c:1646  */\n     break;\n \n   case 21:\n-#line 336 \"re_grammar.y\" /* yacc.c:1646  */\n+#line 348 \"re_grammar.y\" /* yacc.c:1646  */\n     {\n         (yyval.re_node) = yr_re_node_create(RE_NODE_ANCHOR_END, NULL, NULL);\n \n         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);\n       }\n-#line 1634 \"re_grammar.c\" /* yacc.c:1646  */\n+#line 1646 \"re_grammar.c\" /* yacc.c:1646  */\n     break;\n \n   case 22:\n-#line 345 \"re_grammar.y\" /* yacc.c:1646  */\n+#line 357 \"re_grammar.y\" /* yacc.c:1646  */\n     {\n+        incr_ast_levels();\n+\n         (yyval.re_node) = (yyvsp[-1].re_node);\n       }\n-#line 1642 \"re_grammar.c\" /* yacc.c:1646  */\n+#line 1656 \"re_grammar.c\" /* yacc.c:1646  */\n     break;\n \n   case 23:\n-#line 349 \"re_grammar.y\" /* yacc.c:1646  */\n+#line 363 \"re_grammar.y\" /* yacc.c:1646  */\n     {\n         (yyval.re_node) = yr_re_node_create(RE_NODE_ANY, NULL, NULL);\n \n         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);\n       }\n-#line 1652 \"re_grammar.c\" /* yacc.c:1646  */\n+#line 1666 \"re_grammar.c\" /* yacc.c:1646  */\n     break;\n \n   case 24:\n-#line 355 \"re_grammar.y\" /* yacc.c:1646  */\n+#line 369 \"re_grammar.y\" /* yacc.c:1646  */\n     {\n         (yyval.re_node) = yr_re_node_create(RE_NODE_LITERAL, NULL, NULL);\n \n         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);\n \n         (yyval.re_node)->value = (yyvsp[0].integer);\n       }\n-#line 1664 \"re_grammar.c\" /* yacc.c:1646  */\n+#line 1678 \"re_grammar.c\" /* yacc.c:1646  */\n     break;\n \n   case 25:\n-#line 363 \"re_grammar.y\" /* yacc.c:1646  */\n+#line 377 \"re_grammar.y\" /* yacc.c:1646  */\n     {\n         (yyval.re_node) = yr_re_node_create(RE_NODE_WORD_CHAR, NULL, NULL);\n \n         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);\n       }\n-#line 1674 \"re_grammar.c\" /* yacc.c:1646  */\n+#line 1688 \"re_grammar.c\" /* yacc.c:1646  */\n     break;\n \n   case 26:\n-#line 369 \"re_grammar.y\" /* yacc.c:1646  */\n+#line 383 \"re_grammar.y\" /* yacc.c:1646  */\n     {\n         (yyval.re_node) = yr_re_node_create(RE_NODE_NON_WORD_CHAR, NULL, NULL);\n \n         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);\n       }\n-#line 1684 \"re_grammar.c\" /* yacc.c:1646  */\n+#line 1698 \"re_grammar.c\" /* yacc.c:1646  */\n     break;\n \n   case 27:\n-#line 375 \"re_grammar.y\" /* yacc.c:1646  */\n+#line 389 \"re_grammar.y\" /* yacc.c:1646  */\n     {\n         (yyval.re_node) = yr_re_node_create(RE_NODE_SPACE, NULL, NULL);\n \n         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);\n       }\n-#line 1694 \"re_grammar.c\" /* yacc.c:1646  */\n+#line 1708 \"re_grammar.c\" /* yacc.c:1646  */\n     break;\n \n   case 28:\n-#line 381 \"re_grammar.y\" /* yacc.c:1646  */\n+#line 395 \"re_grammar.y\" /* yacc.c:1646  */\n     {\n          (yyval.re_node) = yr_re_node_create(RE_NODE_NON_SPACE, NULL, NULL);\n \n          ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);\n       }\n-#line 1704 \"re_grammar.c\" /* yacc.c:1646  */\n+#line 1718 \"re_grammar.c\" /* yacc.c:1646  */\n     break;\n \n   case 29:\n-#line 387 \"re_grammar.y\" /* yacc.c:1646  */\n+#line 401 \"re_grammar.y\" /* yacc.c:1646  */\n     {\n         (yyval.re_node) = yr_re_node_create(RE_NODE_DIGIT, NULL, NULL);\n \n         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);\n       }\n-#line 1714 \"re_grammar.c\" /* yacc.c:1646  */\n+#line 1728 \"re_grammar.c\" /* yacc.c:1646  */\n     break;\n \n   case 30:\n-#line 393 \"re_grammar.y\" /* yacc.c:1646  */\n+#line 407 \"re_grammar.y\" /* yacc.c:1646  */\n     {\n         (yyval.re_node) = yr_re_node_create(RE_NODE_NON_DIGIT, NULL, NULL);\n \n         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);\n       }\n-#line 1724 \"re_grammar.c\" /* yacc.c:1646  */\n+#line 1738 \"re_grammar.c\" /* yacc.c:1646  */\n     break;\n \n   case 31:\n-#line 399 \"re_grammar.y\" /* yacc.c:1646  */\n+#line 413 \"re_grammar.y\" /* yacc.c:1646  */\n     {\n         (yyval.re_node) = yr_re_node_create(RE_NODE_CLASS, NULL, NULL);\n \n         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);\n \n         (yyval.re_node)->class_vector = (yyvsp[0].class_vector);\n       }\n-#line 1736 \"re_grammar.c\" /* yacc.c:1646  */\n+#line 1750 \"re_grammar.c\" /* yacc.c:1646  */\n     break;\n \n \n-#line 1740 \"re_grammar.c\" /* yacc.c:1646  */\n+#line 1754 \"re_grammar.c\" /* yacc.c:1646  */\n       default: break;\n     }\n   /* User semantic actions sometimes alter yychar, and that requires\n@@ -1964,5 +1978,5 @@ YYSTYPE yylval YY_INITIAL_VALUE (= yyval_default);\n #endif\n   return yyresult;\n }\n-#line 407 \"re_grammar.y\" /* yacc.c:1906  */\n+#line 421 \"re_grammar.y\" /* yacc.c:1906  */\n "
    },
    "modified_file_4": {
        "mod_filename": "libyara/re_grammar.h",
        "status": "modified",
        "add_lines": 1,
        "dele_lines": 1,
        "patch": "@@ -78,7 +78,7 @@ extern int re_yydebug;\n \n union YYSTYPE\n {\n-#line 73 \"re_grammar.y\" /* yacc.c:1909  */\n+#line 81 \"re_grammar.y\" /* yacc.c:1909  */\n \n   int integer;\n   uint32_t range;"
    },
    "modified_file_5": {
        "mod_filename": "libyara/re_grammar.y",
        "status": "modified",
        "add_lines": 14,
        "dele_lines": 0,
        "patch": "@@ -46,6 +46,14 @@ SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n #define mark_as_not_fast_regexp() \\\n     ((RE_AST*) yyget_extra(yyscanner))->flags &= ~RE_FLAGS_FAST_REGEXP\n \n+#define incr_ast_levels() \\\n+    if (((RE_AST*) yyget_extra(yyscanner))->levels++ > RE_MAX_AST_LEVELS) \\\n+    { \\\n+      lex_env->last_error_code = ERROR_INVALID_REGULAR_EXPRESSION; \\\n+      YYABORT; \\\n+    }\n+\n+\n #define ERROR_IF(x, error) \\\n     if (x) \\\n     { \\\n@@ -117,6 +125,7 @@ alternative\n     | alternative '|' concatenation\n       {\n         mark_as_not_fast_regexp();\n+        incr_ast_levels();\n \n         $$ = yr_re_node_create(RE_NODE_ALT, $1, $3);\n \n@@ -130,6 +139,7 @@ alternative\n         RE_NODE* node;\n \n         mark_as_not_fast_regexp();\n+        incr_ast_levels();\n \n         node = yr_re_node_create(RE_NODE_EMPTY, NULL, NULL);\n \n@@ -149,6 +159,8 @@ concatenation\n       }\n     | concatenation repeat\n       {\n+        incr_ast_levels();\n+\n         $$ = yr_re_node_create(RE_NODE_CONCAT, $1, $2);\n \n         DESTROY_NODE_IF($$ == NULL, $1);\n@@ -343,6 +355,8 @@ repeat\n single\n     : '(' alternative ')'\n       {\n+        incr_ast_levels();\n+\n         $$ = $2;\n       }\n     | '.'"
    }
}