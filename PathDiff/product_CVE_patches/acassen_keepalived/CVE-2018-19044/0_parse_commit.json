{
    "current_hash": "04f2d32871bb3b11d7dc024039952f2fe2750306",
    "parent_hash": "5241e4d7b177d0b6f073cfc9ed5444bf51ec89d6",
    "modified_file_0": {
        "mod_filename": "keepalived/core/main.c",
        "status": "modified",
        "add_lines": 1,
        "dele_lines": 1,
        "patch": "@@ -1399,7 +1399,7 @@ parse_cmdline(int argc, char **argv)\n \t\t\t__set_bit(DONT_FORK_BIT, &debug);\n \t\t\t__set_bit(NO_SYSLOG_BIT, &debug);\n \t\t\tif (optarg && optarg[0]) {\n-\t\t\t\tint fd = open(optarg, O_WRONLY | O_APPEND | O_CREAT, S_IRUSR | S_IWUSR | S_IRGRP | S_IROTH);\n+\t\t\t\tint fd = open(optarg, O_WRONLY | O_APPEND | O_CREAT | O_NOFOLLOW, S_IRUSR | S_IWUSR | S_IRGRP | S_IROTH);\n \t\t\t\tif (fd == -1) {\n \t\t\t\t\tfprintf(stderr, \"Unable to open config-test log file %s\\n\", optarg);\n \t\t\t\t\texit(EXIT_FAILURE);"
    },
    "modified_file_1": {
        "mod_filename": "keepalived/core/pidfile.c",
        "status": "modified",
        "add_lines": 1,
        "dele_lines": 1,
        "patch": "@@ -60,7 +60,7 @@ int\n pidfile_write(const char *pid_file, int pid)\n {\n \tFILE *pidfile = NULL;\n-\tint pidfd = creat(pid_file, S_IRUSR | S_IWUSR | S_IRGRP | S_IROTH);\n+\tint pidfd = open(pid_file, O_NOFOLLOW | O_CREAT | O_WRONLY | O_TRUNC, S_IRUSR | S_IWUSR | S_IRGRP | S_IROTH);\n \n \tif (pidfd != -1) pidfile = fdopen(pidfd, \"w\");\n "
    },
    "modified_file_2": {
        "mod_filename": "keepalived/core/smtp.c",
        "status": "modified",
        "add_lines": 1,
        "dele_lines": 1,
        "patch": "@@ -570,7 +570,7 @@ smtp_connect(smtp_t * smtp)\n static void\n smtp_log_to_file(smtp_t *smtp)\n {\n-\tFILE *fp = fopen(\"/tmp/smtp-alert.log\", \"a\");\n+\tFILE *fp = fopen_safe(\"/tmp/smtp-alert.log\", \"a\");\n \ttime_t now;\n \tstruct tm tm;\n \tchar time_buf[25];"
    },
    "modified_file_3": {
        "mod_filename": "keepalived/vrrp/vrrp_dbus.c",
        "status": "modified",
        "add_lines": 1,
        "dele_lines": 1,
        "patch": "@@ -594,7 +594,7 @@ read_file(gchar* filepath)\n \tsize_t length;\n \tgchar *ret = NULL;\n \n-\tf = fopen(filepath, \"rb\");\n+\tf = fopen(filepath, \"r\");\n \tif (f) {\n \t\tfseek(f, 0, SEEK_END);\n \t\tlength = (size_t)ftell(f);"
    },
    "modified_file_4": {
        "mod_filename": "keepalived/vrrp/vrrp_json.c",
        "status": "modified",
        "add_lines": 2,
        "dele_lines": 1,
        "patch": "@@ -37,6 +37,7 @@\n #include \"vrrp_iprule.h\"\n #include \"logger.h\"\n #include \"timer.h\"\n+#include \"utils.h\"\n \n static inline double\n timeval_to_double(const timeval_t *t)\n@@ -55,7 +56,7 @@ vrrp_print_json(void)\n \tif (LIST_ISEMPTY(vrrp_data->vrrp))\n \t\treturn;\n \n-\tfile = fopen (\"/tmp/keepalived.json\",\"w\");\n+\tfile = fopen_safe(\"/tmp/keepalived.json\", \"w\");\n \tif (!file) {\n \t\tlog_message(LOG_INFO, \"Can't open /tmp/keepalived.json (%d: %s)\",\n \t\t\terrno, strerror(errno));"
    },
    "modified_file_5": {
        "mod_filename": "keepalived/vrrp/vrrp_parser.c",
        "status": "modified",
        "add_lines": 1,
        "dele_lines": 1,
        "patch": "@@ -1205,7 +1205,7 @@ vrrp_tfile_end_handler(void)\n \n \tif (!__test_bit(CONFIG_TEST_BIT, &debug)) {\n \t\t/* Write the value to the file */\n-\t\tif ((tf = fopen(tfile->file_path, \"w\"))) {\n+\t\tif ((tf = fopen_safe(tfile->file_path, \"w\"))) {\n \t\t\tfprintf(tf, \"%d\\n\", track_file_init_value);\n \t\t\tfclose(tf);\n \t\t}"
    },
    "modified_file_6": {
        "mod_filename": "keepalived/vrrp/vrrp_print.c",
        "status": "modified",
        "add_lines": 7,
        "dele_lines": 10,
        "patch": "@@ -32,14 +32,15 @@\n #include \"vrrp.h\"\n #include \"vrrp_data.h\"\n #include \"vrrp_print.h\"\n+#include \"utils.h\"\n \n static const char *dump_file = \"/tmp/keepalived.data\";\n static const char *stats_file = \"/tmp/keepalived.stats\";\n \n void\n vrrp_print_data(void)\n {\n-\tFILE *file = fopen (dump_file, \"w\");\n+\tFILE *file = fopen_safe(dump_file, \"w\");\n \n \tif (!file) {\n \t\tlog_message(LOG_INFO, \"Can't open %s (%d: %s)\",\n@@ -55,28 +56,24 @@ vrrp_print_data(void)\n void\n vrrp_print_stats(void)\n {\n-\tFILE *file;\n-\tfile = fopen (stats_file, \"w\");\n+\tFILE *file = fopen_safe(stats_file, \"w\");\n+\telement e;\n+\tvrrp_t *vrrp;\n \n \tif (!file) {\n \t\tlog_message(LOG_INFO, \"Can't open %s (%d: %s)\",\n \t\t\tstats_file, errno, strerror(errno));\n \t\treturn;\n \t}\n \n-\tlist l = vrrp_data->vrrp;\n-\telement e;\n-\tvrrp_t *vrrp;\n \n-\tfor (e = LIST_HEAD(l); e; ELEMENT_NEXT(e)) {\n-\t\tvrrp = ELEMENT_DATA(e);\n+\tLIST_FOREACH(vrrp_data->vrrp, vrrp, e) {\n \t\tfprintf(file, \"VRRP Instance: %s\\n\", vrrp->iname);\n \t\tfprintf(file, \"  Advertisements:\\n\");\n \t\tfprintf(file, \"    Received: %\" PRIu64 \"\\n\", vrrp->stats->advert_rcvd);\n \t\tfprintf(file, \"    Sent: %d\\n\", vrrp->stats->advert_sent);\n \t\tfprintf(file, \"  Became master: %d\\n\", vrrp->stats->become_master);\n-\t\tfprintf(file, \"  Released master: %d\\n\",\n-\t\t\tvrrp->stats->release_master);\n+\t\tfprintf(file, \"  Released master: %d\\n\", vrrp->stats->release_master);\n \t\tfprintf(file, \"  Packet Errors:\\n\");\n \t\tfprintf(file, \"    Length: %\" PRIu64 \"\\n\", vrrp->stats->packet_len_err);\n \t\tfprintf(file, \"    TTL: %\" PRIu64 \"\\n\", vrrp->stats->ip_ttl_err);"
    },
    "modified_file_7": {
        "mod_filename": "keepalived/vrrp/vrrp_scheduler.c",
        "status": "modified",
        "add_lines": 1,
        "dele_lines": 1,
        "patch": "@@ -1134,7 +1134,7 @@ dump_threads(void)\n \t\t\t\t\tNULL,\n #endif\n \t\t\t\t\tglobal_data->instance_name);\n-\tfp = fopen(file_name, \"a\");\n+\tfp = fopen_safe(file_name, \"a\");\n \tFREE(file_name);\n \n \tset_time_now();"
    },
    "modified_file_8": {
        "mod_filename": "lib/logger.c",
        "status": "modified",
        "add_lines": 1,
        "dele_lines": 1,
        "patch": "@@ -78,7 +78,7 @@ open_log_file(const char *name, const char *prog, const char *namespace, const c\n \n \tfile_name = make_file_name(name, prog, namespace, instance);\n \n-\tlog_file = fopen(file_name, \"a\");\n+\tlog_file = fopen_safe(file_name, \"a\");\n \tif (log_file) {\n \t\tint n = fileno(log_file);\n \t\tfcntl(n, F_SETFD, FD_CLOEXEC | fcntl(n, F_GETFD));"
    },
    "modified_file_9": {
        "mod_filename": "lib/memory.c",
        "status": "modified",
        "add_lines": 1,
        "dele_lines": 1,
        "patch": "@@ -621,7 +621,7 @@ mem_log_init(const char* prog_name, const char *banner)\n \t}\n \n \tsnprintf(log_name, log_name_len, \"/tmp/%s_mem.%d.log\", prog_name, getpid());\n-\tlog_op = fopen(log_name, \"a\");\n+\tlog_op = fopen_safe(log_name, \"a\");\n \tif (log_op == NULL) {\n \t\tlog_message(LOG_INFO, \"Unable to open %s for appending\", log_name);\n \t\tlog_op = stderr;"
    },
    "modified_file_10": {
        "mod_filename": "lib/notify.c",
        "status": "modified",
        "add_lines": 1,
        "dele_lines": 1,
        "patch": "@@ -236,7 +236,7 @@ fifo_open(notify_fifo_t* fifo, int (*script_exit)(thread_t *), const char *type)\n \t\t\t\tnotify_fifo_exec(master, script_exit, fifo, fifo->script);\n \n \t\t\t/* Now open the fifo */\n-\t\t\tif ((fifo->fd = open(fifo->name, O_RDWR | O_CLOEXEC | O_NONBLOCK)) == -1) {\n+\t\t\tif ((fifo->fd = open(fifo->name, O_RDWR | O_CLOEXEC | O_NONBLOCK | O_NOFOLLOW)) == -1) {\n \t\t\t\tlog_message(LOG_INFO, \"Unable to open %snotify fifo %s - errno %d\", type, fifo->name, errno);\n \t\t\t\tif (fifo->created_fifo) {\n \t\t\t\t\tunlink(fifo->name);"
    },
    "modified_file_11": {
        "mod_filename": "lib/parser.c",
        "status": "modified",
        "add_lines": 2,
        "dele_lines": 2,
        "patch": "@@ -455,11 +455,11 @@ dump_keywords(vector_t *keydump, int level, FILE *fp)\n {\n \tunsigned int i;\n \tkeyword_t *keyword_vec;\n-\tchar file_name[21];\n+\tchar file_name[22];\n \n \tif (!level) {\n \t\tsnprintf(file_name, sizeof(file_name), \"/tmp/keywords.%d\", getpid());\n-\t\tfp = fopen(file_name, \"w\");\n+\t\tfp = fopen_safe(file_name, \"w\");\n \t\tif (!fp)\n \t\t\treturn;\n \t}"
    },
    "modified_file_12": {
        "mod_filename": "lib/utils.c",
        "status": "modified",
        "add_lines": 42,
        "dele_lines": 1,
        "patch": "@@ -123,7 +123,7 @@ write_stacktrace(const char *file_name, const char *str)\n \n \tnptrs = backtrace(buffer, 100);\n \tif (file_name) {\n-\t\tfd = open(file_name, O_WRONLY | O_APPEND | O_CREAT, 0644);\n+\t\tfd = open(file_name, O_WRONLY | O_APPEND | O_CREAT | O_NOFOLLOW, S_IRUSR | S_IWUSR | S_IRGRP | S_IWGRP | S_IROTH | S_IWOTH);\n \t\tif (str)\n \t\t\tdprintf(fd, \"%s\\n\", str);\n \t\tbacktrace_symbols_fd(buffer, nptrs, fd);\n@@ -788,6 +788,47 @@ string_equal(const char *str1, const char *str2)\n \treturn !strcmp(str1, str2);\n }\n \n+/* We need to use O_NOFOLLOW if opening a file for write, so that a non privileged user can't\n+ * create a symbolic link from the path to a system file and cause a system file to be overwritten. */\n+FILE *fopen_safe(const char *path, const char *mode)\n+{\n+\tint fd;\n+\tFILE *file;\n+\tint flags = O_NOFOLLOW | O_CREAT;\n+\n+\tif (mode[0] == 'r')\n+\t\treturn fopen(path, mode);\n+\n+\tif (mode[0] != 'a' && mode[0] != 'w')\n+\t\treturn NULL;\n+\n+\tif (mode[1] &&\n+\t    (mode[1] != '+' || mode[2]))\n+\t\treturn NULL;\n+\n+\tif (mode[0] == 'w')\n+\t\tflags |= O_TRUNC;\n+\telse\n+\t\tflags |= O_APPEND;\n+\n+\tif (mode[1])\n+\t\tflags |= O_RDWR;\n+\telse\n+\t\tflags |= O_WRONLY;\n+\n+\tfd = open(path, flags, S_IRUSR | S_IWUSR | S_IRGRP | S_IWGRP | S_IROTH | S_IWOTH);\n+\tif (fd == -1)\n+\t\treturn NULL;\n+\n+\tfile = fdopen (fd, \"w\");\n+\tif (!file) {\n+\t\tclose(fd);\n+\t\treturn NULL;\n+\t}\n+\n+\treturn file;\n+}\n+\n void\n set_std_fd(bool force)\n {"
    },
    "modified_file_13": {
        "mod_filename": "lib/utils.h",
        "status": "modified",
        "add_lines": 1,
        "dele_lines": 0,
        "patch": "@@ -182,6 +182,7 @@ extern int inet_inaddrcmp(int, const void *, const void *);\n extern int inet_sockaddrcmp(const struct sockaddr_storage *, const struct sockaddr_storage *);\n extern char *get_local_name(void);\n extern bool string_equal(const char *, const char *);\n+extern FILE *fopen_safe(const char *, const char *);\n extern void set_std_fd(bool);\n extern void close_std_fd(void);\n #if !defined _HAVE_LIBIPTC_ || defined _LIBIPTC_DYNAMIC_"
    }
}