{
    "current_hash": "c6247a9ef2c7b33244ab1d3aa5d629ec49f0a067",
    "parent_hash": "2d48d8ca54ff9f44672543e00731c30d90f38294",
    "modified_file_0": {
        "mod_filename": "doc/keepalived.conf.SYNOPSIS",
        "status": "modified",
        "add_lines": 4,
        "dele_lines": 0,
        "patch": "@@ -529,6 +529,10 @@ global_defs {                                 # Block identification\n     rs_init_notifies\t\t\t      # Send notifies at startup for real servers that are starting up\n     no_checker_emails                         # Don't send an email every time a real server checker changes state;\n                                               #   only send email when a real server is added or removed\n+    umask [NUMBER|BITS]                       # The umask to use for creating files. The number can be specified in hex, octal\n+                                              #   or decimal. BITS are I{R|W|X}{USR|GRP|OTH}, e.g. IRGRP, separated by '|'s.\n+                                              #   The default umask is IWGRP | IWOTH. This option cannot override the\n+                                              #   command-line option.\n }\n \n net_namespace NAME                            # Set the network namespace to run in"
    },
    "modified_file_1": {
        "mod_filename": "doc/man/man5/keepalived.conf.5",
        "status": "modified",
        "add_lines": 6,
        "dele_lines": 0,
        "patch": "@@ -499,6 +499,12 @@ and\n     # Don't send an email every time a real server checker changes state;\n     # only send email when a real server is added or removed\n     \\fBno_checker_emails\\fR\n+\n+    # The umask to use for creating files. The number can be specified in hex, octal\n+    #   or decimal. BITS are I{R|W|X}{USR|GRP|OTH}, e.g. IRGRP, separated by '|'s.\n+    #   The default umask is IWGRP | IWOTH. This option cannot override the\n+    #   command-line option.\n+    \\fBumask \\fR[NUMBER|BITS]\n }\n .fi\n .SH Static track groups"
    },
    "modified_file_2": {
        "mod_filename": "doc/man/man8/keepalived.8",
        "status": "modified",
        "add_lines": 4,
        "dele_lines": 0,
        "patch": "@@ -34,6 +34,7 @@ keepalived \\- load\\-balancing and high\\-availability service\n [\\fB\\-i\\fP|\\fB\\-\\-config-id\\fP id]\n [\\fB\\-x\\fP|\\fB\\-\\-snmp\\fP]\n [\\fB\\-A\\fP|\\fB\\-\\-snmp-agent-socket\\fP=FILE]\n+[\\fB\\-u\\fP|\\fB\\-\\-umask\\fP=NUMBER]\n [\\fB\\-m\\fP|\\fB\\-\\-core\\-dump\\fP]\n [\\fB\\-M\\fP|\\fB\\-\\-core\\-dump\\-pattern\\fP[=PATTERN]]\n [\\fB\\-\\-signum\\fP=SIGFUNC]\n@@ -158,6 +159,9 @@ Enable the SNMP subsystem.\n \\fB -A, --snmp-agent-socket\\fP=FILE\n Use the specified socket for connection to SNMP master agent.\n .TP\n+\\fB -u, --umask\\fP=NUMBER\n+The umask specified in the usual numeric way - see man umask(2)\n+.TP\n \\fB -m, --core-dump\\fP\n Override the RLIMIT_CORE hard and soft limits to enable keepalived to\n produce a coredump in the event of a segfault or other failure."
    },
    "modified_file_3": {
        "mod_filename": "keepalived/core/global_data.c",
        "status": "modified",
        "add_lines": 1,
        "dele_lines": 0,
        "patch": "@@ -571,5 +571,6 @@ dump_global_data(FILE *fp, data_t * data)\n \tif (buf[0])\n \t\tconf_write(fp, \"%s\", buf);\n \tconf_write(fp, \" rx_bufs_multiples = %u\", global_data->vrrp_rx_bufs_multiples);\n+\tconf_write(fp, \" umask = 0%o\", global_data->umask);\n #endif\n }"
    },
    "modified_file_4": {
        "mod_filename": "keepalived/core/global_parser.c",
        "status": "modified",
        "add_lines": 73,
        "dele_lines": 0,
        "patch": "@@ -35,6 +35,8 @@\n #include <sched.h>\n #endif\n #include <strings.h>\n+#include <sys/types.h>\n+#include <sys/stat.h>\n \n #ifdef _WITH_SNMP_\n #include \"snmp.h\"\n@@ -1341,6 +1343,76 @@ no_checker_emails_handler(vector_t *strvec)\n }\n #endif\n \n+static void\n+umask_handler(vector_t *strvec)\n+{\n+\tlong umask_long;\n+\tmode_t umask_val = 0;\n+\tchar *mask = strvec_slot(strvec, 1);\n+\tchar *endptr;\n+\tunsigned i;\n+\tchar *p;\n+\n+\tif (umask_cmdline) {\n+\t\tlog_message(LOG_INFO, \"umask command line option specified, ignoring config option\");\n+\t\treturn;\n+\t}\n+\n+\tif (isdigit(mask[0])) {\n+\t\tif (vector_size(strvec) != 2) {\n+\t\t\treport_config_error(CONFIG_GENERAL_ERROR, \"%s parameter(s) to umask option\", vector_size(strvec) == 1 ? \"Missing\" : \"Extra\");\n+\t\t\treturn;\n+\t\t}\n+\t\tumask_long = strtol(mask, &endptr, 0);\n+\t\tif (*endptr || umask_long < 0 || umask_long & ~0777L) {\n+\t\t\treport_config_error(CONFIG_GENERAL_ERROR, \"invalid umask value %s\", mask);\n+\t\t\treturn;\n+\t\t}\n+\t\tumask_val = umask_long & 0777;\n+\t}\n+\telse {\n+\t\tbool need_or = false;\n+\t\tfor (i = 1; i < vector_size(strvec); i++) {\n+\t\t\tfor (p = strvec_slot(strvec, i); *p; ) {\n+\t\t\t\tif (need_or) {\n+\t\t\t\t\tif (*p == '|') {\n+\t\t\t\t\t\tneed_or = false;\n+\t\t\t\t\t\tp++;\n+\t\t\t\t\t\tcontinue;\n+\t\t\t\t\t}\n+\n+\t\t\t\t\treport_config_error(CONFIG_GENERAL_ERROR, \"Invalid umask syntax %s\", FMT_STR_VSLOT(strvec, i));\n+\t\t\t\t\treturn;\n+\t\t\t\t}\n+\n+\t\t\t\tif      (!strncmp(p, \"IRUSR\", 5)) umask_val |= S_IRUSR;\n+\t\t\t\telse if (!strncmp(p, \"IWUSR\", 5)) umask_val |= S_IWUSR;\n+\t\t\t\telse if (!strncmp(p, \"IXUSR\", 5)) umask_val |= S_IXUSR;\n+\t\t\t\telse if (!strncmp(p, \"IRGRP\", 5)) umask_val |= S_IRGRP;\n+\t\t\t\telse if (!strncmp(p, \"IWGRP\", 5)) umask_val |= S_IWGRP;\n+\t\t\t\telse if (!strncmp(p, \"IXGRP\", 5)) umask_val |= S_IXGRP;\n+\t\t\t\telse if (!strncmp(p, \"IROTH\", 5)) umask_val |= S_IROTH;\n+\t\t\t\telse if (!strncmp(p, \"IWOTH\", 5)) umask_val |= S_IWOTH;\n+\t\t\t\telse if (!strncmp(p, \"IXOTH\", 5)) umask_val |= S_IXOTH;\n+\t\t\t\telse {\n+\t\t\t\t\treport_config_error(CONFIG_GENERAL_ERROR, \"Unknown umask bit %s\", p);\n+\t\t\t\t\treturn;\n+\t\t\t\t}\n+\n+\t\t\t\tp += 5;\n+\t\t\t\tneed_or = true;\n+\t\t\t}\n+\t\t}\n+\t\tif (!need_or) {\n+\t\t\treport_config_error(CONFIG_GENERAL_ERROR, \"umask missing bit value\");\n+\t\t\treturn;\n+\t\t}\n+\t}\n+\n+\tglobal_data->umask = umask_val;\n+\tumask(umask_val);\n+}\n+\n void\n init_global_keywords(bool global_active)\n {\n@@ -1483,4 +1555,5 @@ init_global_keywords(bool global_active)\n \tinstall_keyword(\"vrrp_rx_bufs_policy\", &vrrp_rx_bufs_policy_handler);\n \tinstall_keyword(\"vrrp_rx_bufs_multiplier\", &vrrp_rx_bufs_multiplier_handler);\n #endif\n+\tinstall_keyword(\"umask\", &umask_handler);\n }"
    },
    "modified_file_5": {
        "mod_filename": "keepalived/core/main.c",
        "status": "modified",
        "add_lines": 40,
        "dele_lines": 4,
        "patch": "@@ -33,6 +33,7 @@\n #include <signal.h>\n #include <fcntl.h>\n #include <sys/wait.h>\n+#include <sys/types.h>\n #include <sys/stat.h>\n #include <unistd.h>\n #include <getopt.h>\n@@ -155,6 +156,10 @@ static struct {\n };\n #define\tLOG_FACILITY_MAX\t((sizeof(LOG_FACILITY) / sizeof(LOG_FACILITY[0])) - 1)\n \n+/* umask settings */\n+bool umask_cmdline;\n+static mode_t umask_val = S_IXUSR | S_IWGRP | S_IXGRP | S_IWOTH | S_IXOTH;\n+\n /* Control producing core dumps */\n static bool set_core_dump_pattern = false;\n static bool create_core_dump = false;\n@@ -866,6 +871,28 @@ core_dump_init(void)\n \t}\n }\n \n+static mode_t\n+set_umask(const char *optarg)\n+{\n+\tlong umask_long;\n+\tmode_t umask_val;\n+\tchar *endptr;\n+\n+\tumask_long = strtoll(optarg, &endptr, 0);\n+\n+\tif (*endptr || umask_long < 0 || umask_long & ~0777L) {\n+\t\tfprintf(stderr, \"Invalid --umask option %s\", optarg);\n+\t\treturn;\n+\t}\n+\n+\tumask_val = umask_long & 0777;\n+\tumask(umask_val);\n+\n+\tumask_cmdline = true;\n+\n+\treturn umask_val;\n+}\n+\n void\n initialise_debug_options(void)\n {\n@@ -1090,6 +1117,7 @@ usage(const char *prog)\n \tfprintf(stderr, \"  -g, --log-file=FILE          Also log to FILE (default /tmp/keepalived.log)\\n\");\n \tfprintf(stderr, \"      --flush-log-file         Flush log file on write\\n\");\n \tfprintf(stderr, \"  -G, --no-syslog              Don't log via syslog\\n\");\n+\tfprintf(stderr, \"  -u, --umask=MASK             umask for file creation (in numeric form)\\n\");\n #ifdef _WITH_VRRP_\n \tfprintf(stderr, \"  -X, --release-vips           Drop VIP on transition from signal.\\n\");\n \tfprintf(stderr, \"  -V, --dont-release-vrrp      Don't remove VRRP VIPs and VROUTEs on daemon stop\\n\");\n@@ -1183,6 +1211,7 @@ parse_cmdline(int argc, char **argv)\n \tint curind;\n \tbool bad_option = false;\n \tunsigned facility;\n+\tmode_t new_umask_val;\n \n \tstruct option long_options[] = {\n \t\t{\"use-file\",\t\trequired_argument,\tNULL, 'f'},\n@@ -1200,6 +1229,7 @@ parse_cmdline(int argc, char **argv)\n \t\t{\"log-file\",\t\toptional_argument,\tNULL, 'g'},\n \t\t{\"flush-log-file\",\tno_argument,\t\tNULL,  2 },\n \t\t{\"no-syslog\",\t\tno_argument,\t\tNULL, 'G'},\n+\t\t{\"umask\",\t\trequired_argument,\tNULL, 'u'},\n #ifdef _WITH_VRRP_\n \t\t{\"release-vips\",\tno_argument,\t\tNULL, 'X'},\n \t\t{\"dont-release-vrrp\",\tno_argument,\t\tNULL, 'V'},\n@@ -1252,7 +1282,7 @@ parse_cmdline(int argc, char **argv)\n \t * of longindex, so we need to ensure that before calling getopt_long(), longindex\n \t * is set to a known invalid value */\n \tcurind = optind;\n-\twhile (longindex = -1, (c = getopt_long(argc, argv, \":vhlndDRS:f:p:i:mM::g::Gt::\"\n+\twhile (longindex = -1, (c = getopt_long(argc, argv, \":vhlndu:DRS:f:p:i:mM::g::Gt::\"\n #if defined _WITH_VRRP_ && defined _WITH_LVS_\n \t\t\t\t\t    \"PC\"\n #endif\n@@ -1358,6 +1388,11 @@ parse_cmdline(int argc, char **argv)\n \t\t\t__set_bit(NO_SYSLOG_BIT, &debug);\n \t\t\treopen_log = true;\n \t\t\tbreak;\n+\t\tcase 'u':\n+\t\t\tnew_umask_val = set_umask(optarg);\n+\t\t\tif (umask_cmdline)\n+\t\t\t\tumask_val = new_umask_val;\n+\t\t\tbreak;\n \t\tcase 't':\n \t\t\t__set_bit(CONFIG_TEST_BIT, &debug);\n \t\t\t__set_bit(DONT_RESPAWN_BIT, &debug);\n@@ -1582,6 +1617,9 @@ keepalived_main(int argc, char **argv)\n \t__set_bit(DAEMON_BFD, &daemon_mode);\n #endif\n \n+\t/* Set default file creation mask */\n+\tumask(022);\n+\n \t/* Open log with default settings so we can log initially */\n \topenlog(PACKAGE_NAME, LOG_PID, log_facility);\n \n@@ -1678,6 +1716,7 @@ keepalived_main(int argc, char **argv)\n \t}\n \n \tglobal_data = alloc_global_data();\n+\tglobal_data->umask = umask_val;\n \n \tread_config_file();\n \n@@ -1809,9 +1848,6 @@ keepalived_main(int argc, char **argv)\n \t\texit(0);\n \t}\n \n-\t/* Set file creation mask */\n-\tumask(0);\n-\n #ifdef _MEM_CHECK_\n \tenable_mem_log_termination();\n #endif"
    },
    "modified_file_6": {
        "mod_filename": "keepalived/include/global_data.h",
        "status": "modified",
        "add_lines": 1,
        "dele_lines": 0,
        "patch": "@@ -213,6 +213,7 @@ typedef struct _data {\n \tsize_t\t\t\t\tvrrp_rx_bufs_size;\n \tint\t\t\t\tvrrp_rx_bufs_multiples;\n #endif\n+\tmode_t\t\t\t\tumask;\t\t\t/* mask for file creation */\n } data_t;\n \n /* Global vars exported */"
    },
    "modified_file_7": {
        "mod_filename": "keepalived/include/main.h",
        "status": "modified",
        "add_lines": 1,
        "dele_lines": 0,
        "patch": "@@ -96,5 +96,6 @@ extern void initialise_debug_options(void);\n extern int keepalived_main(int, char**); /* The \"real\" main function */\n \n extern unsigned child_wait_time;\n+extern bool umask_cmdline;\n \n #endif"
    }
}