{
    "current_hash": "47c33179f9a15ae95cc1579a421be89378602656",
    "parent_hash": "f5b79d7e6bbd3fd92c91375c16357753c45cf8aa",
    "modified_file_0": {
        "mod_filename": "src/ceph-volume/ceph_volume/tests/util/test_encryption.py",
        "status": "modified",
        "add_lines": 28,
        "dele_lines": 13,
        "patch": "@@ -1,5 +1,31 @@\n from ceph_volume.util import encryption\n+import base64\n \n+class TestGetKeySize(object):\n+    def test_get_size_from_conf_default(self, conf_ceph_stub):\n+        conf_ceph_stub('''\n+        [global]\n+        fsid=asdf\n+        ''')\n+        assert encryption.get_key_size_from_conf() == '512'\n+\n+    def test_get_size_from_conf_custom(self, conf_ceph_stub):\n+        conf_ceph_stub('''\n+        [global]\n+        fsid=asdf\n+        [osd]\n+        osd_dmcrypt_key_size=256\n+        ''')\n+        assert encryption.get_key_size_from_conf() == '256'\n+\n+    def test_get_size_from_conf_custom_invalid(self, conf_ceph_stub):\n+        conf_ceph_stub('''\n+        [global]\n+        fsid=asdf\n+        [osd]\n+        osd_dmcrypt_key_size=1024\n+        ''')\n+        assert encryption.get_key_size_from_conf() == '512'\n \n class TestStatus(object):\n \n@@ -37,17 +63,6 @@ def test_mapper_does_not_exist(self, fake_run):\n \n class TestDmcryptKey(object):\n \n-    def test_dmcrypt_with_default_size(self, conf_ceph_stub):\n-        conf_ceph_stub('[global]\\nfsid=asdf-lkjh')\n-        result = encryption.create_dmcrypt_key()\n-        assert len(result) == 172\n-\n-    def test_dmcrypt_with_custom_size(self, conf_ceph_stub):\n-        conf_ceph_stub('''\n-        [global]\n-        fsid=asdf\n-        [osd]\n-        osd_dmcrypt_size=8\n-        ''')\n+    def test_dmcrypt(self):\n         result = encryption.create_dmcrypt_key()\n-        assert len(result) == 172\n+        assert len(base64.b64decode(result)) == 128"
    },
    "modified_file_1": {
        "mod_filename": "src/ceph-volume/ceph_volume/util/encryption.py",
        "status": "modified",
        "add_lines": 23,
        "dele_lines": 11,
        "patch": "@@ -9,21 +9,29 @@\n \n logger = logging.getLogger(__name__)\n \n-\n-def create_dmcrypt_key():\n+def get_key_size_from_conf():\n     \"\"\"\n-    Create the secret dm-crypt key used to decrypt a device.\n+    Return the osd dmcrypt key size from config file.\n+    Default is 512.\n     \"\"\"\n-    # get the customizable dmcrypt key size (in bits) from ceph.conf fallback\n-    # to the default of 1024\n-    dmcrypt_key_size = conf.ceph.get_safe(\n+    default_key_size = '512'\n+    key_size = conf.ceph.get_safe(\n         'osd',\n         'osd_dmcrypt_key_size',\n-        default=1024,\n-    )\n-    # The size of the key is defined in bits, so we must transform that\n-    # value to bytes (dividing by 8) because we read in bytes, not bits\n-    random_string = os.urandom(int(dmcrypt_key_size / 8))\n+        default='512')\n+\n+    if key_size not in ['256', '512']:\n+        logger.warning((\"Invalid value set for osd_dmcrypt_key_size ({}). \"\n+                        \"Falling back to {}bits\".format(key_size, default_key_size)))\n+        return default_key_size\n+\n+    return key_size\n+\n+def create_dmcrypt_key():\n+    \"\"\"\n+    Create the secret dm-crypt key (KEK) used to encrypt/decrypt the Volume Key.\n+    \"\"\"\n+    random_string = os.urandom(128)\n     key = base64.b64encode(random_string).decode('utf-8')\n     return key\n \n@@ -38,6 +46,8 @@ def luks_format(key, device):\n     command = [\n         'cryptsetup',\n         '--batch-mode', # do not prompt\n+        '--key-size',\n+        get_key_size_from_conf(),\n         '--key-file', # misnomer, should be key\n         '-',          # because we indicate stdin for the key here\n         'luksFormat',\n@@ -83,6 +93,8 @@ def luks_open(key, device, mapping):\n     \"\"\"\n     command = [\n         'cryptsetup',\n+        '--key-size',\n+        get_key_size_from_conf(),\n         '--key-file',\n         '-',\n         '--allow-discards',  # allow discards (aka TRIM) requests for device"
    }
}