{
    "current_hash": "1f55d2e12f62cfdfbf9da6968fde2f928982670b",
    "parent_hash": "9dc7653ddce1ceeba173d8311facc632b9c30b75",
    "modified_file_0": {
        "mod_filename": "libcef/browser/osr/host_display_client_osr.cc",
        "status": "modified",
        "add_lines": 14,
        "dele_lines": 5,
        "patch": "@@ -75,15 +75,24 @@ void CefLayeredWindowUpdaterOSR::OnAllocatedSharedMemory(\n     base::UnsafeSharedMemoryRegion region) {\n   // Make sure |pixel_size| is sane.\n   size_t expected_bytes;\n-  bool size_result = viz::ResourceSizes::MaybeSizeInBytes(\n-      pixel_size, viz::SinglePlaneFormat::kRGBA_8888, &expected_bytes);\n-  if (!size_result) {\n+  if (!viz::ResourceSizes::MaybeSizeInBytes(\n+          pixel_size, viz::SinglePlaneFormat::kRGBA_8888, &expected_bytes)) {\n+    DLOG(ERROR) << \"OnAllocatedSharedMemory with size that overflows\";\n+    return;\n+  }\n+\n+  auto mapping = region.Map();\n+  if (!mapping.IsValid()) {\n+    DLOG(ERROR) << \"Shared memory mapping failed.\";\n+    return;\n+  }\n+  if (mapping.size() < expected_bytes) {\n+    DLOG(ERROR) << \"Shared memory size was less than expected.\";\n     return;\n   }\n \n   pixel_size_ = pixel_size;\n-  shared_memory_ = region.Map();\n-  DCHECK(shared_memory_.IsValid());\n+  shared_memory_ = std::move(mapping);\n }\n \n void CefLayeredWindowUpdaterOSR::Draw(const gfx::Rect& damage_rect,"
    },
    "modified_file_1": {
        "mod_filename": "libcef/browser/osr/video_consumer_osr.cc",
        "status": "modified",
        "add_lines": 5,
        "dele_lines": 0,
        "patch": "@@ -88,6 +88,11 @@ void CefVideoConsumerOSR::OnFrameCaptured(\n         callbacks) {\n   ScopedVideoFrameDone scoped_done(std::move(callbacks));\n \n+  if (info->pixel_format != media::PIXEL_FORMAT_ARGB) {\n+    DLOG(ERROR) << \"Unsupported pixel format \" << info->pixel_format;\n+    return;\n+  }\n+\n   CHECK(data->is_read_only_shmem_region());\n   base::ReadOnlySharedMemoryRegion& shmem_region =\n       data->get_read_only_shmem_region();"
    }
}