{
    "current_hash": "aafa80918a245edcbdaceb1191d749570f1872d0",
    "parent_hash": "c39dffe83db9fa3cfa6897b971956821f1bbcce2",
    "modified_file_0": {
        "mod_filename": "libpod/oci_conmon_exec_linux.go",
        "status": "modified",
        "add_lines": 5,
        "dele_lines": 2,
        "patch": "@@ -758,11 +758,14 @@ func prepareProcessExec(c *Container, options *ExecOptions, env []string, sessio\n \t} else {\n \t\tpspec.Capabilities.Bounding = ctrSpec.Process.Capabilities.Bounding\n \t}\n+\n+\t// Always unset the inheritable capabilities similarly to what the Linux kernel does\n+\t// They are used only when using capabilities with uid != 0.\n+\tpspec.Capabilities.Inheritable = []string{}\n+\n \tif execUser.Uid == 0 {\n \t\tpspec.Capabilities.Effective = pspec.Capabilities.Bounding\n-\t\tpspec.Capabilities.Inheritable = pspec.Capabilities.Bounding\n \t\tpspec.Capabilities.Permitted = pspec.Capabilities.Bounding\n-\t\tpspec.Capabilities.Ambient = pspec.Capabilities.Bounding\n \t} else {\n \t\tif user == c.config.User {\n \t\t\tpspec.Capabilities.Effective = ctrSpec.Process.Capabilities.Effective"
    },
    "modified_file_1": {
        "mod_filename": "pkg/specgen/generate/security.go",
        "status": "modified",
        "add_lines": 5,
        "dele_lines": 2,
        "patch": "@@ -146,14 +146,17 @@ func securityConfigureGenerator(s *specgen.SpecGenerator, g *generate.Generator,\n \n \tconfigSpec := g.Config\n \tconfigSpec.Process.Capabilities.Ambient = []string{}\n+\n+\t// Always unset the inheritable capabilities similarly to what the Linux kernel does\n+\t// They are used only when using capabilities with uid != 0.\n+\tconfigSpec.Process.Capabilities.Inheritable = []string{}\n \tconfigSpec.Process.Capabilities.Bounding = caplist\n \n \tuser := strings.Split(s.User, \":\")[0]\n \n \tif (user == \"\" && s.UserNS.NSMode != specgen.KeepID) || user == \"root\" || user == \"0\" {\n \t\tconfigSpec.Process.Capabilities.Effective = caplist\n \t\tconfigSpec.Process.Capabilities.Permitted = caplist\n-\t\tconfigSpec.Process.Capabilities.Inheritable = caplist\n \t} else {\n \t\tmergedCaps, err := capabilities.MergeCapabilities(nil, s.CapAdd, nil)\n \t\tif err != nil {\n@@ -175,12 +178,12 @@ func securityConfigureGenerator(s *specgen.SpecGenerator, g *generate.Generator,\n \t\t}\n \t\tconfigSpec.Process.Capabilities.Effective = userCaps\n \t\tconfigSpec.Process.Capabilities.Permitted = userCaps\n-\t\tconfigSpec.Process.Capabilities.Inheritable = userCaps\n \n \t\t// Ambient capabilities were added to Linux 4.3.  Set ambient\n \t\t// capabilities only when the kernel supports them.\n \t\tif supportAmbientCapabilities() {\n \t\t\tconfigSpec.Process.Capabilities.Ambient = userCaps\n+\t\t\tconfigSpec.Process.Capabilities.Inheritable = userCaps\n \t\t}\n \t}\n "
    },
    "modified_file_2": {
        "mod_filename": "test/e2e/run_test.go",
        "status": "modified",
        "add_lines": 3,
        "dele_lines": 3,
        "patch": "@@ -498,7 +498,7 @@ var _ = Describe(\"Podman run\", func() {\n \t\tsession = podmanTest.Podman([]string{\"run\", \"--rm\", \"--user\", \"root\", ALPINE, \"grep\", \"CapInh\", \"/proc/self/status\"})\n \t\tsession.WaitWithDefaultTimeout()\n \t\tExpect(session).Should(Exit(0))\n-\t\tExpect(session.OutputToString()).To(ContainSubstring(\"00000000a80425fb\"))\n+\t\tExpect(session.OutputToString()).To(ContainSubstring(\"0000000000000000\"))\n \n \t\tsession = podmanTest.Podman([]string{\"run\", \"--rm\", ALPINE, \"grep\", \"CapBnd\", \"/proc/self/status\"})\n \t\tsession.WaitWithDefaultTimeout()\n@@ -533,7 +533,7 @@ var _ = Describe(\"Podman run\", func() {\n \t\tsession = podmanTest.Podman([]string{\"run\", \"--user=0:0\", \"--cap-add=DAC_OVERRIDE\", \"--rm\", ALPINE, \"grep\", \"CapInh\", \"/proc/self/status\"})\n \t\tsession.WaitWithDefaultTimeout()\n \t\tExpect(session).Should(Exit(0))\n-\t\tExpect(session.OutputToString()).To(ContainSubstring(\"00000000a80425fb\"))\n+\t\tExpect(session.OutputToString()).To(ContainSubstring(\"0000000000000000\"))\n \n \t\tif os.Geteuid() > 0 {\n \t\t\tif os.Getenv(\"SKIP_USERNS\") != \"\" {\n@@ -550,7 +550,7 @@ var _ = Describe(\"Podman run\", func() {\n \t\t\tsession = podmanTest.Podman([]string{\"run\", \"--userns=keep-id\", \"--privileged\", \"--rm\", ALPINE, \"grep\", \"CapInh\", \"/proc/self/status\"})\n \t\t\tsession.WaitWithDefaultTimeout()\n \t\t\tExpect(session).Should(Exit(0))\n-\t\t\tExpect(session.OutputToString()).To(ContainSubstring(\"0000000000000000\"))\n+\t\t\tExpect(session.OutputToString()).To(ContainSubstring(\"0000000000000002\"))\n \n \t\t\tsession = podmanTest.Podman([]string{\"run\", \"--userns=keep-id\", \"--cap-add=DAC_OVERRIDE\", \"--rm\", ALPINE, \"grep\", \"CapInh\", \"/proc/self/status\"})\n \t\t\tsession.WaitWithDefaultTimeout()"
    }
}