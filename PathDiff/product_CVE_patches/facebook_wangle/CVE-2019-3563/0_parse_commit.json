{
    "current_hash": "5b3bceca875e4ea4ed9d14c20b20ce46c92c13c6",
    "parent_hash": "1df008b54413135ae861b5bc129b36fc42bb99fe",
    "modified_file_0": {
        "mod_filename": "wangle/codec/LineBasedFrameDecoder.cpp",
        "status": "modified",
        "add_lines": 3,
        "dele_lines": 2,
        "patch": "@@ -97,8 +97,9 @@ int64_t LineBasedFrameDecoder::findEndOfLine(IOBufQueue& buf) {\n     auto b = c.read<char>();\n     if (b == '\\n' && terminatorType_ != TerminatorType::CARRIAGENEWLINE) {\n       return i;\n-    } else if (terminatorType_ != TerminatorType::NEWLINE &&\n-               b == '\\r' && !c.isAtEnd() && c.read<char>() == '\\n') {\n+    } else if (\n+        terminatorType_ != TerminatorType::NEWLINE && b == '\\r' &&\n+        !c.isAtEnd() && *c.peekBytes().data() == '\\n') {\n       return i;\n     }\n   }"
    },
    "modified_file_1": {
        "mod_filename": "wangle/codec/test/CodecTest.cpp",
        "status": "modified",
        "add_lines": 34,
        "dele_lines": 0,
        "patch": "@@ -606,3 +606,37 @@ TEST(LineBasedFrameDecoder, CarriageNewLineOnly) {\n   pipeline->read(q);\n   EXPECT_EQ(called, 1);\n }\n+\n+TEST(LineBasedFrameDecoder, CarriageOnly) {\n+  auto pipeline = Pipeline<IOBufQueue&, std::unique_ptr<IOBuf>>::create();\n+\n+  (*pipeline)\n+      .addBack(LineBasedFrameDecoder(\n+          10, true, LineBasedFrameDecoder::TerminatorType::CARRIAGENEWLINE))\n+      .addBack(test::FrameTester([&](std::unique_ptr<IOBuf>) { FAIL(); }))\n+      .finalize();\n+\n+  IOBufQueue q(IOBufQueue::cacheChainLength());\n+  q.append(IOBuf::copyBuffer(\"\\raa\"));\n+  pipeline->read(q);\n+}\n+\n+TEST(LineBasedFrameDecoder, DoubleCarriage) {\n+  auto pipeline = Pipeline<IOBufQueue&, std::unique_ptr<IOBuf>>::create();\n+  int called = 0;\n+\n+  (*pipeline)\n+      .addBack(LineBasedFrameDecoder(\n+          10, true, LineBasedFrameDecoder::TerminatorType::CARRIAGENEWLINE))\n+      .addBack(test::FrameTester([&](std::unique_ptr<IOBuf> buf) {\n+        auto sz = buf->computeChainDataLength();\n+        called++;\n+        EXPECT_EQ(sz, 1);\n+      }))\n+      .finalize();\n+\n+  IOBufQueue q(IOBufQueue::cacheChainLength());\n+  q.append(IOBuf::copyBuffer(\"\\r\\r\\na\\r\\n\"));\n+  pipeline->read(q);\n+  EXPECT_EQ(called, 2);\n+}"
    }
}