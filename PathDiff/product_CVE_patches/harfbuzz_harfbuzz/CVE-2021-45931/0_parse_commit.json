{
    "current_hash": "d3e09bf4654fe5478b6dbf2b26ebab6271317d81",
    "parent_hash": "65c622c6892dcbe44996962a748f13569600d389",
    "modified_file_0": {
        "mod_filename": "src/hb-bit-set-invertible.hh",
        "status": "modified",
        "add_lines": 30,
        "dele_lines": 8,
        "patch": "@@ -46,9 +46,22 @@ struct hb_bit_set_invertible_t\n   bool in_error () const { return s.in_error (); }\n   explicit operator bool () const { return !is_empty (); }\n \n-  void reset () { s.reset (); inverted = false; }\n-  void clear () { s.clear (); inverted = false; }\n-  void invert () { inverted = !inverted; }\n+  void reset ()\n+  {\n+    s.reset ();\n+    inverted = false;\n+  }\n+  void clear ()\n+  {\n+    s.clear ();\n+    if (likely (s.successful))\n+      inverted = false;\n+  }\n+  void invert ()\n+  {\n+    if (likely (s.successful))\n+      inverted = !inverted;\n+  }\n \n   bool is_empty () const\n   {\n@@ -116,7 +129,12 @@ struct hb_bit_set_invertible_t\n     return next (&c) && c <= last;\n   }\n \n-  void set (const hb_bit_set_invertible_t &other) { s.set (other.s); inverted = other.inverted; }\n+  void set (const hb_bit_set_invertible_t &other)\n+  {\n+    s.set (other.s);\n+    if (likely (s.successful))\n+      inverted = other.inverted;\n+  }\n \n   bool is_equal (const hb_bit_set_invertible_t &other) const\n   {\n@@ -161,7 +179,8 @@ struct hb_bit_set_invertible_t\n       else\n \tprocess (hb_bitwise_lt, other);\n     }\n-    inverted = inverted || other.inverted;\n+    if (likely (s.successful))\n+      inverted = inverted || other.inverted;\n   }\n   void intersect (const hb_bit_set_invertible_t &other)\n   {\n@@ -179,7 +198,8 @@ struct hb_bit_set_invertible_t\n       else\n \tprocess (hb_bitwise_gt, other);\n     }\n-    inverted = inverted && other.inverted;\n+    if (likely (s.successful))\n+      inverted = inverted && other.inverted;\n   }\n   void subtract (const hb_bit_set_invertible_t &other)\n   {\n@@ -197,12 +217,14 @@ struct hb_bit_set_invertible_t\n       else\n \tprocess (hb_bitwise_and, other);\n     }\n-    inverted = inverted && !other.inverted;\n+    if (likely (s.successful))\n+      inverted = inverted && !other.inverted;\n   }\n   void symmetric_difference (const hb_bit_set_invertible_t &other)\n   {\n     process (hb_bitwise_xor, other);\n-    inverted = inverted ^ other.inverted;\n+    if (likely (s.successful))\n+      inverted = inverted ^ other.inverted;\n   }\n \n   bool next (hb_codepoint_t *codepoint) const"
    },
    "modified_file_1": {
        "mod_filename": "src/hb-map.cc",
        "status": "modified",
        "add_lines": 0,
        "dele_lines": 3,
        "patch": "@@ -255,9 +255,6 @@ hb_map_has (const hb_map_t *map,\n void\n hb_map_clear (hb_map_t *map)\n {\n-  if (unlikely (hb_object_is_immutable (map)))\n-    return;\n-\n   return map->clear ();\n }\n "
    },
    "modified_file_2": {
        "mod_filename": "src/hb-map.hh",
        "status": "modified",
        "add_lines": 2,
        "dele_lines": 0,
        "patch": "@@ -169,6 +169,8 @@ struct hb_hashmap_t\n \n   void clear ()\n   {\n+    if (unlikely (!successful)) return;\n+\n     if (items)\n       for (auto &_ : hb_iter (items, mask + 1))\n \t_.clear ();"
    },
    "modified_file_3": {
        "mod_filename": "src/hb-set.cc",
        "status": "modified",
        "add_lines": 7,
        "dele_lines": 21,
        "patch": "@@ -201,9 +201,7 @@ hb_set_copy (const hb_set_t *set)\n void\n hb_set_clear (hb_set_t *set)\n {\n-  if (unlikely (hb_object_is_immutable (set)))\n-    return;\n-\n+  /* Immutible-safe. */\n   set->clear ();\n }\n \n@@ -368,9 +366,7 @@ void\n hb_set_set (hb_set_t       *set,\n \t    const hb_set_t *other)\n {\n-  if (unlikely (hb_object_is_immutable (set)))\n-    return;\n-\n+  /* Immutible-safe. */\n   set->set (*other);\n }\n \n@@ -387,9 +383,7 @@ void\n hb_set_union (hb_set_t       *set,\n \t      const hb_set_t *other)\n {\n-  if (unlikely (hb_object_is_immutable (set)))\n-    return;\n-\n+  /* Immutible-safe. */\n   set->union_ (*other);\n }\n \n@@ -406,9 +400,7 @@ void\n hb_set_intersect (hb_set_t       *set,\n \t\t  const hb_set_t *other)\n {\n-  if (unlikely (hb_object_is_immutable (set)))\n-    return;\n-\n+  /* Immutible-safe. */\n   set->intersect (*other);\n }\n \n@@ -425,9 +417,7 @@ void\n hb_set_subtract (hb_set_t       *set,\n \t\t const hb_set_t *other)\n {\n-  if (unlikely (hb_object_is_immutable (set)))\n-    return;\n-\n+  /* Immutible-safe. */\n   set->subtract (*other);\n }\n \n@@ -445,9 +435,7 @@ void\n hb_set_symmetric_difference (hb_set_t       *set,\n \t\t\t     const hb_set_t *other)\n {\n-  if (unlikely (hb_object_is_immutable (set)))\n-    return;\n-\n+  /* Immutible-safe. */\n   set->symmetric_difference (*other);\n }\n \n@@ -462,9 +450,7 @@ hb_set_symmetric_difference (hb_set_t       *set,\n void\n hb_set_invert (hb_set_t *set)\n {\n-  if (unlikely (hb_object_is_immutable (set)))\n-    return;\n-\n+  /* Immutible-safe. */\n   set->invert ();\n }\n "
    }
}