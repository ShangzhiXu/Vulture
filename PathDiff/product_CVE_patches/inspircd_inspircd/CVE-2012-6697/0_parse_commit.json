{
    "current_hash": "58c893e834ff20495d007709220881a3ff13f423",
    "parent_hash": "ed28c1ba666b39581adb860bf51cdde43c84cc89",
    "modified_file_0": {
        "mod_filename": "src/dns.cpp",
        "status": "modified",
        "add_lines": 9,
        "dele_lines": 2,
        "patch": "@@ -800,6 +800,8 @@ DNSInfo DNSRequest::ResultIsReady(DNSHeader &header, unsigned length)\n \t\t */\n \t\tcase DNS_QUERY_CNAME:\n \t\tcase DNS_QUERY_PTR:\n+\t\t{\n+\t\t\tunsigned short lowest_pos = length;\n \t\t\to = 0;\n \t\t\tq = 0;\n \t\t\twhile (q == 0 && i < length && o + 256 < 1023)\n@@ -812,14 +814,18 @@ DNSInfo DNSRequest::ResultIsReady(DNSHeader &header, unsigned length)\n \t\t\t\t\ti = ntohs(ptr);\n \n \t\t\t\t\t/* check that highest two bits are set. if not, we've been had */\n-\t\t\t\t\tif (!(i & DN_COMP_BITMASK))\n+\t\t\t\t\tif ((i & DN_COMP_BITMASK) != DN_COMP_BITMASK)\n \t\t\t\t\t\treturn std::make_pair((unsigned char *) NULL, \"DN label decompression header is bogus\");\n \n \t\t\t\t\t/* mask away the two highest bits. */\n \t\t\t\t\ti &= ~DN_COMP_BITMASK;\n \n \t\t\t\t\t/* and decrease length by 12 bytes. */\n-\t\t\t\t\ti =- 12;\n+\t\t\t\t\ti -= 12;\n+\n+\t\t\t\t\tif (i >= lowest_pos)\n+\t\t\t\t\t\treturn std::make_pair((unsigned char *) NULL, \"Invalid decompression pointer\");\n+\t\t\t\t\tlowest_pos = i;\n \t\t\t\t}\n \t\t\t\telse\n \t\t\t\t{\n@@ -843,6 +849,7 @@ DNSInfo DNSRequest::ResultIsReady(DNSHeader &header, unsigned length)\n \t\t\t\t}\n \t\t\t}\n \t\t\tres[o] = 0;\n+\t\t}\n \t\tbreak;\n \t\tcase DNS_QUERY_AAAA:\n \t\t\tif (rr.rdlength != sizeof(struct in6_addr))"
    }
}