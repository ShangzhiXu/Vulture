{
    "current_hash": "69f8e78c2f8d562bd6d8002b5488f1662ac30d24",
    "parent_hash": "8f76a1f38223cce4cf64064fc1b67670e1f4b806",
    "modified_file_0": {
        "mod_filename": "jerry-core/parser/js/js-scanner.c",
        "status": "modified",
        "add_lines": 30,
        "dele_lines": 26,
        "patch": "@@ -3159,42 +3159,48 @@ scanner_scan_all (parser_context_t *context_p, /**< context */\n   }\n   PARSER_CATCH\n   {\n-    /* Ignore the errors thrown by the lexer. */\n-    if (context_p->error != PARSER_ERR_OUT_OF_MEMORY)\n-    {\n-      context_p->error = PARSER_ERR_NO_ERROR;\n-    }\n-\n #if ENABLED (JERRY_ES2015)\n     while (scanner_context.active_binding_list_p != NULL)\n     {\n       scanner_pop_binding_list (&scanner_context);\n     }\n #endif /* ENABLED (JERRY_ES2015) */\n \n-    /* The following code may allocate memory, so it is enclosed in a try/catch. */\n-    PARSER_TRY (context_p->try_buffer)\n+    if (JERRY_UNLIKELY (context_p->error != PARSER_ERR_OUT_OF_MEMORY))\n     {\n-#if ENABLED (JERRY_ES2015)\n-      if (scanner_context.status_flags & SCANNER_CONTEXT_THROW_ERR_ASYNC_FUNCTION)\n+      /* Ignore the errors thrown by the lexer. */\n+      context_p->error = PARSER_ERR_NO_ERROR;\n+\n+      /* The following code may allocate memory, so it is enclosed in a try/catch. */\n+      PARSER_TRY (context_p->try_buffer)\n       {\n-        JERRY_ASSERT (scanner_context.async_source_p != NULL);\n+  #if ENABLED (JERRY_ES2015)\n+        if (scanner_context.status_flags & SCANNER_CONTEXT_THROW_ERR_ASYNC_FUNCTION)\n+        {\n+          JERRY_ASSERT (scanner_context.async_source_p != NULL);\n \n-        scanner_info_t *info_p;\n-        info_p = scanner_insert_info (context_p, scanner_context.async_source_p, sizeof (scanner_info_t));\n-        info_p->type = SCANNER_TYPE_ERR_ASYNC_FUNCTION;\n-      }\n-#endif /* ENABLED (JERRY_ES2015) */\n+          scanner_info_t *info_p;\n+          info_p = scanner_insert_info (context_p, scanner_context.async_source_p, sizeof (scanner_info_t));\n+          info_p->type = SCANNER_TYPE_ERR_ASYNC_FUNCTION;\n+        }\n+  #endif /* ENABLED (JERRY_ES2015) */\n \n-      while (scanner_context.active_literal_pool_p != NULL)\n+        while (scanner_context.active_literal_pool_p != NULL)\n+        {\n+          scanner_pop_literal_pool (context_p, &scanner_context);\n+        }\n+      }\n+      PARSER_CATCH\n       {\n-        scanner_pop_literal_pool (context_p, &scanner_context);\n+        JERRY_ASSERT (context_p->error == PARSER_ERR_OUT_OF_MEMORY);\n       }\n+      PARSER_TRY_END\n     }\n-    PARSER_CATCH\n-    {\n-      JERRY_ASSERT (context_p->error == PARSER_ERR_NO_ERROR);\n \n+    JERRY_ASSERT (context_p->error == PARSER_ERR_NO_ERROR || context_p->error == PARSER_ERR_OUT_OF_MEMORY);\n+\n+    if (context_p->error == PARSER_ERR_OUT_OF_MEMORY)\n+    {\n       while (scanner_context.active_literal_pool_p != NULL)\n       {\n         scanner_literal_pool_t *literal_pool_p = scanner_context.active_literal_pool_p;\n@@ -3204,12 +3210,10 @@ scanner_scan_all (parser_context_t *context_p, /**< context */\n         parser_list_free (&literal_pool_p->literal_pool);\n         scanner_free (literal_pool_p, sizeof (scanner_literal_pool_t));\n       }\n-    }\n-    PARSER_TRY_END\n \n-#if ENABLED (JERRY_ES2015)\n-    context_p->status_flags &= (uint32_t) ~PARSER_IS_GENERATOR_FUNCTION;\n-#endif /* ENABLED (JERRY_ES2015) */\n+      parser_stack_free (context_p);\n+      return;\n+    }\n   }\n   PARSER_TRY_END\n "
    }
}