{
    "current_hash": "4097828d7cc87589864fecf452f2cd46c5f37180",
    "parent_hash": "2b6b502f54f90da85758fbc34fb22ad8c3147fbc",
    "modified_file_0": {
        "mod_filename": "src/regparse.c",
        "status": "modified",
        "add_lines": 10,
        "dele_lines": 1,
        "patch": "@@ -6239,6 +6239,7 @@ parse_char_class(Node** np, PToken* tok, UChar** src, UChar* end, ScanEnv* env)\n   env->parse_depth++;\n   if (env->parse_depth > ParseDepthLimit)\n     return ONIGERR_PARSE_DEPTH_LIMIT_OVER;\n+\n   prev_cc = (CClassNode* )NULL;\n   r = fetch_token_in_cc(tok, src, end, env);\n   if (r == TK_CHAR && tok->u.c == '^' && tok->escaped == 0) {\n@@ -7820,14 +7821,18 @@ static int\n parse_exp(Node** np, PToken* tok, int term, UChar** src, UChar* end,\n           ScanEnv* env, int group_head)\n {\n-  int r, len, group = 0;\n+  int r, len, group;\n   Node* qn;\n   Node** tp;\n+  unsigned int parse_depth;\n \n+  group = 0;\n   *np = NULL;\n   if (tok->type == (enum TokenSyms )term)\n     goto end_of_token;\n \n+  parse_depth = env->parse_depth;\n+\n   switch (tok->type) {\n   case TK_ALT:\n   case TK_EOT:\n@@ -8145,6 +8150,10 @@ parse_exp(Node** np, PToken* tok, int term, UChar** src, UChar* end,\n       if (is_invalid_quantifier_target(*tp))\n         return ONIGERR_TARGET_OF_REPEAT_OPERATOR_INVALID;\n \n+      parse_depth++;\n+      if (parse_depth > ParseDepthLimit)\n+        return ONIGERR_PARSE_DEPTH_LIMIT_OVER;\n+\n       qn = node_new_quantifier(tok->u.repeat.lower, tok->u.repeat.upper,\n                                r == TK_INTERVAL);\n       CHECK_NULL_RETURN_MEMERR(qn);"
    }
}