{
    "current_hash": "720f7004d6c4aabee19aad16e7c456ed76a3ebfa",
    "parent_hash": "bfab0b0a72a8b1c233b09fe37afa1263f241ca03",
    "modified_file_0": {
        "mod_filename": "frontend/main.c",
        "status": "modified",
        "add_lines": 36,
        "dele_lines": 4,
        "patch": "@@ -25,7 +25,7 @@\n ** Commercial non-GPL licensing of this software is possible.\n ** For more info contact Nero AG through Mpeg4AAClicense@nero.com.\n **\n-** $Id: main.c,v 1.87 2012/03/02 15:28:44 knik Exp $\n+** $Id: main.c,v 1.88 2012/03/04 09:59:02 knik Exp $\n **/\n \n #ifdef _WIN32\n@@ -1109,9 +1109,9 @@ int main(int argc, char *argv[])\n     int mp4file = 0;\n     int noGapless = 0;\n     char *fnp;\n-    char aacFileName[255];\n-    char audioFileName[255];\n-    char adtsFileName[255];\n+    char *aacFileName = NULL;\n+    char *audioFileName = NULL;\n+    char *adtsFileName = NULL;\n     unsigned char header[8];\n     float length = 0;\n     FILE *hMP4File;\n@@ -1159,13 +1159,25 @@ int main(int argc, char *argv[])\n             if (optarg)\n             {\n                 outfile_set = 1;\n+                audioFileName = (char *) malloc(sizeof(char) * (strlen(optarg) + 1));\n+                if (audioFileName == NULL)\n+                {\n+                    faad_fprintf(stderr, \"Error allocating memory for audioFileName.\\n\");\n+                    return 1;\n+                }\n                 strcpy(audioFileName, optarg);\n             }\n             break;\n         case 'a':\n             if (optarg)\n             {\n                 adts_out = 1;\n+                adtsFileName = (char *) malloc(sizeof(char) * (strlen(optarg) + 1));\n+                if (adtsFileName == NULL)\n+                {\n+                    faad_fprintf(stderr, \"Error allocating memory for adtsFileName.\\n\");\n+                    return 1;\n+                }\n                 strcpy(adtsFileName, optarg);\n             }\n             break;\n@@ -1286,6 +1298,12 @@ int main(int argc, char *argv[])\n #endif\n \n     /* point to the specified file name */\n+    aacFileName = (char *) malloc(sizeof(char) * (strlen(argv[optind]) + 1));\n+    if (aacFileName == NULL)\n+    {\n+        faad_fprintf(stderr, \"Error allocating memory for aacFileName.\\n\");\n+        return 1;\n+    }\n     strcpy(aacFileName, argv[optind]);\n \n #ifdef _WIN32\n@@ -1299,6 +1317,12 @@ int main(int argc, char *argv[])\n      */\n     if(!writeToStdio && !outfile_set)\n     {\n+        audioFileName = (char *) malloc(sizeof(char) * (strlen(aacFileName) + strlen(file_ext[format]) + 1));\n+        if (audioFileName == NULL)\n+        {\n+            faad_fprintf(stderr, \"Error allocating memory for audioFileName.\\n\");\n+            return 1;\n+        }\n         strcpy(audioFileName, aacFileName);\n \n         fnp = (char *)strrchr(audioFileName,'.');\n@@ -1359,6 +1383,11 @@ int main(int argc, char *argv[])\n             old_format, &length);\n     }\n \n+    if (audioFileName != NULL)\n+      free (audioFileName);\n+    if (adtsFileName != NULL)\n+      free (adtsFileName);\n+\n     if (!result && !infoOnly)\n     {\n #ifdef _WIN32\n@@ -1374,5 +1403,8 @@ int main(int argc, char *argv[])\n             dec_length, length/dec_length);\n     }\n \n+    if (aacFileName != NULL)\n+      free (aacFileName);\n+\n     return 0;\n }"
    }
}