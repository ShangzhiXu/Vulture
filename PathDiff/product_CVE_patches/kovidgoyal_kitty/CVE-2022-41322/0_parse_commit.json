{
    "current_hash": "f05783e64d5fa62e1aed603e8d69aced5e49824f",
    "parent_hash": "c455fea72919aab26a2e82d8ea0e4353ab74c59c",
    "modified_file_0": {
        "mod_filename": "docs/changelog.rst",
        "status": "modified",
        "add_lines": 4,
        "dele_lines": 0,
        "patch": "@@ -56,6 +56,10 @@ Detailed list of changes\n \n - Wayland: Fix remembering window size not accurate when client side decorations are present\n \n+- Fix an issue where notification identifiers were not sanitized leading to\n+  code execution if the user clicked on a notification popup from a malicious\n+  source. Thanks to Carter Sande for discovering this vulnerability.\n+\n 0.26.1 [2022-08-30]\n ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n "
    },
    "modified_file_1": {
        "mod_filename": "kitty/notify.py",
        "status": "modified",
        "add_lines": 9,
        "dele_lines": 2,
        "patch": "@@ -1,13 +1,15 @@\n #!/usr/bin/env python3\n # License: GPLv3 Copyright: 2019, Kovid Goyal <kovid at kovidgoyal.net>\n \n+import re\n from base64 import standard_b64decode\n from collections import OrderedDict\n from itertools import count\n-from typing import Dict, Optional, Callable\n+from typing import Callable, Dict, Optional\n \n from .constants import is_macos, logo_png_file\n from .fast_data_types import get_boss\n+from .types import run_once\n from .utils import log_error\n \n NotifyImplementation = Callable[[str, str, str], None]\n@@ -92,6 +94,11 @@ def parse_osc_777(raw: str) -> NotificationCommand:\n     return ans\n \n \n+@run_once\n+def sanitize_identifier_pat() -> 're.Pattern[str]':\n+    return re.compile(r'[^a-zA-Z0-9-_+.]+')\n+\n+\n def parse_osc_99(raw: str) -> NotificationCommand:\n     cmd = NotificationCommand()\n     metadata, payload = raw.partition(';')[::2]\n@@ -107,7 +114,7 @@ def parse_osc_99(raw: str) -> NotificationCommand:\n             if k == 'p':\n                 payload_type = v\n             elif k == 'i':\n-                cmd.identifier = v\n+                cmd.identifier = sanitize_identifier_pat().sub('', v)\n             elif k == 'e':\n                 payload_is_encoded = v == '1'\n             elif k == 'd':"
    },
    "modified_file_2": {
        "mod_filename": "kitty/window.py",
        "status": "modified",
        "add_lines": 2,
        "dele_lines": 1,
        "patch": "@@ -41,7 +41,7 @@\n     update_window_title, update_window_visibility, wakeup_main_loop\n )\n from .keys import keyboard_mode_name, mod_mask\n-from .notify import NotificationCommand, handle_notification_cmd\n+from .notify import NotificationCommand, handle_notification_cmd, sanitize_identifier_pat\n from .options.types import Options\n from .rgb import to_color\n from .terminfo import get_capabilities\n@@ -1001,6 +1001,7 @@ def report_color(self, code: str, r: int, g: int, b: int) -> None:\n         self.screen.send_escape_code_to_child(OSC, f'{code};rgb:{r:04x}/{g:04x}/{b:04x}')\n \n     def report_notification_activated(self, identifier: str) -> None:\n+        identifier = sanitize_identifier_pat().sub('', identifier)\n         self.screen.send_escape_code_to_child(OSC, f'99;i={identifier};')\n \n     def set_dynamic_color(self, code: int, value: Union[str, bytes]) -> None:"
    },
    "modified_file_3": {
        "mod_filename": "kitty_tests/datatypes.py",
        "status": "modified",
        "add_lines": 4,
        "dele_lines": 0,
        "patch": "@@ -555,3 +555,7 @@ def test_single_key(self):\n         self.assertEqual(hash(SingleKey(key=1)), hash(SingleKey(key=1)))\n         self.assertNotEqual(hash(SingleKey(key=1, mods=2)), hash(SingleKey(key=1)))\n         self.assertNotEqual(SingleKey(key=1, mods=2), SingleKey(key=1))\n+\n+    def test_notify_identifier_sanitization(self):\n+        from kitty.notify import sanitize_identifier_pat\n+        self.ae(sanitize_identifier_pat().sub('', '\\x1b\\nabc\\n[*'), 'abc')"
    }
}