{
    "current_hash": "72e70a921f0f07fee748aec2274b30784e1d312a",
    "parent_hash": "631829ccad6946942f6d608aa4ebc046ac350a4e",
    "modified_file_0": {
        "mod_filename": "libmspack/ChangeLog",
        "status": "modified",
        "add_lines": 10,
        "dele_lines": 0,
        "patch": "@@ -1,3 +1,13 @@\n+2018-04-26  Stuart Caie <kyzer@cabextract.org.uk>\n+\n+\t* read_chunk(): the test that chunk numbers are in bounds was off\n+\tby one, so read_chunk() returned a pointer taken from outside\n+\tallocated memory that usually crashes libmspack when accessed.\n+\tThanks to Hanno B\u00f6ck for finding the issue and providing a sample.\n+\n+\t* chmd_read_headers(): reject files with blank filenames. Thanks\n+\tagain to Hanno B\u00f6ck for finding the issue and providing a sample file.\n+\n 2018-02-06  Stuart Caie <kyzer@cabextract.org.uk>\n \n \t* chmd.c: fixed an off-by-one error in the TOLOWER() macro, reported"
    },
    "modified_file_1": {
        "mod_filename": "libmspack/mspack/chmd.c",
        "status": "modified",
        "add_lines": 6,
        "dele_lines": 3,
        "patch": "@@ -1,5 +1,5 @@\n /* This file is part of libmspack.\n- * (C) 2003-2011 Stuart Caie.\n+ * (C) 2003-2018 Stuart Caie.\n  *\n  * libmspack is free software; you can redistribute it and/or modify it under\n  * the terms of the GNU Lesser General Public License (LGPL) version 2.1\n@@ -397,7 +397,7 @@ static int chmd_read_headers(struct mspack_system *sys, struct mspack_file *fh,\n     D((\"first pmgl chunk is after last pmgl chunk\"))\n     return MSPACK_ERR_DATAFORMAT;\n   }\n-  if (chm->index_root != 0xFFFFFFFF && chm->index_root > chm->num_chunks) {\n+  if (chm->index_root != 0xFFFFFFFF && chm->index_root >= chm->num_chunks) {\n     D((\"index_root outside valid range\"))\n     return MSPACK_ERR_DATAFORMAT;\n   }\n@@ -447,7 +447,10 @@ static int chmd_read_headers(struct mspack_system *sys, struct mspack_file *fh,\n     while (num_entries--) {\n       READ_ENCINT(name_len);\n       if (name_len > (unsigned int) (end - p)) goto chunk_end;\n+      /* consider blank filenames to be an error */\n+      if (name_len == 0) goto chunk_end;\n       name = p; p += name_len;\n+\n       READ_ENCINT(section);\n       READ_ENCINT(offset);\n       READ_ENCINT(length);\n@@ -622,7 +625,7 @@ static unsigned char *read_chunk(struct mschm_decompressor_p *self,\n     unsigned char *buf;\n \n     /* check arguments - most are already checked by chmd_fast_find */\n-    if (chunk_num > chm->num_chunks) return NULL;\n+    if (chunk_num >= chm->num_chunks) return NULL;\n     \n     /* ensure chunk cache is available */\n     if (!chm->chunk_cache) {"
    }
}