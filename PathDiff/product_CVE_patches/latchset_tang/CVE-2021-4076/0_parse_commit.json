{
    "current_hash": "e82459fda10f0630c3414ed2afbc6320bb9ea7c9",
    "parent_hash": "1d1874b40d38a0eef788dd630af0a08e0ecda899",
    "modified_file_0": {
        "mod_filename": "src/keys.c",
        "status": "modified",
        "add_lines": 16,
        "dele_lines": 15,
        "patch": "@@ -267,20 +267,7 @@ find_by_thp(struct tang_keys_info* tki, const char* target)\n             if (!thumbprint || strcmp(thumbprint, target) != 0) {\n                 continue;\n             }\n-\n-            if (jwk_valid_for_deriving_keys(jwk)) {\n-                return json_incref(jwk);\n-            } else if (jwk_valid_for_signing(jwk)) {\n-                json_auto_t* sign = json_deep_copy(tki->m_sign);\n-                if (json_array_append(sign, jwk) == -1) {\n-                    return NULL;\n-                }\n-                json_auto_t* jws = jwk_sign(tki->m_payload, sign);\n-                if (!jws) {\n-                    return NULL;\n-                }\n-                return json_incref(jws);\n-            }\n+            return json_incref(jwk);\n         }\n     }\n     return NULL;\n@@ -445,7 +432,21 @@ find_jws(struct tang_keys_info* tki, const char* thp)\n         }\n         return json_incref(jws);\n     }\n-    return find_by_thp(tki, thp);\n+\n+    json_auto_t* jwk = find_by_thp(tki, thp);\n+    if (!jwk_valid_for_signing(jwk)) {\n+        return NULL;\n+    }\n+\n+    json_auto_t* sign = json_deep_copy(tki->m_sign);\n+    if (json_array_append(sign, jwk) == -1) {\n+        return NULL;\n+    }\n+    json_auto_t* jws = jwk_sign(tki->m_payload, sign);\n+    if (!jws) {\n+        return NULL;\n+    }\n+    return json_incref(jws);\n }\n \n json_t*"
    },
    "modified_file_1": {
        "mod_filename": "tests/adv",
        "status": "modified",
        "add_lines": 8,
        "dele_lines": 8,
        "patch": "@@ -40,11 +40,11 @@ export PID=$!\n sleep 0.5\n \n # Make sure requests on the root fail\n-! fetch /\n+fetch / && expected_fail\n \n # The request should fail (404) for non-signature key IDs\n-! fetch /adv/`jose jwk thp -i $TMP/db/exc.jwk`\n-! fetch /adv/`jose jwk thp -a S512 -i $TMP/db/exc.jwk`\n+fetch /adv/`jose jwk thp -i $TMP/db/exc.jwk` && expected_fail\n+fetch /adv/`jose jwk thp -a S512 -i $TMP/db/exc.jwk` && expected_fail\n \n # The default advertisement fetch should succeed and pass verification\n fetch /adv\n@@ -56,17 +56,17 @@ fetch /adv/`jose jwk thp -i $TMP/db/sig.jwk` | ver $TMP/db/sig.jwk\n fetch /adv/`jose jwk thp -a S512 -i $TMP/db/sig.jwk` | ver $TMP/db/sig.jwk\n \n # Requesting an adv by an advertised key ID should't be signed by hidden keys\n-! fetch /adv/`jose jwk thp -i $TMP/db/sig.jwk` | ver $TMP/db/.sig.jwk\n-! fetch /adv/`jose jwk thp -i $TMP/db/sig.jwk` | ver $TMP/db/.oth.jwk\n+fetch /adv/`jose jwk thp -i $TMP/db/sig.jwk` | ver $TMP/db/.sig.jwk && expected_fail\n+fetch /adv/`jose jwk thp -i $TMP/db/sig.jwk` | ver $TMP/db/.oth.jwk && expected_fail\n \n # Verify that the default advertisement is not signed with hidden signature keys\n-! fetch /adv/ | ver $TMP/db/.oth.jwk\n-! fetch /adv/ | ver $TMP/db/.sig.jwk\n+fetch /adv/ | ver $TMP/db/.oth.jwk && expected_fail\n+fetch /adv/ | ver $TMP/db/.sig.jwk && expected_fail\n \n # A private key advertisement is signed by all advertised keys and the requested private key\n fetch /adv/`jose jwk thp -i $TMP/db/.sig.jwk` | ver $TMP/db/sig.jwk\n fetch /adv/`jose jwk thp -i $TMP/db/.sig.jwk` | ver $TMP/db/.sig.jwk\n-! fetch /adv/`jose jwk thp -i $TMP/db/.sig.jwk` | ver $TMP/db/.oth.jwk\n+fetch /adv/`jose jwk thp -i $TMP/db/.sig.jwk` | ver $TMP/db/.oth.jwk && expected_fail\n \n # Verify that the advertisements contain the cty parameter\n fetch /adv | jose fmt -j- -Og protected -SyOg cty -Sq \"jwk-set+json\" -E"
    },
    "modified_file_2": {
        "mod_filename": "tests/helpers",
        "status": "modified",
        "add_lines": 5,
        "dele_lines": 0,
        "patch": "@@ -84,3 +84,8 @@ valid_key_perm() {\n     fi\n     [ \"${_perm}\" = \"440\" ]\n }\n+\n+expected_fail () {\n+    echo \"Test was expected to fail\" >&2\n+    exit 1\n+}"
    },
    "modified_file_3": {
        "mod_filename": "tests/rec",
        "status": "modified",
        "add_lines": 2,
        "dele_lines": 2,
        "patch": "@@ -45,8 +45,8 @@ export PID=$!\n sleep 0.5\n \n # Make sure that GET fails\n-! curl -sf http://127.0.0.1:$PORT/rec\n-! curl -sf http://127.0.0.1:$PORT/rec/\n+curl -sf http://127.0.0.1:$PORT/rec && expected_fail\n+curl -sf http://127.0.0.1:$PORT/rec/ && expected_fail\n \n # Make a recovery request (NOTE: this is insecure! Don't do this in real code!)\n good=`jose jwk exc -i '{\"alg\":\"ECMR\",\"key_ops\":[\"deriveKey\"]}' -l $TMP/exc.jwk -r $TMP/db/exc.jwk`"
    },
    "modified_file_4": {
        "mod_filename": "tests/test-keys.c.in",
        "status": "modified",
        "add_lines": 5,
        "dele_lines": 0,
        "patch": "@@ -158,6 +158,11 @@ test_find_jws(void)\n         {\"ugJ4Ula-YABQIiJ-0g3B_jpFpF2nl3W-DNpfLdXArhTusV0QCcd1vtgDeGHEPzpm7jEsyC7VYYSSOkZicK22mw\", 1},\n         {\"up0Z4fRhpd4O5QwBaMCXDTlrvxCmZacU0MD8kw\", 1},\n         {\"vllHS-M0aQFCo2yUCcAahMU4TAtXACyeuRf-zbmmTPBg7V0Pb-RRFGo5C6MnpzdirK8B3ORLOsN8RyXClvtjxA\", 1},\n+        {\"-bWkGaJi0Zdvxaj4DCp28umLcRA\", 0},\n+        {\"WEpfFyeoNKkE2-TosN_bP-gd9UgRvQCZpVasZQ\", 0},\n+        {\"L4xg2tZXTEVbsK39bzOZM1jGWn3HtOxF5gh6F9YVf5Q\", 0},\n+        {\"9U8qgy_YjyY6Isuq6QuiKEiYZgNJShcGgJx5FJzCu6m3N6zFaIPy_HDkxkVqAZ9E\", 0},\n+        {\"Cy73glFjs6B6RU7wy6vWxAc-2bJy5VJOT9LyK80eKgZ8k27wXZ-3rjsuNU5tua_yHWtluyoSYtjoKXfI0E8ESw\", 0},\n         {NULL, 1},\n         {\"a\", 0},\n         {\"foo\", 0},"
    }
}