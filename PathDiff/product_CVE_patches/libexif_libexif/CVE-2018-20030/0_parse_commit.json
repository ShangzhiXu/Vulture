{
    "current_hash": "6aa11df549114ebda520dde4cdaea2f9357b2c89",
    "parent_hash": "7c82ed939af9415f3241c6401e16a69032daaa07",
    "modified_file_0": {
        "mod_filename": "NEWS",
        "status": "modified",
        "add_lines": 1,
        "dele_lines": 0,
        "patch": "@@ -3,6 +3,7 @@ libexif-0.6.x:\n   * Updated translations for most languages\n   * Fixed C89 compatibility\n   * Fixed warnings on recent versions of autoconf\n+  * Fix for recursion DoS CVE-2018-20030\n \n libexif-0.6.21 (2012-07-12):\n   * New translations: en_AU, uk"
    },
    "modified_file_1": {
        "mod_filename": "libexif/exif-data.c",
        "status": "modified",
        "add_lines": 37,
        "dele_lines": 8,
        "patch": "@@ -35,6 +35,7 @@\n #include <libexif/olympus/exif-mnote-data-olympus.h>\n #include <libexif/pentax/exif-mnote-data-pentax.h>\n \n+#include <math.h>\n #include <stdlib.h>\n #include <stdio.h>\n #include <string.h>\n@@ -350,20 +351,34 @@ if (data->ifd[(i)]->count) {\t\t\t\t\\\n \tbreak;\t\t\t\t\t\t\\\n }\n \n+/*! Calculate the recursion cost added by one level of IFD loading.\n+ *\n+ * The work performed is related to the cost in the exponential relation\n+ *   work=1.1**cost\n+ */\n+static unsigned int\n+level_cost(unsigned int n)\n+{\n+    static const double log_1_1 = 0.09531017980432493;\n+\n+\t/* Adding 0.1 protects against the case where n==1 */\n+\treturn ceil(log(n + 0.1)/log_1_1);\n+}\n+\n /*! Load data for an IFD.\n  *\n  * \\param[in,out] data #ExifData\n  * \\param[in] ifd IFD to load\n  * \\param[in] d pointer to buffer containing raw IFD data\n  * \\param[in] ds size of raw data in buffer at \\c d\n  * \\param[in] offset offset into buffer at \\c d at which IFD starts\n- * \\param[in] recursion_depth number of times this function has been\n- * recursively called without returning\n+ * \\param[in] recursion_cost factor indicating how expensive this recursive\n+ * call could be\n  */\n static void\n exif_data_load_data_content (ExifData *data, ExifIfd ifd,\n \t\t\t     const unsigned char *d,\n-\t\t\t     unsigned int ds, unsigned int offset, unsigned int recursion_depth)\n+\t\t\t     unsigned int ds, unsigned int offset, unsigned int recursion_cost)\n {\n \tExifLong o, thumbnail_offset = 0, thumbnail_length = 0;\n \tExifShort n;\n@@ -378,9 +393,20 @@ exif_data_load_data_content (ExifData *data, ExifIfd ifd,\n \tif ((((int)ifd) < 0) || ( ((int)ifd) >= EXIF_IFD_COUNT))\n \t  return;\n \n-\tif (recursion_depth > 12) {\n+\tif (recursion_cost > 170) {\n+\t\t/*\n+\t\t * recursion_cost is a logarithmic-scale indicator of how expensive this\n+\t\t * recursive call might end up being. It is an indicator of the depth of\n+\t\t * recursion as well as the potential for worst-case future recursive\n+\t\t * calls. Since it's difficult to tell ahead of time how often recursion\n+\t\t * will occur, this assumes the worst by assuming every tag could end up\n+\t\t * causing recursion.\n+\t\t * The value of 170 was chosen to limit typical EXIF structures to a\n+\t\t * recursive depth of about 6, but pathological ones (those with very\n+\t\t * many tags) to only 2.\n+\t\t */\n \t\texif_log (data->priv->log, EXIF_LOG_CODE_CORRUPT_DATA, \"ExifData\",\n-\t\t\t  \"Deep recursion detected!\");\n+\t\t\t  \"Deep/expensive recursion detected!\");\n \t\treturn;\n \t}\n \n@@ -422,15 +448,18 @@ exif_data_load_data_content (ExifData *data, ExifIfd ifd,\n \t\t\tswitch (tag) {\n \t\t\tcase EXIF_TAG_EXIF_IFD_POINTER:\n \t\t\t\tCHECK_REC (EXIF_IFD_EXIF);\n-\t\t\t\texif_data_load_data_content (data, EXIF_IFD_EXIF, d, ds, o, recursion_depth + 1);\n+\t\t\t\texif_data_load_data_content (data, EXIF_IFD_EXIF, d, ds, o,\n+\t\t\t\t\trecursion_cost + level_cost(n));\n \t\t\t\tbreak;\n \t\t\tcase EXIF_TAG_GPS_INFO_IFD_POINTER:\n \t\t\t\tCHECK_REC (EXIF_IFD_GPS);\n-\t\t\t\texif_data_load_data_content (data, EXIF_IFD_GPS, d, ds, o, recursion_depth + 1);\n+\t\t\t\texif_data_load_data_content (data, EXIF_IFD_GPS, d, ds, o,\n+\t\t\t\t\trecursion_cost + level_cost(n));\n \t\t\t\tbreak;\n \t\t\tcase EXIF_TAG_INTEROPERABILITY_IFD_POINTER:\n \t\t\t\tCHECK_REC (EXIF_IFD_INTEROPERABILITY);\n-\t\t\t\texif_data_load_data_content (data, EXIF_IFD_INTEROPERABILITY, d, ds, o, recursion_depth + 1);\n+\t\t\t\texif_data_load_data_content (data, EXIF_IFD_INTEROPERABILITY, d, ds, o,\n+\t\t\t\t\trecursion_cost + level_cost(n));\n \t\t\t\tbreak;\n \t\t\tcase EXIF_TAG_JPEG_INTERCHANGE_FORMAT:\n \t\t\t\tthumbnail_offset = o;"
    }
}