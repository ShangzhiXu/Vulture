{
    "current_hash": "f35fd27ec641c42d6b115bfa595e483ec58188d2",
    "parent_hash": "df17d398eca83d6de2f42cade70d317bebeec071",
    "modified_file_0": {
        "mod_filename": "ChangeLog.md",
        "status": "modified",
        "add_lines": 10,
        "dele_lines": 0,
        "patch": "@@ -35,6 +35,16 @@ applications that use the TurboJPEG API to guard against an exploit of the\n progressive JPEG format described in the report\n [\"Two Issues with the JPEG Standard\"](https://libjpeg-turbo.org/pmwiki/uploads/About/TwoIssueswiththeJPEGStandard.pdf).\n \n+7. The PPM reader now throws an error, rather than segfaulting (due to a buffer\n+overrun) or generating incorrect pixels, if an application attempts to use the\n+`tjLoadImage()` function to load a 16-bit binary PPM file (a binary PPM file\n+with a maximum value greater than 255) into a grayscale image buffer or to load\n+a 16-bit binary PGM file into an RGB image buffer.\n+\n+8. Fixed an issue in the PPM reader that caused incorrect pixels to be\n+generated when using the `tjLoadImage()` function to load a 16-bit binary PPM\n+file into an extended RGB image buffer.\n+\n \n 2.0.90 (2.1 beta1)\n =================="
    },
    "modified_file_1": {
        "mod_filename": "rdppm.c",
        "status": "modified",
        "add_lines": 20,
        "dele_lines": 6,
        "patch": "@@ -5,7 +5,7 @@\n  * Copyright (C) 1991-1997, Thomas G. Lane.\n  * Modified 2009 by Bill Allombert, Guido Vollbeding.\n  * libjpeg-turbo Modifications:\n- * Copyright (C) 2015-2017, 2020, D. R. Commander.\n+ * Copyright (C) 2015-2017, 2020-2021, D. R. Commander.\n  * For conditions of distribution and use, see the accompanying README.ijg\n  * file.\n  *\n@@ -516,6 +516,11 @@ get_word_rgb_row(j_compress_ptr cinfo, cjpeg_source_ptr sinfo)\n   register JSAMPLE *rescale = source->rescale;\n   JDIMENSION col;\n   unsigned int maxval = source->maxval;\n+  register int rindex = rgb_red[cinfo->in_color_space];\n+  register int gindex = rgb_green[cinfo->in_color_space];\n+  register int bindex = rgb_blue[cinfo->in_color_space];\n+  register int aindex = alpha_index[cinfo->in_color_space];\n+  register int ps = rgb_pixelsize[cinfo->in_color_space];\n \n   if (!ReadOK(source->pub.input_file, source->iobuffer, source->buffer_width))\n     ERREXIT(cinfo, JERR_INPUT_EOF);\n@@ -527,17 +532,20 @@ get_word_rgb_row(j_compress_ptr cinfo, cjpeg_source_ptr sinfo)\n     temp |= UCH(*bufferptr++);\n     if (temp > maxval)\n       ERREXIT(cinfo, JERR_PPM_OUTOFRANGE);\n-    *ptr++ = rescale[temp];\n+    ptr[rindex] = rescale[temp];\n     temp  = UCH(*bufferptr++) << 8;\n     temp |= UCH(*bufferptr++);\n     if (temp > maxval)\n       ERREXIT(cinfo, JERR_PPM_OUTOFRANGE);\n-    *ptr++ = rescale[temp];\n+    ptr[gindex] = rescale[temp];\n     temp  = UCH(*bufferptr++) << 8;\n     temp |= UCH(*bufferptr++);\n     if (temp > maxval)\n       ERREXIT(cinfo, JERR_PPM_OUTOFRANGE);\n-    *ptr++ = rescale[temp];\n+    ptr[bindex] = rescale[temp];\n+    if (aindex >= 0)\n+      ptr[aindex] = 0xFF;\n+    ptr += ps;\n   }\n   return 1;\n }\n@@ -624,7 +632,10 @@ start_input_ppm(j_compress_ptr cinfo, cjpeg_source_ptr sinfo)\n       cinfo->in_color_space = JCS_GRAYSCALE;\n     TRACEMS2(cinfo, 1, JTRC_PGM, w, h);\n     if (maxval > 255) {\n-      source->pub.get_pixel_rows = get_word_gray_row;\n+      if (cinfo->in_color_space == JCS_GRAYSCALE)\n+        source->pub.get_pixel_rows = get_word_gray_row;\n+      else\n+        ERREXIT(cinfo, JERR_BAD_IN_COLORSPACE);\n     } else if (maxval == MAXJSAMPLE && sizeof(JSAMPLE) == sizeof(U_CHAR) &&\n                cinfo->in_color_space == JCS_GRAYSCALE) {\n       source->pub.get_pixel_rows = get_raw_row;\n@@ -647,7 +658,10 @@ start_input_ppm(j_compress_ptr cinfo, cjpeg_source_ptr sinfo)\n       cinfo->in_color_space = JCS_EXT_RGB;\n     TRACEMS2(cinfo, 1, JTRC_PPM, w, h);\n     if (maxval > 255) {\n-      source->pub.get_pixel_rows = get_word_rgb_row;\n+      if (IsExtRGB(cinfo->in_color_space))\n+        source->pub.get_pixel_rows = get_word_rgb_row;\n+      else\n+        ERREXIT(cinfo, JERR_BAD_IN_COLORSPACE);\n     } else if (maxval == MAXJSAMPLE && sizeof(JSAMPLE) == sizeof(U_CHAR) &&\n #if RGB_RED == 0 && RGB_GREEN == 1 && RGB_BLUE == 2 && RGB_PIXELSIZE == 3\n                (cinfo->in_color_space == JCS_EXT_RGB ||"
    }
}