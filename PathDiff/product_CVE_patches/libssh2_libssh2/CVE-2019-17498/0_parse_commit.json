{
    "current_hash": "dedcbd106f8e52d5586b0205bc7677e4c9868f9c",
    "parent_hash": "e5732992b1d2cf238dab636852aade4c52caff99",
    "modified_file_0": {
        "mod_filename": "src/packet.c",
        "status": "modified",
        "add_lines": 29,
        "dele_lines": 39,
        "patch": "@@ -419,8 +419,8 @@ _libssh2_packet_add(LIBSSH2_SESSION * session, unsigned char *data,\n                     size_t datalen, int macstate)\n {\n     int rc = 0;\n-    char *message = NULL;\n-    char *language = NULL;\n+    unsigned char *message = NULL;\n+    unsigned char *language = NULL;\n     size_t message_len = 0;\n     size_t language_len = 0;\n     LIBSSH2_CHANNEL *channelp = NULL;\n@@ -472,33 +472,23 @@ _libssh2_packet_add(LIBSSH2_SESSION * session, unsigned char *data,\n \n         case SSH_MSG_DISCONNECT:\n             if(datalen >= 5) {\n-                size_t reason = _libssh2_ntohu32(data + 1);\n+                uint32_t reason = 0;\n+                struct string_buf buf;\n+                buf.data = (unsigned char *)data;\n+                buf.dataptr = buf.data;\n+                buf.len = datalen;\n+                buf.dataptr++; /* advance past type */\n \n-                if(datalen >= 9) {\n-                    message_len = _libssh2_ntohu32(data + 5);\n+                _libssh2_get_u32(&buf, &reason);\n+                _libssh2_get_string(&buf, &message, &message_len);\n+                _libssh2_get_string(&buf, &language, &language_len);\n \n-                    if(message_len < datalen-13) {\n-                        /* 9 = packet_type(1) + reason(4) + message_len(4) */\n-                        message = (char *) data + 9;\n-\n-                        language_len =\n-                            _libssh2_ntohu32(data + 9 + message_len);\n-                        language = (char *) data + 9 + message_len + 4;\n-\n-                        if(language_len > (datalen-13-message_len)) {\n-                            /* bad input, clear info */\n-                            language = message = NULL;\n-                            language_len = message_len = 0;\n-                        }\n-                    }\n-                    else\n-                        /* bad size, clear it */\n-                        message_len = 0;\n-                }\n                 if(session->ssh_msg_disconnect) {\n-                    LIBSSH2_DISCONNECT(session, reason, message,\n-                                       message_len, language, language_len);\n+                    LIBSSH2_DISCONNECT(session, reason, (const char *)message,\n+                                       message_len, (const char *)language,\n+                                       language_len);\n                 }\n+\n                 _libssh2_debug(session, LIBSSH2_TRACE_TRANS,\n                                \"Disconnect(%d): %s(%s)\", reason,\n                                message, language);\n@@ -539,24 +529,24 @@ _libssh2_packet_add(LIBSSH2_SESSION * session, unsigned char *data,\n                 int always_display = data[1];\n \n                 if(datalen >= 6) {\n-                    message_len = _libssh2_ntohu32(data + 2);\n-\n-                    if(message_len <= (datalen - 10)) {\n-                        /* 6 = packet_type(1) + display(1) + message_len(4) */\n-                        message = (char *) data + 6;\n-                        language_len = _libssh2_ntohu32(data + 6 +\n-                                                        message_len);\n-\n-                        if(language_len <= (datalen - 10 - message_len))\n-                            language = (char *) data + 10 + message_len;\n-                    }\n+                    struct string_buf buf;\n+                    buf.data = (unsigned char *)data;\n+                    buf.dataptr = buf.data;\n+                    buf.len = datalen;\n+                    buf.dataptr += 2; /* advance past type & always display */\n+\n+                    _libssh2_get_string(&buf, &message, &message_len);\n+                    _libssh2_get_string(&buf, &language, &language_len);\n                 }\n \n                 if(session->ssh_msg_debug) {\n-                    LIBSSH2_DEBUG(session, always_display, message,\n-                                  message_len, language, language_len);\n+                    LIBSSH2_DEBUG(session, always_display,\n+                                  (const char *)message,\n+                                  message_len, (const char *)language,\n+                                  language_len);\n                 }\n             }\n+\n             /*\n              * _libssh2_debug will actually truncate this for us so\n              * that it's not an inordinate about of data\n@@ -579,7 +569,7 @@ _libssh2_packet_add(LIBSSH2_SESSION * session, unsigned char *data,\n                 uint32_t len = 0;\n                 unsigned char want_reply = 0;\n                 len = _libssh2_ntohu32(data + 1);\n-                if(datalen >= (6 + len)) {\n+                if((len <= (UINT_MAX - 6)) && (datalen >= (6 + len))) {\n                     want_reply = data[5 + len];\n                     _libssh2_debug(session,\n                                    LIBSSH2_TRACE_CONN,"
    }
}