{
    "current_hash": "127e7a6c8942b362aa3c6627f44d660a4fb75312",
    "parent_hash": "6f5bd5072dff07679c390eecfeaa9d20cc45a9ef",
    "modified_file_0": {
        "mod_filename": "lgc.c",
        "status": "modified",
        "add_lines": 4,
        "dele_lines": 6,
        "patch": "@@ -1131,16 +1131,14 @@ static void finishgencycle (lua_State *L, global_State *g) {\n \n \n /*\n-** Does a young collection. First, mark 'OLD1' objects.  (Only survival\n-** and \"recent old\" lists can contain 'OLD1' objects. New lists cannot\n-** contain 'OLD1' objects, at most 'OLD0' objects that were already\n-** visited when marked old.) Then does the atomic step. Then,\n-** sweep all lists and advance pointers. Finally, finish the collection.\n+** Does a young collection. First, mark 'OLD1' objects. Then does the\n+** atomic step. Then, sweep all lists and advance pointers. Finally,\n+** finish the collection.\n */\n static void youngcollection (lua_State *L, global_State *g) {\n   GCObject **psurvival;  /* to point to first non-dead survival object */\n   lua_assert(g->gcstate == GCSpropagate);\n-  markold(g, g->survival, g->reallyold);\n+  markold(g, g->allgc, g->reallyold);\n   markold(g, g->finobj, g->finobjrold);\n   atomic(L);\n "
    }
}