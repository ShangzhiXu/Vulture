{
    "current_hash": "1f3c6f4534c6411313361697d98d1145a1f030fa",
    "parent_hash": "25b143dd34fb587d1e35290c4b25bc08954800e2",
    "modified_file_0": {
        "mod_filename": "lparser.c",
        "status": "modified",
        "add_lines": 1,
        "dele_lines": 0,
        "patch": "@@ -468,6 +468,7 @@ static void singlevar (LexState *ls, expdesc *var) {\n     expdesc key;\n     singlevaraux(fs, ls->envn, var, 1);  /* get environment variable */\n     lua_assert(var->k != VVOID);  /* this one must exist */\n+    luaK_exp2anyregup(fs, var);  /* but could be a constant */\n     codestring(&key, varname);  /* key is variable name */\n     luaK_indexed(fs, var, &key);  /* env[varname] */\n   }"
    },
    "modified_file_1": {
        "mod_filename": "testes/attrib.lua",
        "status": "modified",
        "add_lines": 10,
        "dele_lines": 0,
        "patch": "@@ -434,6 +434,16 @@ a.aVeryLongName012345678901234567890123456789012345678901234567890123456789 ==\n 10)\n \n \n+do\n+  -- _ENV constant\n+  local function foo ()\n+    local _ENV <const> = 11\n+    X = \"hi\"\n+  end\n+  local st, msg = pcall(foo)\n+  assert(not st and string.find(msg, \"number\"))\n+end\n+\n \n -- test of large float/integer indices \n "
    }
}