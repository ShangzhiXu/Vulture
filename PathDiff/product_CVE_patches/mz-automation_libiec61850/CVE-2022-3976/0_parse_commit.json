{
    "current_hash": "10622ba36bb3910c151348f1569f039ecdd8786f",
    "parent_hash": "dd3e2a6870d85eba60efa87d4200e0d1789a84b3",
    "modified_file_0": {
        "mod_filename": "hal/filesystem/linux/file_provider_linux.c",
        "status": "modified",
        "add_lines": 0,
        "dele_lines": 1,
        "patch": "@@ -37,7 +37,6 @@ struct sDirectoryHandle {\n     DIR* handle;\n };\n \n-\n FileHandle\n FileSystem_openFile(char* fileName, bool readWrite)\n {"
    },
    "modified_file_1": {
        "mod_filename": "src/mms/inc_private/mms_common_internal.h",
        "status": "modified",
        "add_lines": 3,
        "dele_lines": 0,
        "patch": "@@ -82,6 +82,9 @@ mmsMsg_createExtendedFilename(const char* basepath, int bufSize, char* extendedF\n LIB61850_INTERNAL FileHandle\n mmsMsg_openFile(const char* basepath, char* fileName, bool readWrite);\n \n+LIB61850_INTERNAL bool\n+mmsMsg_isFilenameSave(const char* filename);\n+\n #endif /* (MMS_FILE_SERVICE == 1) */\n \n typedef struct sMmsServiceError"
    },
    "modified_file_2": {
        "mod_filename": "src/mms/iso_mms/client/mms_client_files.c",
        "status": "modified",
        "add_lines": 30,
        "dele_lines": 21,
        "patch": "@@ -71,7 +71,6 @@ getFrsm(MmsConnection connection, int32_t frsmId)\n     return frsm;\n }\n \n-\n static int32_t\n getNextFrsmId(MmsConnection connection)\n {\n@@ -125,38 +124,48 @@ mmsClient_handleFileOpenRequest(\n \n     if (hasFileName) {\n \n-        MmsFileReadStateMachine* frsm = getFreeFrsm(connection);\n+        if (mmsMsg_isFilenameSave(filename) == false) {\n+            /* potential attack */\n \n-        if (frsm != NULL) {\n+            if (DEBUG_MMS_CLIENT)\n+                printf(\"MMS_CLIENT: client provided unsave filename -> rejected\\n\");\n \n-            MmsOutstandingCall obtainFileCall = mmsClient_getMatchingObtainFileRequest(connection, filename);\n+             mmsMsg_createServiceErrorPdu(invokeId, response, MMS_ERROR_FILE_FILE_NON_EXISTENT);\n+        }\n+        else {\n+            MmsFileReadStateMachine* frsm = getFreeFrsm(connection);\n \n-            if (obtainFileCall) {\n+            if (frsm != NULL) {\n \n-                if (DEBUG_MMS_CLIENT)\n-                    printf(\"MMS_CLIENT: file open is matching obtain file request for file %s\\n\", filename);\n+                MmsOutstandingCall obtainFileCall = mmsClient_getMatchingObtainFileRequest(connection, filename);\n \n-                obtainFileCall->timeout = Hal_getTimeInMs() + connection->requestTimeout;\n-            }\n+                if (obtainFileCall) {\n \n-            FileHandle fileHandle = mmsMsg_openFile(MmsConnection_getFilestoreBasepath(connection), filename, false);\n+                    if (DEBUG_MMS_CLIENT)\n+                        printf(\"MMS_CLIENT: file open is matching obtain file request for file %s\\n\", filename);\n \n-            if (fileHandle != NULL) {\n+                    obtainFileCall->timeout = Hal_getTimeInMs() + connection->requestTimeout;\n+                }\n \n-                frsm->fileHandle = fileHandle;\n-                frsm->readPosition = filePosition;\n-                frsm->frsmId = getNextFrsmId(connection);\n-                frsm->obtainRequest = obtainFileCall;\n+                FileHandle fileHandle = mmsMsg_openFile(MmsConnection_getFilestoreBasepath(connection), filename, false);\n+\n+                if (fileHandle != NULL) {\n+\n+                    frsm->fileHandle = fileHandle;\n+                    frsm->readPosition = filePosition;\n+                    frsm->frsmId = getNextFrsmId(connection);\n+                    frsm->obtainRequest = obtainFileCall;\n+\n+                    mmsMsg_createFileOpenResponse(MmsConnection_getFilestoreBasepath(connection),\n+                            invokeId, response, filename, frsm);\n+                }\n+                else\n+                    mmsMsg_createServiceErrorPdu(invokeId, response, MMS_ERROR_FILE_FILE_NON_EXISTENT);\n \n-                mmsMsg_createFileOpenResponse(MmsConnection_getFilestoreBasepath(connection),\n-                        invokeId, response, filename, frsm);\n             }\n             else\n-                mmsMsg_createServiceErrorPdu(invokeId, response, MMS_ERROR_FILE_FILE_NON_EXISTENT);\n-\n+                mmsMsg_createServiceErrorPdu(invokeId, response, MMS_ERROR_RESOURCE_OTHER);\n         }\n-        else\n-            mmsMsg_createServiceErrorPdu(invokeId, response, MMS_ERROR_RESOURCE_OTHER);\n     }\n     else\n         goto exit_invalid_parameter;"
    },
    "modified_file_3": {
        "mod_filename": "src/mms/iso_mms/common/mms_common_msg.c",
        "status": "modified",
        "add_lines": 19,
        "dele_lines": 1,
        "patch": "@@ -570,6 +570,24 @@ mmsMsg_createExtendedFilename(const char* basepath, int bufSize, char* extendedF\n #endif\n }\n \n+bool\n+mmsMsg_isFilenameSave(const char* filename)\n+{\n+    if (filename)\n+    {\n+        if (strstr(filename, \"..\"))\n+            return false;\n+\n+        if (strstr(filename, \"./\"))\n+            return false;\n+\n+        return true;\n+    }\n+    else {\n+        return false;\n+    }\n+}\n+\n FileHandle\n mmsMsg_openFile(const char* basepath, char* fileName, bool readWrite)\n {\n@@ -620,7 +638,7 @@ mmsMsg_parseFileName(char* filename, uint8_t* buffer, int* bufPos, int maxBufPos\n      * characters.\n      */\n     if (strstr(filename, \"..\") != NULL) {\n-        mmsMsg_createServiceErrorPdu(invokeId, response, MMS_ERROR_FILE_FILENAME_SYNTAX_ERROR);\n+        mmsMsg_createServiceErrorPdu(invokeId, response, MMS_ERROR_FILE_FILE_NON_EXISTENT);\n         return false;\n     }\n "
    },
    "modified_file_4": {
        "mod_filename": "src/mms/iso_mms/server/mms_file_service.c",
        "status": "modified",
        "add_lines": 51,
        "dele_lines": 2,
        "patch": "@@ -235,8 +235,6 @@ mmsMsg_createFileOpenResponse(const char* basepath, uint32_t invokeId, ByteBuffe\n     response->size = bufPos;\n }\n \n-\n-\n void\n mmsServer_handleFileDeleteRequest(\n     MmsServerConnection connection,\n@@ -266,6 +264,16 @@ mmsServer_handleFileDeleteRequest(\n     if (DEBUG_MMS_SERVER)\n         printf(\"MMS_SERVER: mms_file_service.c: Delete file (%s)\\n\", filename);\n \n+    if (mmsMsg_isFilenameSave(filename) == false)\n+    {\n+        if (DEBUG_MMS_SERVER)\n+            printf(\"MMS_SERVER: remote provided unsave filename -> rejected\\n\");\n+\n+        mmsMsg_createServiceErrorPdu(invokeId, response, MMS_ERROR_FILE_FILE_NON_EXISTENT);\n+\n+        return;\n+    }\n+\n     if (connection->server->fileAccessHandler != NULL) {\n         MmsError access = connection->server->fileAccessHandler(connection->server->fileAccessHandlerParameter,\n                             connection, MMS_FILE_ACCESS_TYPE_DELETE, filename, NULL);\n@@ -344,6 +352,17 @@ mmsServer_handleFileOpenRequest(\n \n     if (hasFileName) {\n \n+        if (mmsMsg_isFilenameSave(filename) == false) {\n+            /* potential attack */\n+\n+            if (DEBUG_MMS_CLIENT)\n+                printf(\"MMS_SERVER: remote provided unsave filename -> rejected\\n\");\n+\n+             mmsMsg_createServiceErrorPdu(invokeId, response, MMS_ERROR_FILE_FILE_NON_EXISTENT);\n+\n+             return;\n+        }\n+\n         if (connection->server->fileAccessHandler != NULL) {\n             MmsError access = connection->server->fileAccessHandler(connection->server->fileAccessHandlerParameter,\n                                 connection, MMS_FILE_ACCESS_TYPE_OPEN, filename, NULL);\n@@ -690,6 +709,15 @@ mmsServer_handleObtainFileRequest(\n \n     if (hasSourceFileName && hasDestinationFilename) {\n \n+        if (mmsMsg_isFilenameSave(destinationFilename) == false) {\n+            /* potential attack */\n+\n+            if (DEBUG_MMS_SERVER)\n+                printf(\"MMS_SERVER: remote provided unsave filename -> rejected\\n\");\n+\n+            goto exit_invalid_parameter;\n+        }\n+\n         /* Call user to check if access is allowed */\n         if (connection->server->fileAccessHandler != NULL) {\n             MmsError access = connection->server->fileAccessHandler(connection->server->fileAccessHandlerParameter,\n@@ -1023,6 +1051,17 @@ createFileDirectoryResponse(const char* basepath, uint32_t invokeId, ByteBuffer*\n             continueAfterFileName = NULL;\n     }\n \n+    if ((directoryName && mmsMsg_isFilenameSave(directoryName) == false) || \n+        (continueAfterFileName && mmsMsg_isFilenameSave(continueAfterFileName) == false))\n+    {\n+        if (DEBUG_MMS_SERVER)\n+            printf(\"MMS_SERVER: remote provided unsave filename -> rejected\\n\");\n+\n+       mmsMsg_createServiceErrorPdu(invokeId, response, MMS_ERROR_FILE_FILE_NON_EXISTENT);\n+\n+       return;\n+    }\n+\n     tempCurPos = addFileEntriesToResponse(basepath, buffer, tempCurPos, maxSize, directoryName, &continueAfterFileName, &moreFollows);\n \n \tif (tempCurPos < 0) {\n@@ -1128,6 +1167,16 @@ mmsServer_handleFileRenameRequest(\n \n     if ((strlen(currentFileName) != 0) && (strlen(newFileName) != 0)) {\n \n+        if ((mmsMsg_isFilenameSave(currentFileName) == false) || (mmsMsg_isFilenameSave(newFileName) == false))\n+        {\n+            if (DEBUG_MMS_SERVER)\n+                printf(\"MMS_SERVER: remote provided unsave filename -> rejected\\n\");\n+\n+            mmsMsg_createServiceErrorPdu(invokeId, response, MMS_ERROR_FILE_FILE_NON_EXISTENT);\n+\n+            return;\n+        }\n+\n         /* Call user to check if access is allowed */\n         if (connection->server->fileAccessHandler != NULL) {\n             MmsError access = connection->server->fileAccessHandler(connection->server->fileAccessHandlerParameter,"
    }
}