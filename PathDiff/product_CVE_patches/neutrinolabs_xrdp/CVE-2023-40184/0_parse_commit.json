{
    "current_hash": "a111a0fdfe2421ef600e40708b5f0168594cfb23",
    "parent_hash": "4b1482b5dfaaae42ba56407d085c27371fe6847a",
    "modified_file_0": {
        "mod_filename": "sesman/libsesman/verify_user_pam.c",
        "status": "modified",
        "add_lines": 22,
        "dele_lines": 2,
        "patch": "@@ -397,8 +397,8 @@ auth_uds(const char *user, enum scp_login_status *errorcode)\n /******************************************************************************/\n \n /* returns error */\n-int\n-auth_start_session(struct auth_info *auth_info, int display_num)\n+static int\n+auth_start_session_private(struct auth_info *auth_info, int display_num)\n {\n     int error;\n     char display[256];\n@@ -436,6 +436,26 @@ auth_start_session(struct auth_info *auth_info, int display_num)\n     return 0;\n }\n \n+/******************************************************************************/\n+/**\n+ * Main routine to start a session\n+ *\n+ * Calls the private routine and logs an additional error if the private\n+ * routine fails\n+ */\n+int\n+auth_start_session(struct auth_info *auth_info, int display_num)\n+{\n+    int result = auth_start_session_private(auth_info, display_num);\n+    if (result != 0)\n+    {\n+        LOG(LOG_LEVEL_ERROR,\n+            \"Can't start PAM session. See PAM logging for more info\");\n+    }\n+\n+    return result;\n+}\n+\n /******************************************************************************/\n /* returns error */\n static int"
    },
    "modified_file_1": {
        "mod_filename": "sesman/libsesman/verify_user_pam_userpass.c",
        "status": "modified",
        "add_lines": 22,
        "dele_lines": 2,
        "patch": "@@ -207,8 +207,8 @@ auth_uds(const char *user, enum scp_login_status *errorcode)\n /******************************************************************************/\n \n /* returns error */\n-int\n-auth_start_session(struct auth_info *auth_info, int display_num)\n+static int\n+auth_start_session_private(struct auth_info *auth_info, int display_num)\n {\n     int error;\n     char display[256];\n@@ -246,6 +246,26 @@ auth_start_session(struct auth_info *auth_info, int display_num)\n     return 0;\n }\n \n+/******************************************************************************/\n+/**\n+ * Main routine to start a session\n+ *\n+ * Calls the private routine and logs an additional error if the private\n+ * routine fails\n+ */\n+int\n+auth_start_session(struct auth_info *auth_info, int display_num)\n+{\n+    int result = auth_start_session_private(auth_info, display_num);\n+    if (result != 0)\n+    {\n+        LOG(LOG_LEVEL_ERROR,\n+            \"Can't start PAM session. See PAM logging for more info\");\n+    }\n+\n+    return result;\n+}\n+\n /******************************************************************************/\n /* returns error */\n static int"
    },
    "modified_file_2": {
        "mod_filename": "sesman/sesexec/session.c",
        "status": "modified",
        "add_lines": 6,
        "dele_lines": 1,
        "patch": "@@ -568,7 +568,12 @@ session_start_wrapped(struct login_info *login_info,\n     int window_manager_pid;\n     enum scp_screate_status status = E_SCP_SCREATE_GENERAL_ERROR;\n \n-    auth_start_session(login_info->auth_info, s->display);\n+    if (auth_start_session(login_info->auth_info, s->display) != 0)\n+    {\n+        // Errors are logged by the auth module, as they are\n+        // specific to that module\n+        return E_SCP_SCREATE_GENERAL_ERROR;\n+    }\n #ifdef USE_BSD_SETLOGIN\n     /**\n      * Create a new session and process group since the 4.4BSD"
    }
}