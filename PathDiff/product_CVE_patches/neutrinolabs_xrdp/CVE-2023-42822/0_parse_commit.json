{
    "current_hash": "73acbe1f7957c65122b00de4d6f57a8d0d257c40",
    "parent_hash": "98ad496072d768dc423bb82d72fdbb58fae0f3b7",
    "modified_file_0": {
        "mod_filename": "xrdp/xrdp.h",
        "status": "modified",
        "add_lines": 9,
        "dele_lines": 0,
        "patch": "@@ -381,6 +381,15 @@ xrdp_font_delete(struct xrdp_font *self);\n int\n xrdp_font_item_compare(struct xrdp_font_char *font1,\n                        struct xrdp_font_char *font2);\n+/**\n+ * Gets a checked xrdp_font_char from a font\n+ * @param f Font\n+ * @param c32 Unicode codepoint\n+ */\n+#define XRDP_FONT_GET_CHAR(f, c32) \\\n+    (((unsigned int)(c32) >= ' ') && ((unsigned int)(c32) < (f)->char_count) \\\n+     ? ((f)->chars + (unsigned int)(c32)) \\\n+     : (f)->default_char)\n \n /* funcs.c */\n int"
    },
    "modified_file_1": {
        "mod_filename": "xrdp/xrdp_font.c",
        "status": "modified",
        "add_lines": 108,
        "dele_lines": 22,
        "patch": "@@ -52,6 +52,12 @@ static char w_char[] =\n };\n #endif\n \n+// Unicode definitions\n+#define UNICODE_WHITE_SQUARE 0x25a1\n+\n+// First character allocated in the 'struct xrdp_font.chars' array\n+#define FIRST_CHAR ' '\n+\n /*****************************************************************************/\n /**\n  * Parses the fv1_select configuration value to get the font to use,\n@@ -145,8 +151,8 @@ xrdp_font_create(struct xrdp_wm *wm, unsigned int dpi)\n     int fd;\n     int b;\n     int i;\n-    int index;\n-    int datasize;\n+    unsigned int char_count;\n+    unsigned int datasize; // Size of glyph data on disk\n     int file_size;\n     struct xrdp_font_char *f;\n     const char *file_path;\n@@ -207,17 +213,39 @@ xrdp_font_create(struct xrdp_wm *wm, unsigned int dpi)\n     }\n \n     self = (struct xrdp_font *)g_malloc(sizeof(struct xrdp_font), 1);\n+    if (self == NULL)\n+    {\n+        LOG(LOG_LEVEL_ERROR, \"xrdp_font_create: \"\n+            \"Can't allocate memory for font\");\n+        return self;\n+    }\n     self->wm = wm;\n     make_stream(s);\n     init_stream(s, file_size + 1024);\n     fd = g_file_open_ro(file_path);\n \n-    if (fd != -1)\n+    if (fd < 0)\n+    {\n+        LOG(LOG_LEVEL_ERROR,\n+            \"xrdp_font_create: Can't open %s - %s\", file_path,\n+            g_get_strerror());\n+        g_free(self);\n+        self = NULL;\n+    }\n+    else\n     {\n         b = g_file_read(fd, s->data, file_size + 1024);\n         g_file_close(fd);\n \n-        if (b > 0)\n+        // Got at least a header?\n+        if (b < (4 + 32 + 2 + 2 + 2 + 2 + 4))\n+        {\n+            LOG(LOG_LEVEL_ERROR,\n+                \"xrdp_font_create: Font %s is truncated\", file_path);\n+            g_free(self);\n+            self = NULL;\n+        }\n+        else\n         {\n             s->end = s->data + b;\n             in_uint8s(s, 4);\n@@ -227,11 +255,27 @@ xrdp_font_create(struct xrdp_wm *wm, unsigned int dpi)\n             in_uint16_le(s, self->body_height);\n             in_sint16_le(s, min_descender);\n             in_uint8s(s, 4);\n-            index = 32;\n+            char_count = FIRST_CHAR;\n \n-            while (s_check_rem(s, 16))\n+            while (!s_check_end(s))\n             {\n-                f = self->font_items + index;\n+                if (!s_check_rem(s, 16))\n+                {\n+                    LOG(LOG_LEVEL_WARNING,\n+                        \"xrdp_font_create: \"\n+                        \"Can't parse header for character U+%X\", char_count);\n+                    break;\n+                }\n+\n+                if (char_count >= MAX_FONT_CHARS)\n+                {\n+                    LOG(LOG_LEVEL_WARNING,\n+                        \"xrdp_font_create: \"\n+                        \"Ignoring characters >= U+%x\", MAX_FONT_CHARS);\n+                    break;\n+                }\n+\n+                f = self->chars + char_count;\n                 in_sint16_le(s, i);\n                 f->width = i;\n                 in_sint16_le(s, i);\n@@ -249,9 +293,19 @@ xrdp_font_create(struct xrdp_wm *wm, unsigned int dpi)\n                 if (datasize < 0 || datasize > 512)\n                 {\n                     /* shouldn't happen */\n-                    LOG(LOG_LEVEL_ERROR, \"error in xrdp_font_create, datasize wrong \"\n-                        \"width %d, height %d, datasize %d, index %d\",\n-                        f->width, f->height, datasize, index);\n+                    LOG(LOG_LEVEL_ERROR,\n+                        \"xrdp_font_create: \"\n+                        \"datasize for U+%x wrong \"\n+                        \"width %d, height %d, datasize %d\",\n+                        char_count, f->width, f->height, datasize);\n+                    break;\n+                }\n+\n+                if (!s_check_rem(s, datasize))\n+                {\n+                    LOG(LOG_LEVEL_ERROR,\n+                        \"xrdp_font_create: \"\n+                        \"Not enough data for character U+%X\", char_count);\n                     break;\n                 }\n \n@@ -261,25 +315,57 @@ xrdp_font_create(struct xrdp_wm *wm, unsigned int dpi)\n                      * that it can be added to the glyph cache if required */\n                     f->width = 1;\n                     f->height = 1;\n+\n+                    /* GOTCHA - we need to allocate more than one byte in\n+                     * memory for this glyph */\n                     f->data = (char *)g_malloc(FONT_DATASIZE(f), 1);\n                 }\n-                else if (s_check_rem(s, datasize))\n+                else\n                 {\n                     f->data = (char *)g_malloc(datasize, 0);\n-                    in_uint8a(s, f->data, datasize);\n                 }\n-                else\n+\n+                if (f->data == NULL)\n                 {\n-                    LOG(LOG_LEVEL_ERROR, \"error in xrdp_font_create\");\n+                    LOG(LOG_LEVEL_ERROR,\n+                        \"xrdp_font_create: \"\n+                        \"Allocation error for character U+%X\", char_count);\n+                    break;\n                 }\n-                index++;\n+                in_uint8a(s, f->data, datasize);\n+\n+                ++char_count;\n             }\n \n-            if (self->body_height == 0 && index > 32)\n+            self->char_count = char_count;\n+            if (char_count <= FIRST_CHAR)\n+            {\n+                /* We read no characters from the font */\n+                xrdp_font_delete(self);\n+                self = NULL;\n+            }\n+            else\n             {\n-                /* Older font made for xrdp v0.9.x. Synthesise this\n-                 * value from the first glyph */\n-                self->body_height = -self->font_items[32].baseline + 1;\n+                if (self->body_height == 0)\n+                {\n+                    /* Older font made for xrdp v0.9.x. Synthesise this\n+                     * value from the first glyph */\n+                    self->body_height = -self->chars[FIRST_CHAR].baseline + 1;\n+                }\n+\n+                // Find a default glyph\n+                if (char_count > UNICODE_WHITE_SQUARE)\n+                {\n+                    self->default_char = &self->chars[UNICODE_WHITE_SQUARE];\n+                }\n+                else if (char_count > '?')\n+                {\n+                    self->default_char = &self->chars['?'];\n+                }\n+                else\n+                {\n+                    self->default_char = &self->chars[FIRST_CHAR];\n+                }\n             }\n         }\n     }\n@@ -302,16 +388,16 @@ xrdp_font_create(struct xrdp_wm *wm, unsigned int dpi)\n void\n xrdp_font_delete(struct xrdp_font *self)\n {\n-    int i;\n+    unsigned int i;\n \n     if (self == 0)\n     {\n         return;\n     }\n \n-    for (i = 0; i < NUM_FONTS; i++)\n+    for (i = FIRST_CHAR; i < self->char_count; i++)\n     {\n-        g_free(self->font_items[i].data);\n+        g_free(self->chars[i].data);\n     }\n \n     g_free(self);"
    },
    "modified_file_2": {
        "mod_filename": "xrdp/xrdp_painter.c",
        "status": "modified",
        "add_lines": 4,
        "dele_lines": 4,
        "patch": "@@ -454,7 +454,7 @@ xrdp_painter_text_width(struct xrdp_painter *self, const char *text)\n \n     for (index = 0; index < len; index++)\n     {\n-        font_item = self->font->font_items + wstr[index];\n+        font_item = XRDP_FONT_GET_CHAR(self->font, wstr[index]);\n         rv = rv + font_item->incby;\n     }\n \n@@ -837,7 +837,7 @@ xrdp_painter_draw_text(struct xrdp_painter *self,\n             total_height = 0;\n             for (index = 0; index < len; index++)\n             {\n-                font_item = font->font_items + wstr[index];\n+                font_item = XRDP_FONT_GET_CHAR(font, wstr[index]);\n                 k = font_item->incby;\n                 total_width += k;\n                 /* Use the nominal height of the font to work out the\n@@ -875,7 +875,7 @@ xrdp_painter_draw_text(struct xrdp_painter *self,\n                                      draw_rect.bottom - draw_rect.top);\n                     for (index = 0; index < len; index++)\n                     {\n-                        font_item = font->font_items + wstr[index];\n+                        font_item = XRDP_FONT_GET_CHAR(font, wstr[index]);\n                         g_memset(&pat, 0, sizeof(pat));\n                         pat.format = PT_FORMAT_c1;\n                         pat.width = font_item->width;\n@@ -917,7 +917,7 @@ xrdp_painter_draw_text(struct xrdp_painter *self,\n \n     for (index = 0; index < len; index++)\n     {\n-        font_item = font->font_items + wstr[index];\n+        font_item = XRDP_FONT_GET_CHAR(font, wstr[index]);\n         i = xrdp_cache_add_char(self->wm->cache, font_item);\n         f = HIWORD(i);\n         c = LOWORD(i);"
    },
    "modified_file_3": {
        "mod_filename": "xrdp/xrdp_types.h",
        "status": "modified",
        "add_lines": 6,
        "dele_lines": 2,
        "patch": "@@ -648,7 +648,7 @@ struct xrdp_bitmap\n     int crc16;\n };\n \n-#define NUM_FONTS 0x4e00\n+#define MAX_FONT_CHARS 0x4e00\n #define DEFAULT_FONT_NAME \"sans-10.fv1\"\n #define DEFAULT_FONT_PIXEL_SIZE 16\n #define DEFAULT_FV1_SELECT \"130:sans-18.fv1,0:\" DEFAULT_FONT_NAME\n@@ -669,7 +669,11 @@ struct xrdp_bitmap\n struct xrdp_font\n {\n     struct xrdp_wm *wm;\n-    struct xrdp_font_char font_items[NUM_FONTS];\n+    // Font characters, accessed by Unicode codepoint. The first 32\n+    // entries are unused.\n+    struct xrdp_font_char chars[MAX_FONT_CHARS];\n+    unsigned int char_count; // # elements in above array\n+    struct xrdp_font_char *default_char; // Pointer into above array\n     char name[32];\n     int size;\n     /** Body height in pixels */"
    }
}