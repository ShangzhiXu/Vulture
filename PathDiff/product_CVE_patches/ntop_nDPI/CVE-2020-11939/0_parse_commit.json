{
    "current_hash": "7ce478a58b4dd29a8d1e6f4e9df2f778613d9202",
    "parent_hash": "3bbb0cd3296023f6f922c71d21a1c374d2b0a435",
    "modified_file_0": {
        "mod_filename": "src/lib/protocols/ssh.c",
        "status": "modified",
        "add_lines": 33,
        "dele_lines": 31,
        "patch": "@@ -95,7 +95,7 @@ static void ndpi_int_ssh_add_connection(struct ndpi_detection_module_struct\n \n static u_int16_t concat_hash_string(struct ndpi_packet_struct *packet,\n \t\t\t\t   char *buf, u_int8_t client_hash) {\n-  u_int16_t offset = 22, buf_out_len = 0;\n+  u_int32_t offset = 22, buf_out_len = 0;\n   if(offset+sizeof(u_int32_t) >= packet->payload_packet_len)\n     goto invalid_payload;\n   u_int32_t len = ntohl(*(u_int32_t*)&packet->payload[offset]);\n@@ -114,113 +114,115 @@ static u_int16_t concat_hash_string(struct ndpi_packet_struct *packet,\n     goto invalid_payload;\n   /* ssh.server_host_key_algorithms [None] */\n   len = ntohl(*(u_int32_t*)&packet->payload[offset]);\n+  if (len > UINT32_MAX - 4 - offset)\n+    goto invalid_payload;\n   offset += 4 + len;\n \n   if(offset+sizeof(u_int32_t) >= packet->payload_packet_len)\n     goto invalid_payload;\n   /* ssh.encryption_algorithms_client_to_server [C] */\n   len = ntohl(*(u_int32_t*)&packet->payload[offset]);\n \n+  offset += 4;\n   if(client_hash) {\n-    offset += 4;\n-\n     if((offset >= packet->payload_packet_len) || (len >= packet->payload_packet_len-offset-1))\n       goto invalid_payload;\n \n     strncpy(&buf[buf_out_len], (const char *)&packet->payload[offset], len);\n     buf_out_len += len;\n     buf[buf_out_len++] = ';';\n-    offset += len;\n-  } else\n-    offset += 4 + len;\n+  }\n+  if (len > UINT32_MAX - offset)\n+    goto invalid_payload;\n+  offset += len;\n \n   if(offset+sizeof(u_int32_t) >= packet->payload_packet_len)\n     goto invalid_payload;\n   /* ssh.encryption_algorithms_server_to_client [S] */\n   len = ntohl(*(u_int32_t*)&packet->payload[offset]);\n \n+  offset += 4;\n   if(!client_hash) {\n-    offset += 4;\n-\n     if((offset >= packet->payload_packet_len) || (len >= packet->payload_packet_len-offset-1))\n       goto invalid_payload;\n \n     strncpy(&buf[buf_out_len], (const char *)&packet->payload[offset], len);\n     buf_out_len += len;\n     buf[buf_out_len++] = ';';\n-    offset += len;\n-  } else\n-    offset += 4 + len;\n+  }\n+  if (len > UINT32_MAX - offset)\n+    goto invalid_payload;\n+  offset += len;\n \n   if(offset+sizeof(u_int32_t) >= packet->payload_packet_len)\n     goto invalid_payload;\n   /* ssh.mac_algorithms_client_to_server [C] */\n   len = ntohl(*(u_int32_t*)&packet->payload[offset]);\n \n+  offset += 4;\n   if(client_hash) {\n-    offset += 4;\n-\n     if((offset >= packet->payload_packet_len) || (len >= packet->payload_packet_len-offset-1))\n       goto invalid_payload;\n \n     strncpy(&buf[buf_out_len], (const char *)&packet->payload[offset], len);\n     buf_out_len += len;\n     buf[buf_out_len++] = ';';\n-    offset += len;\n-  } else\n-    offset += 4 + len;\n+  }\n+  if (len > UINT32_MAX - offset)\n+    goto invalid_payload;\n+  offset += len;\n \n   if(offset+sizeof(u_int32_t) >= packet->payload_packet_len)\n     goto invalid_payload;\n   /* ssh.mac_algorithms_server_to_client [S] */\n   len = ntohl(*(u_int32_t*)&packet->payload[offset]);\n \n+  offset += 4;\n   if(!client_hash) {\n-    offset += 4;\n-\n     if((offset >= packet->payload_packet_len) || (len >= packet->payload_packet_len-offset-1))\n       goto invalid_payload;\n \n     strncpy(&buf[buf_out_len], (const char *)&packet->payload[offset], len);\n     buf_out_len += len;\n     buf[buf_out_len++] = ';';\n-    offset += len;\n-  } else\n-    offset += 4 + len;\n+  }\n+  if (len > UINT32_MAX - offset)\n+    goto invalid_payload;\n+  offset += len;\n \n   /* ssh.compression_algorithms_client_to_server [C] */\n   if(offset+sizeof(u_int32_t) >= packet->payload_packet_len)\n     goto invalid_payload;\n   len = ntohl(*(u_int32_t*)&packet->payload[offset]);\n \n+  offset += 4;\n   if(client_hash) {\n-    offset += 4;\n-\n     if((offset >= packet->payload_packet_len) || (len >= packet->payload_packet_len-offset-1))\n       goto invalid_payload;\n \n     strncpy(&buf[buf_out_len], (const char *)&packet->payload[offset], len);\n     buf_out_len += len;\n-    offset += len;\n-  } else\n-    offset += 4 + len;\n+  }\n+  if (len > UINT32_MAX - offset)\n+    goto invalid_payload;\n+  offset += len;\n \n   if(offset+sizeof(u_int32_t) >= packet->payload_packet_len)\n     goto invalid_payload;\n   /* ssh.compression_algorithms_server_to_client [S] */\n   len = ntohl(*(u_int32_t*)&packet->payload[offset]);\n \n+  offset += 4;\n   if(!client_hash) {\n-    offset += 4;\n-\n     if((offset >= packet->payload_packet_len) || (len >= packet->payload_packet_len-offset-1))\n       goto invalid_payload;\n \n     strncpy(&buf[buf_out_len], (const char *)&packet->payload[offset], len);\n     buf_out_len += len;\n-    offset += len;\n-  } else\n-    offset += 4 + len;\n+  }\n+  if (len > UINT32_MAX - offset)\n+    goto invalid_payload;\n+  offset += len;\n \n   /* ssh.languages_client_to_server [None] */\n "
    }
}