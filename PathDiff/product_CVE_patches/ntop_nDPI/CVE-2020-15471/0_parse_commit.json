{
    "current_hash": "61066fb106efa6d3d95b67e47b662de208b2b622",
    "parent_hash": "4ceff1dc77bb75919f9394983529d89c604a700f",
    "modified_file_0": {
        "mod_filename": "src/lib/ndpi_main.c",
        "status": "modified",
        "add_lines": 7,
        "dele_lines": 1,
        "patch": "@@ -4807,29 +4807,34 @@ u_int32_t ndpi_bytestream_to_ipv4(const u_int8_t *str, u_int16_t max_chars_to_re\n   u_int16_t read = 0;\n   u_int16_t oldread;\n   u_int32_t c;\n+\n   /* ip address must be X.X.X.X with each X between 0 and 255 */\n   oldread = read;\n   c = ndpi_bytestream_to_number(str, max_chars_to_read, &read);\n   if(c > 255 || oldread == read || max_chars_to_read == read || str[read] != '.')\n     return(0);\n+  \n   read++;\n   val = c << 24;\n   oldread = read;\n   c = ndpi_bytestream_to_number(&str[read], max_chars_to_read - read, &read);\n   if(c > 255 || oldread == read || max_chars_to_read == read || str[read] != '.')\n     return(0);\n+  \n   read++;\n   val = val + (c << 16);\n   oldread = read;\n   c = ndpi_bytestream_to_number(&str[read], max_chars_to_read - read, &read);\n   if(c > 255 || oldread == read || max_chars_to_read == read || str[read] != '.')\n     return(0);\n+  \n   read++;\n   val = val + (c << 8);\n   oldread = read;\n   c = ndpi_bytestream_to_number(&str[read], max_chars_to_read - read, &read);\n   if(c > 255 || oldread == read || max_chars_to_read == read)\n     return(0);\n+  \n   val = val + c;\n \n   *bytes_read = *bytes_read + read;\n@@ -4869,9 +4874,10 @@ void ndpi_parse_packet_line_info(struct ndpi_detection_module_struct *ndpi_str,\n \tint diff; /* No unsigned ! */\n \tu_int32_t a1 = a + 4;\n \n-\tdiff = ndpi_min(packet->payload_packet_len-a1, sizeof(flow->initial_binary_bytes));\n+\tdiff = packet->payload_packet_len - a1;\n \n \tif(diff > 0) {\n+\t  diff = ndpi_min(diff, sizeof(flow->initial_binary_bytes));\n \t  memcpy(&flow->initial_binary_bytes, &packet->payload[a1], diff);\n \t  flow->initial_binary_bytes_len = diff;\n \t}"
    }
}