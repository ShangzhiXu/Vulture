{
    "current_hash": "d919b2744cd05abae043490f0a3dd1946c1ccb8c",
    "parent_hash": "6a6f21478556ab431d799fcf239011f9c0efa8c8",
    "modified_file_0": {
        "mod_filename": "lib/sbi/message.c",
        "status": "modified",
        "add_lines": 19,
        "dele_lines": 14,
        "patch": "@@ -924,7 +924,7 @@ static int parse_json(ogs_sbi_message_t *message,\n     ogs_log_print(OGS_LOG_TRACE, \"%s\", json);\n     item = cJSON_Parse(json);\n     if (!item) {\n-        ogs_error(\"JSON parse error\");\n+        ogs_error(\"JSON parse error [%s]\", json);\n         return OGS_ERROR;\n     }\n \n@@ -1833,18 +1833,16 @@ static int on_header_value(\n     data = multipart_parser_get_data(parser);\n     ogs_assert(data);\n \n-    if (at && length) {\n+    if (data->num_of_part < OGS_SBI_MAX_NUM_OF_PART && at && length) {\n         SWITCH(data->header_field)\n         CASE(OGS_SBI_CONTENT_TYPE)\n-            if (data->part[data->num_of_part].content_type)\n-                ogs_free(data->part[data->num_of_part].content_type);\n+            ogs_assert(data->part[data->num_of_part].content_type == NULL);\n             data->part[data->num_of_part].content_type =\n                 ogs_strndup(at, length);\n             ogs_assert(data->part[data->num_of_part].content_type);\n             break;\n         CASE(OGS_SBI_CONTENT_ID)\n-            if (data->part[data->num_of_part].content_id)\n-                ogs_free(data->part[data->num_of_part].content_id);\n+            ogs_assert(data->part[data->num_of_part].content_id == NULL);\n             data->part[data->num_of_part].content_id =\n                 ogs_strndup(at, length);\n             ogs_assert(data->part[data->num_of_part].content_id);\n@@ -1867,7 +1865,7 @@ static int on_part_data(\n     data = multipart_parser_get_data(parser);\n     ogs_assert(data);\n \n-    if (at && length) {\n+    if (data->num_of_part < OGS_SBI_MAX_NUM_OF_PART && at && length) {\n         SWITCH(data->part[data->num_of_part].content_type)\n         CASE(OGS_SBI_CONTENT_JSON_TYPE)\n         CASE(OGS_SBI_CONTENT_5GNAS_TYPE)\n@@ -1901,9 +1899,9 @@ static int on_part_data(\n             break;\n \n         DEFAULT\n-            ogs_log_hexdump(OGS_LOG_FATAL, (unsigned char *)at, length);\n             ogs_error(\"Unknown content_type [%s]\",\n                     data->part[data->num_of_part].content_type);\n+            ogs_log_hexdump(OGS_LOG_ERROR, (unsigned char *)at, length);\n         END\n     }\n     return 0;\n@@ -1917,7 +1915,9 @@ static int on_part_data_end(multipart_parser *parser)\n     data = multipart_parser_get_data(parser);\n     ogs_assert(data);\n \n-    data->num_of_part++;\n+    if (data->num_of_part < OGS_SBI_MAX_NUM_OF_PART) {\n+        data->num_of_part++;\n+    }\n \n     return 0;\n }\n@@ -1967,6 +1967,11 @@ static int parse_multipart(\n     multipart_parser_free(parser);\n     ogs_free(boundary);\n \n+    if (data.num_of_part > OGS_SBI_MAX_NUM_OF_PART) {\n+        /* Overflow Issues #1247 */\n+        ogs_fatal(\"Overflow num_of_part[%d]\", data.num_of_part);\n+        ogs_assert_if_reached();\n+    }\n     for (i = 0; i < data.num_of_part; i++) {\n         SWITCH(data.part[i].content_type)\n         CASE(OGS_SBI_CONTENT_JSON_TYPE)\n@@ -2013,14 +2018,14 @@ static int parse_multipart(\n \n         DEFAULT\n             ogs_error(\"Unknown content-type[%s]\", data.part[i].content_type);\n+\n+            if (data.part[i].content_id)\n+                ogs_free(data.part[i].content_id);\n+            if (data.part[i].content_type)\n+                ogs_free(data.part[i].content_type);\n         END\n     }\n \n-    if (data.part[i].content_id)\n-        ogs_free(data.part[i].content_id);\n-    if (data.part[i].content_type)\n-        ogs_free(data.part[i].content_type);\n-\n     if (data.header_field)\n         ogs_free(data.header_field);\n "
    },
    "modified_file_1": {
        "mod_filename": "src/amf/namf-handler.c",
        "status": "modified",
        "add_lines": 7,
        "dele_lines": 3,
        "patch": "@@ -53,6 +53,8 @@ int amf_namf_comm_handle_n1_n2_message_transfer(\n     OpenAPI_n2_info_content_t *n2InfoContent = NULL;\n     OpenAPI_ref_to_binary_data_t *ngapData = NULL;\n \n+    OpenAPI_ngap_ie_type_e ngapIeType = OpenAPI_ngap_ie_type_NULL;\n+\n     ogs_assert(stream);\n     ogs_assert(recvmsg);\n \n@@ -117,12 +119,15 @@ int amf_namf_comm_handle_n1_n2_message_transfer(\n             ogs_error(\"No smInfo\");\n             return OGS_ERROR;\n         }\n+\n         n2InfoContent = smInfo->n2_info_content;\n         if (!n2InfoContent) {\n             ogs_error(\"No n2InfoContent\");\n             return OGS_ERROR;\n         }\n \n+        ngapIeType = n2InfoContent->ngap_ie_type;\n+\n         ngapData = n2InfoContent->ngap_data;\n         if (!ngapData || !ngapData->content_id) {\n             ogs_error(\"No ngapData\");\n@@ -153,7 +158,7 @@ int amf_namf_comm_handle_n1_n2_message_transfer(\n \n     sendmsg.N1N2MessageTransferRspData = &N1N2MessageTransferRspData;\n \n-    switch (n2InfoContent->ngap_ie_type) {\n+    switch (ngapIeType) {\n     case OpenAPI_ngap_ie_type_PDU_RES_SETUP_REQ:\n         if (!n2buf) {\n             ogs_error(\"[%s] No N2 SM Content\", amf_ue->supi);\n@@ -390,8 +395,7 @@ int amf_namf_comm_handle_n1_n2_message_transfer(\n         break;\n \n     default:\n-        ogs_error(\"Not implemented ngap_ie_type[%d]\",\n-                n2InfoContent->ngap_ie_type);\n+        ogs_error(\"Not implemented ngapIeType[%d]\", ngapIeType);\n         ogs_assert_if_reached();\n     }\n "
    }
}