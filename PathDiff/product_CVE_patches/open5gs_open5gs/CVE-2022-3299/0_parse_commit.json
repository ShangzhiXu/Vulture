{
    "current_hash": "724fa568435dae45ef0c3a48b2aabde052afae88",
    "parent_hash": "c2f6a020a7b505e0d55748464406fb9aca062026",
    "modified_file_0": {
        "mod_filename": "lib/sbi/client.c",
        "status": "modified",
        "add_lines": 29,
        "dele_lines": 11,
        "patch": "@@ -44,6 +44,7 @@ typedef struct connection_s {\n \n     char *memory;\n     size_t size;\n+    bool memory_overflow;\n \n     char *location;\n \n@@ -533,6 +534,8 @@ static void check_multi_info(ogs_sbi_client_t *client)\n \n             res = resource->data.result;\n             if (res == CURLE_OK) {\n+                ogs_log_level_e level = OGS_LOG_DEBUG;\n+\n                 response = ogs_sbi_response_new();\n                 ogs_assert(response);\n \n@@ -546,7 +549,17 @@ static void check_multi_info(ogs_sbi_client_t *client)\n                 response->h.uri = ogs_strdup(url);\n                 ogs_assert(response->h.uri);\n \n-                ogs_debug(\"[%d:%s] %s\",\n+                if (content_type)\n+                    ogs_sbi_header_set(response->http.headers,\n+                            OGS_SBI_CONTENT_TYPE, content_type);\n+                if (conn->location)\n+                    ogs_sbi_header_set(response->http.headers,\n+                            OGS_SBI_LOCATION, conn->location);\n+\n+                if (conn->memory_overflow == true)\n+                    level = OGS_LOG_ERROR;\n+\n+                ogs_log_message(level, 0, \"[%d:%s] %s\",\n                         response->status, response->h.method, response->h.uri);\n \n                 if (conn->memory) {\n@@ -557,16 +570,17 @@ static void check_multi_info(ogs_sbi_client_t *client)\n                     ogs_assert(response->http.content_length);\n                 }\n \n-                ogs_debug(\"RECEIVED[%d]\", (int)response->http.content_length);\n+                ogs_log_message(level, 0, \"RECEIVED[%d]\",\n+                        (int)response->http.content_length);\n                 if (response->http.content_length && response->http.content)\n-                    ogs_debug(\"%s\", response->http.content);\n+                    ogs_log_message(level, 0, \"%s\", response->http.content);\n+\n+                if (conn->memory_overflow == true) {\n+                    ogs_sbi_response_free(response);\n+                    connection_remove(conn);\n+                    break;\n+                }\n \n-                if (content_type)\n-                    ogs_sbi_header_set(response->http.headers,\n-                            OGS_SBI_CONTENT_TYPE, content_type);\n-                if (conn->location)\n-                    ogs_sbi_header_set(response->http.headers,\n-                            OGS_SBI_LOCATION, conn->location);\n             } else\n                 ogs_warn(\"[%d] %s\", res, conn->error);\n \n@@ -727,8 +741,12 @@ static size_t write_cb(void *contents, size_t size, size_t nmemb, void *data)\n     realsize = size * nmemb;\n     ptr = ogs_realloc(conn->memory, conn->size + realsize + 1);\n     if(!ptr) {\n-        ogs_fatal(\"not enough memory (realloc returned NULL)\");\n-        ogs_assert_if_reached();\n+        conn->memory_overflow = true;\n+\n+        ogs_error(\"Overflow : conn->size[%d], realsize[%d]\",\n+                    (int)conn->size, (int)realsize);\n+        ogs_log_hexdump(OGS_LOG_ERROR, contents, realsize);\n+\n         return 0;\n     }\n "
    },
    "modified_file_1": {
        "mod_filename": "lib/sbi/nghttp2-server.c",
        "status": "modified",
        "add_lines": 36,
        "dele_lines": 17,
        "patch": "@@ -82,6 +82,7 @@ typedef struct ogs_sbi_stream_s {\n \n     int32_t                 stream_id;\n     ogs_sbi_request_t       *request;\n+    bool                    memory_overflow;\n \n     ogs_sbi_session_t       *session;\n } ogs_sbi_stream_t;\n@@ -791,12 +792,23 @@ static int on_frame_recv(nghttp2_session *session,\n     case NGHTTP2_DATA:\n         /* HEADERS or DATA frame with +END_STREAM flag */\n         if (frame->hd.flags & NGHTTP2_FLAG_END_STREAM) {\n+            ogs_log_level_e level = OGS_LOG_DEBUG;\n \n-            ogs_debug(\"[%s] %s\", request->h.method, request->h.uri);\n+            if (stream->memory_overflow == true)\n+                level = OGS_LOG_ERROR;\n+\n+            ogs_log_message(level, 0,\n+                    \"[%s] %s\", request->h.method, request->h.uri);\n \n             if (request->http.content_length && request->http.content) {\n-                ogs_debug(\"RECEIVED: %d\", (int)request->http.content_length);\n-                ogs_debug(\"%s\", request->http.content);\n+                ogs_log_message(level, 0,\n+                        \"RECEIVED: %d\", (int)request->http.content_length);\n+                ogs_log_message(level, 0, \"%s\", request->http.content);\n+            }\n+\n+            if (stream->memory_overflow == true) {\n+                ogs_error(\"[DROP] Overflow\");\n+                break;\n             }\n \n             if (server->cb(request, stream) != OGS_OK) {\n@@ -967,23 +979,30 @@ static int on_data_chunk_recv(nghttp2_session *session, uint8_t flags,\n     ogs_assert(len);\n \n     if (request->http.content == NULL) {\n-        request->http.content_length = len;\n-        request->http.content =\n-            (char*)ogs_malloc(request->http.content_length + 1);\n-        ogs_assert(request->http.content);\n+        ogs_assert(request->http.content_length == 0);\n+        ogs_assert(offset == 0);\n+\n+        request->http.content = (char*)ogs_malloc(len + 1);\n     } else {\n-        offset = request->http.content_length;\n-        if ((request->http.content_length + len) > OGS_HUGE_LEN) {\n-            ogs_error(\"Overflow : Content-Length[%d], len[%d]\",\n-                        (int)request->http.content_length, (int)len);\n-            ogs_assert_if_reached();\n-        }\n-        request->http.content_length += len;\n-        request->http.content = (char *)ogs_realloc(\n-                request->http.content, request->http.content_length + 1);\n-        ogs_assert(request->http.content);\n+        ogs_assert(request->http.content_length != 0);\n+\n+        request->http.content = (char*)ogs_realloc(\n+                request->http.content, request->http.content_length + len + 1);\n     }\n \n+    if (!request->http.content) {\n+        stream->memory_overflow = true;\n+\n+        ogs_error(\"Overflow : Content-Length[%d], len[%d]\",\n+                    (int)request->http.content_length, (int)len);\n+        ogs_log_hexdump(OGS_LOG_ERROR, data, len);\n+\n+        return 0;\n+    }\n+\n+    offset = request->http.content_length;\n+    request->http.content_length += len;\n+\n     memcpy(request->http.content + offset, data, len);\n     request->http.content[request->http.content_length] = '\\0';\n "
    }
}