{
    "current_hash": "50a19c6ff828c58e5dab13830bd3dacde268afe5",
    "parent_hash": "f59ba3cdd76fdc08c004f42aa915996f6f420899",
    "modified_file_0": {
        "mod_filename": "libcontainer/init_linux.go",
        "status": "modified",
        "add_lines": 2,
        "dele_lines": 1,
        "patch": "@@ -77,7 +77,8 @@ func newContainerInit(t initType, pipe *os.File, stateDirFD int) (initer, error)\n \tswitch t {\n \tcase initSetns:\n \t\treturn &linuxSetnsInit{\n-\t\t\tconfig: config,\n+\t\t\tconfig:     config,\n+\t\t\tstateDirFD: stateDirFD,\n \t\t}, nil\n \tcase initStandard:\n \t\treturn &linuxStandardInit{"
    },
    "modified_file_1": {
        "mod_filename": "libcontainer/nsenter/nsexec.c",
        "status": "modified",
        "add_lines": 5,
        "dele_lines": 0,
        "patch": "@@ -408,6 +408,11 @@ void nsexec(void)\n \tif (pipenum == -1)\n \t\treturn;\n \n+\t/* make the process non-dumpable */\n+\tif (prctl(PR_SET_DUMPABLE, 0, 0, 0, 0) != 0) {\n+\t\tbail(\"failed to set process as non-dumpable\");\n+\t}\n+\n \t/* Parse all of the netlink configuration. */\n \tnl_parse(pipenum, &config);\n "
    },
    "modified_file_2": {
        "mod_filename": "libcontainer/setns_init_linux.go",
        "status": "modified",
        "add_lines": 6,
        "dele_lines": 1,
        "patch": "@@ -5,6 +5,7 @@ package libcontainer\n import (\n \t\"fmt\"\n \t\"os\"\n+\t\"syscall\"\n \n \t\"github.com/opencontainers/runc/libcontainer/apparmor\"\n \t\"github.com/opencontainers/runc/libcontainer/keys\"\n@@ -16,7 +17,8 @@ import (\n // linuxSetnsInit performs the container's initialization for running a new process\n // inside an existing container.\n type linuxSetnsInit struct {\n-\tconfig *initConfig\n+\tconfig     *initConfig\n+\tstateDirFD int\n }\n \n func (l *linuxSetnsInit) getSessionRingName() string {\n@@ -49,5 +51,8 @@ func (l *linuxSetnsInit) Init() error {\n \tif err := label.SetProcessLabel(l.config.ProcessLabel); err != nil {\n \t\treturn err\n \t}\n+\t// close the statedir fd before exec because the kernel resets dumpable in the wrong order\n+\t// https://github.com/torvalds/linux/blob/v4.9/fs/exec.c#L1290-L1318\n+\tsyscall.Close(l.stateDirFD)\n \treturn system.Execv(l.config.Args[0], l.config.Args[0:], os.Environ())\n }"
    },
    "modified_file_3": {
        "mod_filename": "libcontainer/standard_init_linux.go",
        "status": "modified",
        "add_lines": 3,
        "dele_lines": 0,
        "patch": "@@ -171,6 +171,9 @@ func (l *linuxStandardInit) Init() error {\n \t\t\treturn newSystemErrorWithCause(err, \"init seccomp\")\n \t\t}\n \t}\n+\t// close the statedir fd before exec because the kernel resets dumpable in the wrong order\n+\t// https://github.com/torvalds/linux/blob/v4.9/fs/exec.c#L1290-L1318\n+\tsyscall.Close(l.stateDirFD)\n \tif err := syscall.Exec(name, l.config.Args[0:], os.Environ()); err != nil {\n \t\treturn newSystemErrorWithCause(err, \"exec user process\")\n \t}"
    }
}