{
    "current_hash": "c3a3a0c424322009fec3ab735fb20ce8f6e19e70",
    "parent_hash": "b8c3161281f8e15873f8decabd8eac461717aefe",
    "modified_file_0": {
        "mod_filename": "src/core/meshcop/commissioner.cpp",
        "status": "modified",
        "add_lines": 21,
        "dele_lines": 15,
        "patch": "@@ -255,7 +255,8 @@ otError Commissioner::AddJoiner(const Mac::ExtAddress *aEui64, const char *aPskd\n \n     VerifyOrExit(mState == OT_COMMISSIONER_STATE_ACTIVE, error = OT_ERROR_INVALID_STATE);\n \n-    VerifyOrExit(strlen(aPskd) <= Dtls::kPskMaxLength, error = OT_ERROR_INVALID_ARGS);\n+    VerifyOrExit(strnlen(aPskd, Dtls::kPskMaxLength + 1) <= Dtls::kPskMaxLength, error = OT_ERROR_INVALID_ARGS);\n+\n     RemoveJoiner(aEui64, 0); // remove immediately\n \n     for (Joiner *joiner = &mJoiners[0]; joiner < OT_ARRAY_END(mJoiners); joiner++)\n@@ -1103,28 +1104,33 @@ otError Commissioner::GeneratePskc(const char *              aPassPhrase,\n                                    const Mac::ExtendedPanId &aExtPanId,\n                                    Pskc &                    aPskc)\n {\n-    otError     error      = OT_ERROR_NONE;\n-    const char *saltPrefix = \"Thread\";\n-    uint8_t     salt[OT_PBKDF2_SALT_MAX_LEN];\n-    uint16_t    saltLen = 0;\n-\n-    VerifyOrExit((strlen(aPassPhrase) >= OT_COMMISSIONING_PASSPHRASE_MIN_SIZE) &&\n-                     (strlen(aPassPhrase) <= OT_COMMISSIONING_PASSPHRASE_MAX_SIZE) &&\n-                     (strlen(aNetworkName) <= OT_NETWORK_NAME_MAX_SIZE),\n+    otError    error        = OT_ERROR_NONE;\n+    const char saltPrefix[] = \"Thread\";\n+    uint8_t    salt[OT_PBKDF2_SALT_MAX_LEN];\n+    uint16_t   saltLen = 0;\n+    uint16_t   passphraseLen;\n+    uint8_t    networkNameLen;\n+\n+    passphraseLen  = static_cast<uint16_t>(strnlen(aPassPhrase, OT_COMMISSIONING_PASSPHRASE_MAX_SIZE + 1));\n+    networkNameLen = static_cast<uint8_t>(strnlen(aNetworkName, OT_NETWORK_NAME_MAX_SIZE + 1));\n+\n+    VerifyOrExit((passphraseLen >= OT_COMMISSIONING_PASSPHRASE_MIN_SIZE) &&\n+                     (passphraseLen <= OT_COMMISSIONING_PASSPHRASE_MAX_SIZE) &&\n+                     (networkNameLen <= OT_NETWORK_NAME_MAX_SIZE),\n                  error = OT_ERROR_INVALID_ARGS);\n \n     memset(salt, 0, sizeof(salt));\n-    memcpy(salt, saltPrefix, strlen(saltPrefix));\n-    saltLen += static_cast<uint16_t>(strlen(saltPrefix));\n+    memcpy(salt, saltPrefix, sizeof(saltPrefix) - 1);\n+    saltLen += static_cast<uint16_t>(sizeof(saltPrefix) - 1);\n \n     memcpy(salt + saltLen, aExtPanId.m8, sizeof(aExtPanId));\n     saltLen += OT_EXT_PAN_ID_SIZE;\n \n-    memcpy(salt + saltLen, aNetworkName, strlen(aNetworkName));\n-    saltLen += static_cast<uint16_t>(strlen(aNetworkName));\n+    memcpy(salt + saltLen, aNetworkName, networkNameLen);\n+    saltLen += networkNameLen;\n \n-    otPbkdf2Cmac(reinterpret_cast<const uint8_t *>(aPassPhrase), static_cast<uint16_t>(strlen(aPassPhrase)),\n-                 reinterpret_cast<const uint8_t *>(salt), saltLen, 16384, OT_PSKC_MAX_SIZE, aPskc.m8);\n+    otPbkdf2Cmac(reinterpret_cast<const uint8_t *>(aPassPhrase), passphraseLen, reinterpret_cast<const uint8_t *>(salt),\n+                 saltLen, 16384, OT_PSKC_MAX_SIZE, aPskc.m8);\n \n exit:\n     return error;"
    }
}