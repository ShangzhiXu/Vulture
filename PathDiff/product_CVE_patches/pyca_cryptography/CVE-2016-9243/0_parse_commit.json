{
    "current_hash": "b924696b2e8731f39696584d12cceeb3aeb2d874",
    "parent_hash": "21ac453a1afe01e3f47b7daad9af379725392162",
    "modified_file_0": {
        "mod_filename": "src/cryptography/hazmat/primitives/kdf/hkdf.py",
        "status": "modified",
        "add_lines": 1,
        "dele_lines": 1,
        "patch": "@@ -91,7 +91,7 @@ def _expand(self, key_material):\n         output = [b\"\"]\n         counter = 1\n \n-        while (self._algorithm.digest_size // 8) * len(output) < self._length:\n+        while self._algorithm.digest_size * (len(output) - 1) < self._length:\n             h = hmac.HMAC(key_material, self._algorithm, backend=self._backend)\n             h.update(output[-1])\n             h.update(self._info)"
    },
    "modified_file_1": {
        "mod_filename": "tests/hazmat/primitives/test_hkdf.py",
        "status": "modified",
        "add_lines": 11,
        "dele_lines": 0,
        "patch": "@@ -142,6 +142,17 @@ def test_unicode_typeerror(self, backend):\n \n             hkdf.verify(b\"foo\", u\"bar\")\n \n+    def test_derive_short_output(self, backend):\n+        hkdf = HKDF(\n+            hashes.SHA256(),\n+            4,\n+            salt=None,\n+            info=None,\n+            backend=backend\n+        )\n+\n+        assert hkdf.derive(b\"\\x01\" * 16) == b\"gJ\\xfb{\"\n+\n \n @pytest.mark.requires_backend_interface(interface=HMACBackend)\n class TestHKDFExpand(object):"
    }
}