{
    "current_hash": "b436c8d7e5346a241b00511a11585936895d959d",
    "parent_hash": "ee3e40c663e138473fffb9abc58214f6be130f03",
    "modified_file_0": {
        "mod_filename": "src/rcore.c",
        "status": "modified",
        "add_lines": 10,
        "dele_lines": 8,
        "patch": "@@ -1994,7 +1994,9 @@ void SetClipboardText(const char *text)\n     glfwSetClipboardString(CORE.Window.handle, text);\n #endif\n #if defined(PLATFORM_WEB)\n-    emscripten_run_script(TextFormat(\"navigator.clipboard.writeText('%s')\", text));\n+    // Security check to (partially) avoid malicious code\n+    if (strchr(text, '\\'') != NULL) TRACELOG(LOG_WARNING, \"SYSTEM: Provided Clipboard could be potentially malicious, avoid [\\'] character\");\n+    else emscripten_run_script(TextFormat(\"navigator.clipboard.writeText('%s')\", text));\n #endif\n }\n \n@@ -2006,6 +2008,7 @@ const char *GetClipboardText(void)\n     return glfwGetClipboardString(CORE.Window.handle);\n #endif\n #if defined(PLATFORM_WEB)\n+/*\n     // Accessing clipboard data from browser is tricky due to security reasons\n     // The method to use is navigator.clipboard.readText() but this is an asynchronous method\n     // that will return at some moment after the function is called with the required data\n@@ -2019,7 +2022,7 @@ const char *GetClipboardText(void)\n \n     // Another approach could be just copy the data in a HTML text field and try to retrieve it\n     // later on if available... and clean it for future accesses\n-\n+*/\n     return NULL;\n #endif\n     return NULL;\n@@ -2910,6 +2913,9 @@ void SetConfigFlags(unsigned int flags)\n void TakeScreenshot(const char *fileName)\n {\n #if defined(SUPPORT_MODULE_RTEXTURES)\n+    // Security check to (partially) avoid malicious code on PLATFORM_WEB\n+    if (strchr(fileName, '\\'') != NULL) { TRACELOG(LOG_WARNING, \"SYSTEM: Provided fileName could be potentially malicious, avoid [\\'] character\");  return; }\n+\n     Vector2 scale = GetWindowScaleDPI();\n     unsigned char *imgData = rlReadScreenPixels((int)((float)CORE.Window.render.width*scale.x), (int)((float)CORE.Window.render.height*scale.y));\n     Image image = { imgData, (int)((float)CORE.Window.render.width*scale.x), (int)((float)CORE.Window.render.height*scale.y), 1, PIXELFORMAT_UNCOMPRESSED_R8G8B8A8 };\n@@ -3536,12 +3542,8 @@ unsigned char *DecodeDataBase64(const unsigned char *data, int *outputSize)\n // Ref: https://github.com/raysan5/raylib/issues/686\n void OpenURL(const char *url)\n {\n-    // Small security check trying to avoid (partially) malicious code...\n-    // sorry for the inconvenience when you hit this point...\n-    if (strchr(url, '\\'') != NULL)\n-    {\n-        TRACELOG(LOG_WARNING, \"SYSTEM: Provided URL is not valid\");\n-    }\n+    // Security check to (aprtially) avoid malicious code on PLATFORM_WEB\n+    if (strchr(url, '\\'') != NULL) TRACELOG(LOG_WARNING, \"SYSTEM: Provided URL could be potentially malicious, avoid [\\'] character\");\n     else\n     {\n #if defined(PLATFORM_DESKTOP)"
    }
}