src/ed/relic_ed_mul.c
@@ -39,9 +39,10 @@
 #if ED_MUL == LWNAF || !defined(STRIP)
 
 static void ed_mul_naf_imp(ed_t r, const ed_t p, const bn_t k) {
-	int l, i, n;
+	int i, n;
 	int8_t naf[RLC_FP_BITS + 1];
 	ed_t t[1 << (ED_WIDTH - 2)];
+	size_t l;
 
 	if (bn_is_zero(k)) {
 		ed_set_infty(r);
@@ -110,9 +111,10 @@ static void ed_mul_naf_imp(ed_t r, const ed_t p, const bn_t k) {
 
 static void ed_mul_reg_imp(ed_t r, const ed_t p, const bn_t k) {
 	bn_t _k;
-	int i, j, l, n;
+	int i, j, n;
 	int8_t s, reg[RLC_CEIL(RLC_FP_BITS + 1, ED_WIDTH - 1)];
 	ed_t t[1 << (ED_WIDTH - 2)], u, v;
+	size_t l;
 
 	bn_null(_k);
 	if (bn_is_zero(k)) {
@@ -233,8 +235,8 @@ void ed_mul_basic(ed_t r, const ed_t p, const bn_t k) {
 
 void ed_mul_slide(ed_t r, const ed_t p, const bn_t k) {
 	ed_t t[1 << (EP_WIDTH - 1)], q;
-	int i, j, l;
 	uint8_t win[RLC_FP_BITS + 1];
+	size_t l;
 
 	ed_null(q);
 
@@ -244,7 +246,7 @@ void ed_mul_slide(ed_t r, const ed_t p, const bn_t k) {
 	}
 
 	RLC_TRY {
-		for (i = 0; i < (1 << (EP_WIDTH - 1)); i ++) {
+		for (size_t i = 0; i < (1 << (EP_WIDTH - 1)); i ++) {
 			ed_null(t[i]);
 			ed_new(t[i]);
 		}
@@ -259,7 +261,7 @@ void ed_mul_slide(ed_t r, const ed_t p, const bn_t k) {
 #endif
 
 		/* Create table. */
-		for (i = 1; i < (1 << (EP_WIDTH - 1)); i++) {
+		for (size_t i = 1; i < (1 << (EP_WIDTH - 1)); i++) {
 			ed_add(t[i], t[i - 1], q);
 		}
 
@@ -270,11 +272,11 @@ void ed_mul_slide(ed_t r, const ed_t p, const bn_t k) {
 		ed_set_infty(q);
 		l = RLC_FP_BITS + 1;
 		bn_rec_slw(win, &l, k, EP_WIDTH);
-		for (i = 0; i < l; i++) {
+		for (size_t i = 0; i < l; i++) {
 			if (win[i] == 0) {
 				ed_dbl(q, q);
 			} else {
-				for (j = 0; j < util_bits_dig(win[i]); j++) {
+				for (size_t j = 0; j < util_bits_dig(win[i]); j++) {
 					ed_dbl(q, q);
 				}
 				ed_add(q, q, t[win[i] >> 1]);
@@ -290,7 +292,7 @@ void ed_mul_slide(ed_t r, const ed_t p, const bn_t k) {
 		RLC_THROW(ERR_CAUGHT);
 	}
 	RLC_FINALLY {
-		for (i = 0; i < (1 << (EP_WIDTH - 1)); i++) {
+		for (size_t i = 0; i < (1 << (EP_WIDTH - 1)); i++) {
 			ed_free(t[i]);
 		}
 		ed_free(q);
@@ -409,7 +411,7 @@ void ed_mul_dig(ed_t r, const ed_t p, dig_t k) {
 	ed_t t;
 	bn_t _k;
 	int8_t u, naf[RLC_DIG + 1];
-	int l;
+	size_t l;
 
 	ed_null(t);
 	bn_null(_k);