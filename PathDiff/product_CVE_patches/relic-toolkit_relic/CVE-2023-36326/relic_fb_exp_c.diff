src/fb/relic_fb_exp.c
@@ -44,7 +44,7 @@
 #if FB_EXP == BASIC || !defined(STRIP)
 
 void fb_exp_basic(fb_t c, const fb_t a, const bn_t b) {
-	int i, l;
+	size_t l;
 	fb_t r;
 
 	if (bn_is_zero(b)) {
@@ -61,7 +61,7 @@ void fb_exp_basic(fb_t c, const fb_t a, const bn_t b) {
 
 		fb_copy(r, a);
 
-		for (i = l - 2; i >= 0; i--) {
+		for (int i = l - 2; i >= 0; i--) {
 			fb_sqr(r, r);
 			if (bn_get_bit(b, i)) {
 				fb_mul(r, r, a);
@@ -88,8 +88,8 @@ void fb_exp_basic(fb_t c, const fb_t a, const bn_t b) {
 
 void fb_exp_slide(fb_t c, const fb_t a, const bn_t b) {
 	fb_t t[1 << (FB_WIDTH - 1)], r;
-	int i, j, l;
 	uint8_t win[RLC_FB_BITS + 1];
+	size_t l;
 
 	fb_null(r);
 
@@ -100,12 +100,12 @@ void fb_exp_slide(fb_t c, const fb_t a, const bn_t b) {
 
 
 	/* Initialize table. */
-	for (i = 0; i < (1 << (FB_WIDTH - 1)); i++) {
+	for (size_t i = 0; i < (1 << (FB_WIDTH - 1)); i++) {
 		fb_null(t[i]);
 	}
 
 	RLC_TRY {
-		for (i = 0; i < (1 << (FB_WIDTH - 1)); i ++) {
+		for (size_t i = 0; i < (1 << (FB_WIDTH - 1)); i ++) {
 			fb_new(t[i]);
 		}
 		fb_new(r);
@@ -114,18 +114,18 @@ void fb_exp_slide(fb_t c, const fb_t a, const bn_t b) {
 		fb_sqr(r, a);
 
 		/* Create table. */
-		for (i = 1; i < 1 << (FB_WIDTH - 1); i++) {
+		for (size_t i = 1; i < 1 << (FB_WIDTH - 1); i++) {
 			fb_mul(t[i], t[i - 1], r);
 		}
 
 		fb_set_dig(r, 1);
 		l = RLC_FB_BITS + 1;
 		bn_rec_slw(win, &l, b, FB_WIDTH);
-		for (i = 0; i < l; i++) {
+		for (size_t i = 0; i < l; i++) {
 			if (win[i] == 0) {
 				fb_sqr(r, r);
 			} else {
-				for (j = 0; j < util_bits_dig(win[i]); j++) {
+				for (size_t j = 0; j < util_bits_dig(win[i]); j++) {
 					fb_sqr(r, r);
 				}
 				fb_mul(r, r, t[win[i] >> 1]);
@@ -142,7 +142,7 @@ void fb_exp_slide(fb_t c, const fb_t a, const bn_t b) {
 		RLC_THROW(ERR_CAUGHT);
 	}
 	RLC_FINALLY {
-		for (i = 0; i < (1 << (FB_WIDTH - 1)); i++) {
+		for (size_t i = 0; i < (1 << (FB_WIDTH - 1)); i++) {
 			fb_free(t[i]);
 		}
 		fb_free(r);