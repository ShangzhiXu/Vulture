include/relic_md.h
@@ -134,7 +134,7 @@ enum {
  * @param[in] msg				- the message to hash.
  * @param[in] len				- the message length in bytes.
  */
-void md_map_sh224(uint8_t *hash, const uint8_t *msg, int len);
+void md_map_sh224(uint8_t *hash, const uint8_t *msg, size_t len);
 
 /**
  * Computes the SHA-256 hash function.
@@ -143,7 +143,7 @@ void md_map_sh224(uint8_t *hash, const uint8_t *msg, int len);
  * @param[in] msg				- the message to hash.
  * @param[in] len				- the message length in bytes.
  */
-void md_map_sh256(uint8_t *hash, const uint8_t *msg, int len);
+void md_map_sh256(uint8_t *hash, const uint8_t *msg, size_t len);
 
 /**
  * Computes the SHA-384 hash function.
@@ -152,7 +152,7 @@ void md_map_sh256(uint8_t *hash, const uint8_t *msg, int len);
  * @param[in] msg				- the message to hash.
  * @param[in] len				- the message length in bytes.
  */
-void md_map_sh384(uint8_t *hash, const uint8_t *msg, int len);
+void md_map_sh384(uint8_t *hash, const uint8_t *msg, size_t len);
 
 /**
  * Computes the SHA-512 hash function.
@@ -161,7 +161,7 @@ void md_map_sh384(uint8_t *hash, const uint8_t *msg, int len);
  * @param[in] msg				- the message to hash.
  * @param[in] len				- the message length in bytes.
  */
-void md_map_sh512(uint8_t *hash, const uint8_t *msg, int len);
+void md_map_sh512(uint8_t *hash, const uint8_t *msg, size_t len);
 
 /**
  * Computes the BLAKE2s-160 hash function.
@@ -170,7 +170,7 @@ void md_map_sh512(uint8_t *hash, const uint8_t *msg, int len);
  * @param[in] msg				- the message to hash.
  * @param[in] len				- the message length in bytes.
  */
-void md_map_b2s160(uint8_t *hash, const uint8_t *msg, int len);
+void md_map_b2s160(uint8_t *hash, const uint8_t *msg, size_t len);
 
 /**
  * Computes the BLAKE2s-256 hash function.
@@ -179,7 +179,7 @@ void md_map_b2s160(uint8_t *hash, const uint8_t *msg, int len);
  * @param[in] msg				- the message to hash.
  * @param[in] len				- the message length in bytes.
  */
-void md_map_b2s256(uint8_t *hash, const uint8_t *msg, int len);
+void md_map_b2s256(uint8_t *hash, const uint8_t *msg, size_t len);
 
 /**
  * Derives a key from shared secret material through the standardized KDF2
@@ -190,7 +190,7 @@ void md_map_b2s256(uint8_t *hash, const uint8_t *msg, int len);
  * @param[in] in				- the shared secret.
  * @param[in] in_len			- the length of the shared secret in bytes.
  */
-void md_kdf(uint8_t *key, int key_len, const uint8_t *in, int in_len);
+void md_kdf(uint8_t *key, size_t key_len, const uint8_t *in, size_t in_len);
 
 /**
  * Derives a mask from shared secret material through the PKCS#1 2.1 MGF1
@@ -201,7 +201,7 @@ void md_kdf(uint8_t *key, int key_len, const uint8_t *in, int in_len);
  * @param[in] in				- the shared secret.
  * @param[in] in_len			- the length of the shared secret in bytes.
  */
-void md_mgf(uint8_t *mask, int mask_len, const uint8_t *in, int in_len);
+void md_mgf(uint8_t *mask, size_t mask_len, const uint8_t *in, size_t in_len);
 
 /**
  * Computes a Message Authentication Code through HMAC.
@@ -212,8 +212,8 @@ void md_mgf(uint8_t *mask, int mask_len, const uint8_t *in, int in_len);
  * @param[in] key				- the cryptographic key.
  * @param[in] key_len			- the size of the key in bytes.
  */
-void md_hmac(uint8_t *mac, const uint8_t *in, int in_len, const uint8_t *key,
-		int key_len);
+void md_hmac(uint8_t *mac, const uint8_t *in, size_t in_len, const uint8_t *key,
+		size_t key_len);
 
 /**
  * Map a byte vector and optional domain separation tag to an arbitrary-length
@@ -226,8 +226,8 @@ void md_hmac(uint8_t *mac, const uint8_t *in, int in_len, const uint8_t *key,
  * @param[in] dst					- the domain separation tag.
  * @param[in] dst_len				- the domain separation tag length in bytes.
  */
-void md_xmd_sh224(uint8_t *buf, int buf_len, const uint8_t *in, int in_len,
-		const uint8_t *dst, int dst_len);
+void md_xmd_sh224(uint8_t *buf, size_t buf_len, const uint8_t *in,
+		size_t in_len, const uint8_t *dst, size_t dst_len);
 
 /**
  * Map a byte vector and optional domain separation tag to an arbitrary-length
@@ -240,8 +240,8 @@ void md_xmd_sh224(uint8_t *buf, int buf_len, const uint8_t *in, int in_len,
  * @param[in] dst					- the domain separation tag.
  * @param[in] dst_len				- the domain separation tag length in bytes.
  */
-void md_xmd_sh256(uint8_t *buf, int buf_len, const uint8_t *in, int in_len,
-		const uint8_t *dst, int dst_len);
+void md_xmd_sh256(uint8_t *buf, size_t buf_len, const uint8_t *in,
+		size_t in_len, const uint8_t *dst, size_t dst_len);
 
 /**
  * Map a byte vector and optional domain separation tag to an arbitrary-length
@@ -254,8 +254,8 @@ void md_xmd_sh256(uint8_t *buf, int buf_len, const uint8_t *in, int in_len,
  * @param[in] dst					- the domain separation tag.
  * @param[in] dst_len				- the domain separation tag length in bytes.
  */
-void md_xmd_sh384(uint8_t *buf, int buf_len, const uint8_t *in, int in_len,
-		const uint8_t *dst, int dst_len);
+void md_xmd_sh384(uint8_t *buf, size_t buf_len, const uint8_t *in,
+		size_t in_len, const uint8_t *dst, size_t dst_len);
 
 /**
  * Map a byte vector and optional domain separation tag to an arbitrary-length
@@ -268,7 +268,7 @@ void md_xmd_sh384(uint8_t *buf, int buf_len, const uint8_t *in, int in_len,
  * @param[in] dst					- the domain separation tag.
  * @param[in] dst_len				- the domain separation tag length in bytes.
  */
-void md_xmd_sh512(uint8_t *buf, int buf_len, const uint8_t *in, int in_len,
-		const uint8_t *dst, int dst_len);
+void md_xmd_sh512(uint8_t *buf, size_t buf_len, const uint8_t *in,
+		size_t in_len, const uint8_t *dst, size_t dst_len);
 
 #endif /* !RLC_MD_H */