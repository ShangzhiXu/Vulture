{
    "current_hash": "522ebfa7cee96fb325a22ea3a2464a63485886a8",
    "parent_hash": "57f7ece78410a8aae86aa4625fb7556897db384c",
    "modified_file_0": {
        "mod_filename": "manifest",
        "status": "modified",
        "add_lines": 7,
        "dele_lines": 7,
        "patch": "@@ -1,5 +1,5 @@\n-C Fix\\sa\\sproblem\\sthat\\scomes\\sup\\swhen\\susing\\sgenerated\\scolumns\\sthat\\sevaluate\\sto\\sa\\nconstant\\sin\\san\\sindex\\sand\\sthen\\smaking\\suse\\sof\\sthat\\sindex\\sin\\sa\\sjoin.\n-D 2019-11-21T18:28:44.463\n+C Whenever\\sa\\sgenerated\\scolumn\\sis\\sused,\\sassume\\sthat\\sall\\scolumns\\sare\\sused.\n+D 2019-11-21T19:37:00.986\n F .fossil-settings/empty-dirs dbb81e8fc0401ac46a1491ab34a7f2c7c0452f2f06b54ebb845d024ca8283ef1\n F .fossil-settings/ignore-glob 35175cdfcf539b2318cb04a9901442804be81cd677d8b889fcc9149c21f239ea\n F LICENSE.md df5091916dbb40e6e9686186587125e1b2ff51f022cc334e886c19a0e9982724\n@@ -524,7 +524,7 @@ F src/pragma.h ec3b31eac9b1df040f1cc8cb3d89bc06605c3b4cb3d76f833de8d6d6c3f77f04\n F src/prepare.c 6049beb71385f017af6fc320d2c75a4e50b75e280c54232442b785fbb83df057\n F src/printf.c 9be6945837c839ba57837b4bc3af349eba630920fa5532aa518816defe42a7d4\n F src/random.c 80f5d666f23feb3e6665a6ce04c7197212a88384\n-F src/resolve.c cf2391c93d425455388389e7a47674b9da107d2ed69ebf49979044d70dbeb045\n+F src/resolve.c 023397b50d09a3587a15169b713342e2d595ab29e14e54fd8f4a86b76c461d21\n F src/rowset.c d977b011993aaea002cab3e0bb2ce50cf346000dff94e944d547b989f4b1fe93\n F src/select.c 50ccaf5fc3566b897fd3090b63bd60605f2f3f38ac5709fda6c482510d71aa6c\n F src/shell.c.in 4a3a9e1c11847b1904f2b01d087af1c052f660902755abab457cab1756817ded\n@@ -1021,7 +1021,7 @@ F test/fuzzer1.test 3d4c4b7e547aba5e5511a2991e3e3d07166cfbb8\n F test/fuzzer2.test a85ef814ce071293bce1ad8dffa217cbbaad4c14\n F test/fuzzerfault.test 8792cd77fd5bce765b05d0c8e01b9edcf8af8536\n F test/gcfault.test dd28c228a38976d6336a3fc42d7e5f1ad060cb8c\n-F test/gencol1.test cb18ae911ed157058ea030988463bd1ec3315ba889b4aff4b8711551c393afae\n+F test/gencol1.test 6bdf7fbaa001321d01f35f7c33ccb847cf937b760877b9a32723e009983c13f7\n F test/genesis.tcl 1e2e2e8e5cc4058549a154ff1892fe5c9de19f98\n F test/having.test e4098a4b8962f9596035c3b87a8928a10648acc509f1bb8d6f96413bbf79a1b3\n F test/hexlit.test 4a6a5f46e3c65c4bf1fa06f5dd5a9507a5627751\n@@ -1850,7 +1850,7 @@ F vsixtest/vsixtest.tcl 6a9a6ab600c25a91a7acc6293828957a386a8a93\n F vsixtest/vsixtest.vcxproj.data 2ed517e100c66dc455b492e1a33350c1b20fbcdc\n F vsixtest/vsixtest.vcxproj.filters 37e51ffedcdb064aad6ff33b6148725226cd608e\n F vsixtest/vsixtest_TemporaryKey.pfx e5b1b036facdb453873e7084e1cae9102ccc67a0\n-P 2d53a30cc23e53033af8e8666457654db5dcc453ed6cd176ce1d0bff4f528159\n-R 916b27815e9b3d41c41616a867889cc0\n+P 8b12e95fec7ce6e0de82a04ca3dfcf1a8e62e233b7382aa28a8a9be6e862b1af\n+R e99d34ba61fb6b297b18cc8c33e9b417\n U drh\n-Z 2f4253a7507c4c18153791477951e376\n+Z 29f405b4db68236e1fc771220e887d13"
    },
    "modified_file_1": {
        "mod_filename": "manifest.uuid",
        "status": "modified",
        "add_lines": 1,
        "dele_lines": 1,
        "patch": "@@ -1 +1 @@\n-8b12e95fec7ce6e0de82a04ca3dfcf1a8e62e233b7382aa28a8a9be6e862b1af\n\\ No newline at end of file\n+6601da58032d18ae00b466c0f2077fb2b1ecd84225b56e1787724bea478eedc9\n\\ No newline at end of file"
    },
    "modified_file_2": {
        "mod_filename": "src/resolve.c",
        "status": "modified",
        "add_lines": 17,
        "dele_lines": 3,
        "patch": "@@ -551,17 +551,31 @@ static int lookupName(\n \n   /* If a column from a table in pSrcList is referenced, then record\n   ** this fact in the pSrcList.a[].colUsed bitmask.  Column 0 causes\n-  ** bit 0 to be set.  Column 1 sets bit 1.  And so forth.  If the\n-  ** column number is greater than the number of bits in the bitmask\n-  ** then set the high-order bit of the bitmask.\n+  ** bit 0 to be set.  Column 1 sets bit 1.  And so forth.\n+  **\n+  ** The colUsed mask is an optimization used to help determine if an\n+  ** index is a covering index.  The correct answer is still obtained\n+  ** if the mask contains extra bits.  But omitting bits from the mask\n+  ** might result in an incorrect answer.\n+  **\n+  ** The high-order bit of the mask is a \"we-use-them-all\" bit.\n+  ** If the column number is greater than the number of bits in the bitmask\n+  ** then set the high-order bit of the bitmask.  Also set the high-order\n+  ** bit if the column is a generated column, as that adds dependencies\n+  ** that are difficult to track, so we assume that all columns are used.\n   */\n   if( pExpr->iColumn>=0 && pMatch!=0 ){\n     int n = pExpr->iColumn;\n     testcase( n==BMS-1 );\n     if( n>=BMS ){\n       n = BMS-1;\n     }\n+    assert( pExpr->y.pTab!=0 );\n     assert( pMatch->iCursor==pExpr->iTable );\n+    if( pExpr->y.pTab->tabFlags & TF_HasGenerated ){\n+      Column *pCol = pExpr->y.pTab->aCol + pExpr->iColumn;\n+      if( pCol->colFlags & COLFLAG_GENERATED ) n = BMS-1;\n+    }\n     pMatch->colUsed |= ((Bitmask)1)<<n;\n   }\n "
    },
    "modified_file_3": {
        "mod_filename": "test/gencol1.test",
        "status": "modified",
        "add_lines": 8,
        "dele_lines": 3,
        "patch": "@@ -246,14 +246,19 @@ do_catchsql_test gencol1-8.20 {\n # 2019-11-21 Problems in the new generated column logic\n # reported by Yongheng Chen and Rui Zhong\n do_execsql_test gencol1-9.10 {\n-  DROP TABLE IF EXISTS t1;\n-  DROP TABLE IF EXISTS t2;\n+  DROP TABLE t1;\n   CREATE TABLE t1(aa , bb AS (17) UNIQUE);\n   INSERT INTO t1 VALUES(17);\n   CREATE TABLE t2(cc);\n   INSERT INTO t2 VALUES(41);\n   SELECT * FROM t2 JOIN t1 WHERE t1.bb=t1.aa AND t1.bb=17;\n } {41 17 17}\n-\n+do_execsql_test gencol1-9.20 {\n+  CREATE TABLE t3(aa INT PRIMARY KEY, bb UNIQUE AS(aa));\n+  INSERT INTO t3 VALUES(1);\n+  SELECT 100, * FROM t3;\n+  DELETE FROM t3 WHERE (SELECT bb FROM t3);\n+  SELECT 200, * FROM t3;\n+} {100 1 1}\n \n finish_test"
    }
}