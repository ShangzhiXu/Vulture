{
    "current_hash": "ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
    "parent_hash": "7a9698456dfb800878cb4414238927fc86907f93",
    "modified_file_0": {
        "mod_filename": "manifest",
        "status": "modified",
        "add_lines": 7,
        "dele_lines": 7,
        "patch": "@@ -1,5 +1,5 @@\n-C Fix\\sa\\sgramfuzz\\sfind.\\s\\sIf\\sa\\spartial\\sindex\\sthat\\sdoes\\snot\\sreference\\sany\\scolumn\\nof\\sits\\stable\\sis\\sused\\sby\\san\\sUPDATE\\sstatement\\sin\\sone-pass\\smode,\\sthen\\savoid\\sthe\\nuse\\sof\\sOP_DeferredSeek\\ssince\\sthe\\sseek\\smight\\snot\\sbe\\sresolved\\sprior\\sto\\sthe\\nOP_Delete\\sand\\sOP_Insert\\sthat\\simplement\\sthe\\sUPDATE.\n-D 2019-12-09T14:34:37.171\n+C Fix\\sthe\\sNOT\\sNULL\\sverification\\slogic\\sin\\sPRAGMA\\sintegrity_check\\sso\\sthat\\sit\\nworks\\sfor\\sgenerated\\scolumns\\swhose\\svalue\\sis\\sthe\\sresult\\sof\\sa\\scomparison\\soperator.\\nTicket\\s[bd8c280671ba44a7]\n+D 2019-12-09T15:52:07.194\n F .fossil-settings/empty-dirs dbb81e8fc0401ac46a1491ab34a7f2c7c0452f2f06b54ebb845d024ca8283ef1\n F .fossil-settings/ignore-glob 35175cdfcf539b2318cb04a9901442804be81cd677d8b889fcc9149c21f239ea\n F LICENSE.md df5091916dbb40e6e9686186587125e1b2ff51f022cc334e886c19a0e9982724\n@@ -520,7 +520,7 @@ F src/parse.y 17c1ae265e1b92cb1f3f1661b020e3eb31f2d8b9588322d2b6f2b22f25b674c9\n F src/pcache.c 385ff064bca69789d199a98e2169445dc16e4291fa807babd61d4890c3b34177\n F src/pcache.h 4f87acd914cef5016fae3030343540d75f5b85a1877eed1a2a19b9f284248586\n F src/pcache1.c 62714cbd1b7299a6e6a27a587b66b4fd3a836a84e1181e7f96f5c34a50917848\n-F src/pragma.c 36c367a62a9d3415fd3d15523e794cccc2cb74e6d806662b0185b8c686f06acb\n+F src/pragma.c 26e9ee514138b9697d4be6d8f9ca84655053026390cf10de838862238aa4aba9\n F src/pragma.h ec3b31eac9b1df040f1cc8cb3d89bc06605c3b4cb3d76f833de8d6d6c3f77f04\n F src/prepare.c 6049beb71385f017af6fc320d2c75a4e50b75e280c54232442b785fbb83df057\n F src/printf.c 9be6945837c839ba57837b4bc3af349eba630920fa5532aa518816defe42a7d4\n@@ -1022,7 +1022,7 @@ F test/fuzzer1.test 3d4c4b7e547aba5e5511a2991e3e3d07166cfbb8\n F test/fuzzer2.test a85ef814ce071293bce1ad8dffa217cbbaad4c14\n F test/fuzzerfault.test 8792cd77fd5bce765b05d0c8e01b9edcf8af8536\n F test/gcfault.test dd28c228a38976d6336a3fc42d7e5f1ad060cb8c\n-F test/gencol1.test 037c5c26dddd984ba7ea11bd16996377f72523a4126804b1bbecafc833fccb47\n+F test/gencol1.test 96d669ccb82d4140df6b38bfc110b98f94ac4cf8d32af42bae6349941b3eb92c\n F test/genesis.tcl 1e2e2e8e5cc4058549a154ff1892fe5c9de19f98\n F test/having.test e4098a4b8962f9596035c3b87a8928a10648acc509f1bb8d6f96413bbf79a1b3\n F test/hexlit.test 4a6a5f46e3c65c4bf1fa06f5dd5a9507a5627751\n@@ -1852,7 +1852,7 @@ F vsixtest/vsixtest.tcl 6a9a6ab600c25a91a7acc6293828957a386a8a93\n F vsixtest/vsixtest.vcxproj.data 2ed517e100c66dc455b492e1a33350c1b20fbcdc\n F vsixtest/vsixtest.vcxproj.filters 37e51ffedcdb064aad6ff33b6148725226cd608e\n F vsixtest/vsixtest_TemporaryKey.pfx e5b1b036facdb453873e7084e1cae9102ccc67a0\n-P 1d2e53a39b87e364685e21de137655b6eee725e4c6d27fc90865072d7c5892b5\n-R 73f9d074ffb019cac59a96d55cf2c0bc\n+P e3398c5ffb060b2b26334b8598e2c63953741e2d6f5124dbd6bdfc8e94742539\n+R 214fd6f511022e08e69f40b8ca4a69e8\n U drh\n-Z 9b8f81a17115c4850191512c3ac99432\n+Z 7b3cdd64628ae3e72f321ced6b81d514"
    },
    "modified_file_1": {
        "mod_filename": "manifest.uuid",
        "status": "modified",
        "add_lines": 1,
        "dele_lines": 1,
        "patch": "@@ -1 +1 @@\n-e3398c5ffb060b2b26334b8598e2c63953741e2d6f5124dbd6bdfc8e94742539\n\\ No newline at end of file\n+f3b39c71b88cb6721f443de56cdce4c08252453a5e340b00a2bd88dc10c42400\n\\ No newline at end of file"
    },
    "modified_file_2": {
        "mod_filename": "src/pragma.c",
        "status": "modified",
        "add_lines": 3,
        "dele_lines": 1,
        "patch": "@@ -1596,7 +1596,9 @@ void sqlite3Pragma(\n           if( j==pTab->iPKey ) continue;\n           if( pTab->aCol[j].notNull==0 ) continue;\n           sqlite3ExprCodeGetColumnOfTable(v, pTab, iDataCur, j, 3);\n-          sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);\n+          if( sqlite3VdbeGetOp(v,-1)->opcode==OP_Column ){\n+            sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);\n+          }\n           jmp2 = sqlite3VdbeAddOp1(v, OP_NotNull, 3); VdbeCoverage(v);\n           zErr = sqlite3MPrintf(db, \"NULL value in %s.%s\", pTab->zName,\n                               pTab->aCol[j].zName);"
    },
    "modified_file_3": {
        "mod_filename": "test/gencol1.test",
        "status": "modified",
        "add_lines": 14,
        "dele_lines": 0,
        "patch": "@@ -328,4 +328,18 @@ do_catchsql_test gencol1-11.80 {\n   INSERT OR REPLACE INTO t0(c0, c1) VALUES (2, 1), (1, 0)\n } {1 {FOREIGN KEY constraint failed}}\n \n+# 2019-12-09 ticket bd8c280671ba44a7\n+# With generated columns, the sqlite3ExprGetColumnOfTable() routine might\n+# generate a code sequence that does not end with OP_Column.  So check to\n+# make sure that the last instruction generated is an OP_column prior to\n+# applying the OPFLAG_TYPEOFARG optimization to NOT NULL checks in the\n+# PRAGMA integrity_check code.\n+#\n+sqlite3 db :memory:\n+do_execsql_test gencol1-12.10 {\n+  CREATE TABLE t0 (c0, c1 NOT NULL AS (c0==0));\n+  INSERT INTO t0(c0) VALUES (0);\n+  PRAGMA integrity_check;\n+} {ok}\n+\n finish_test"
    }
}