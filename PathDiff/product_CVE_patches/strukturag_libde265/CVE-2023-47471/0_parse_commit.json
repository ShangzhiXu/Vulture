{
    "current_hash": "e36b4a1b0bafa53df47514c419d5be3e8916ebc7",
    "parent_hash": "221e767136b8c46c748ae35b79ec9b976b3da301",
    "modified_file_0": {
        "mod_filename": "libde265/slice.cc",
        "status": "modified",
        "add_lines": 10,
        "dele_lines": 1,
        "patch": "@@ -1277,14 +1277,23 @@ void slice_segment_header::dump_slice_segment_header(const decoder_context* ctx,\n #define LOG3(t,d1,d2,d3) log2fh(fh, t,d1,d2,d3)\n #define LOG4(t,d1,d2,d3,d4) log2fh(fh, t,d1,d2,d3,d4)\n \n+  LOG0(\"----------------- SLICE -----------------\\n\");\n+\n   const pic_parameter_set* pps = ctx->get_pps(slice_pic_parameter_set_id);\n+  if (!pps) {\n+    LOG0(\"invalid PPS referenced\\n\");\n+    return;\n+  }\n   assert(pps->pps_read); // TODO: error handling\n \n   const seq_parameter_set* sps = ctx->get_sps((int)pps->seq_parameter_set_id);\n+  if (!sps) {\n+    LOG0(\"invalid SPS referenced\\n\");\n+    return;\n+  }\n   assert(sps->sps_read); // TODO: error handling\n \n \n-  LOG0(\"----------------- SLICE -----------------\\n\");\n   LOG1(\"first_slice_segment_in_pic_flag      : %d\\n\", first_slice_segment_in_pic_flag);\n   if (ctx->get_nal_unit_type() >= NAL_UNIT_BLA_W_LP &&\n       ctx->get_nal_unit_type() <= NAL_UNIT_RESERVED_IRAP_VCL23) {"
    }
}