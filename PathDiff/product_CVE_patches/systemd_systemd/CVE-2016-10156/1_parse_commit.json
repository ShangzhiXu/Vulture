{
    "current_hash": "ee735086f8670be1591fa9593e80dd60163a7a2f",
    "parent_hash": "c89f52ac6938374972253d8752ed65f3af0b3ef4",
    "modified_file_0": {
        "mod_filename": "src/basic/fs-util.c",
        "status": "modified",
        "add_lines": 2,
        "dele_lines": 2,
        "patch": "@@ -311,7 +311,7 @@ int touch_file(const char *path, bool parents, usec_t stamp, uid_t uid, gid_t gi\n         if (fd < 0)\n                 return -errno;\n \n-        if (mode > 0) {\n+        if (mode != MODE_INVALID) {\n                 r = fchmod(fd, mode);\n                 if (r < 0)\n                         return -errno;\n@@ -338,7 +338,7 @@ int touch_file(const char *path, bool parents, usec_t stamp, uid_t uid, gid_t gi\n }\n \n int touch(const char *path) {\n-        return touch_file(path, false, USEC_INFINITY, UID_INVALID, GID_INVALID, 0);\n+        return touch_file(path, false, USEC_INFINITY, UID_INVALID, GID_INVALID, MODE_INVALID);\n }\n \n int symlink_idempotent(const char *from, const char *to) {"
    },
    "modified_file_1": {
        "mod_filename": "src/core/timer.c",
        "status": "modified",
        "add_lines": 2,
        "dele_lines": 2,
        "patch": "@@ -519,7 +519,7 @@ static void timer_enter_running(Timer *t) {\n         dual_timestamp_get(&t->last_trigger);\n \n         if (t->stamp_path)\n-                touch_file(t->stamp_path, true, t->last_trigger.realtime, UID_INVALID, GID_INVALID, 0);\n+                touch_file(t->stamp_path, true, t->last_trigger.realtime, UID_INVALID, GID_INVALID, MODE_INVALID);\n \n         timer_set_state(t, TIMER_RUNNING);\n         return;\n@@ -555,7 +555,7 @@ static int timer_start(Unit *u) {\n                         /* The timer has never run before,\n                          * make sure a stamp file exists.\n                          */\n-                        touch_file(t->stamp_path, true, USEC_INFINITY, UID_INVALID, GID_INVALID, 0);\n+                        touch_file(t->stamp_path, true, USEC_INFINITY, UID_INVALID, GID_INVALID, MODE_INVALID);\n         }\n \n         t->result = TIMER_SUCCESS;"
    },
    "modified_file_2": {
        "mod_filename": "src/test/test-conf-files.c",
        "status": "modified",
        "add_lines": 2,
        "dele_lines": 1,
        "patch": "@@ -26,6 +26,7 @@\n #include \"conf-files.h\"\n #include \"fs-util.h\"\n #include \"macro.h\"\n+#include \"parse-util.h\"\n #include \"rm-rf.h\"\n #include \"string-util.h\"\n #include \"strv.h\"\n@@ -40,7 +41,7 @@ static void setup_test_dir(char *tmp_dir, const char *files, ...) {\n         va_start(ap, files);\n         while (files != NULL) {\n                 _cleanup_free_ char *path = strappend(tmp_dir, files);\n-                assert_se(touch_file(path, true, USEC_INFINITY, UID_INVALID, GID_INVALID, 0) == 0);\n+                assert_se(touch_file(path, true, USEC_INFINITY, UID_INVALID, GID_INVALID, MODE_INVALID) == 0);\n                 files = va_arg(ap, const char *);\n         }\n         va_end(ap);"
    }
}