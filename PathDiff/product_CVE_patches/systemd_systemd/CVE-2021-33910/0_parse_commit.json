{
    "current_hash": "b34a4f0e6729de292cb3b0c03c1d48f246ad896b",
    "parent_hash": "30c9faff0d74ceb0cbafb8ecdd8573bc479984dc",
    "modified_file_0": {
        "mod_filename": "src/basic/unit-name.c",
        "status": "modified",
        "add_lines": 7,
        "dele_lines": 10,
        "patch": "@@ -378,12 +378,13 @@ int unit_name_unescape(const char *f, char **ret) {\n }\n \n int unit_name_path_escape(const char *f, char **ret) {\n-        char *p, *s;\n+        _cleanup_free_ char *p = NULL;\n+        char *s;\n \n         assert(f);\n         assert(ret);\n \n-        p = strdupa(f);\n+        p = strdup(f);\n         if (!p)\n                 return -ENOMEM;\n \n@@ -395,13 +396,9 @@ int unit_name_path_escape(const char *f, char **ret) {\n                 if (!path_is_normalized(p))\n                         return -EINVAL;\n \n-                /* Truncate trailing slashes */\n+                /* Truncate trailing slashes and skip leading slashes */\n                 delete_trailing_chars(p, \"/\");\n-\n-                /* Truncate leading slashes */\n-                p = skip_leading_chars(p, \"/\");\n-\n-                s = unit_name_escape(p);\n+                s = unit_name_escape(skip_leading_chars(p, \"/\"));\n         }\n         if (!s)\n                 return -ENOMEM;\n@@ -531,7 +528,7 @@ int unit_name_from_path(const char *path, const char *suffix, char **ret) {\n         if (strlen(s) >= UNIT_NAME_MAX) /* Return a slightly more descriptive error for this specific condition */\n                 return -ENAMETOOLONG;\n \n-        /* Refuse this if this got too long or for some other reason didn't result in a valid name */\n+        /* Refuse if this for some other reason didn't result in a valid name */\n         if (!unit_name_is_valid(s, UNIT_NAME_PLAIN))\n                 return -EINVAL;\n \n@@ -565,7 +562,7 @@ int unit_name_from_path_instance(const char *prefix, const char *path, const cha\n         if (strlen(s) >= UNIT_NAME_MAX) /* Return a slightly more descriptive error for this specific condition */\n                 return -ENAMETOOLONG;\n \n-        /* Refuse this if this got too long or for some other reason didn't result in a valid name */\n+        /* Refuse if this for some other reason didn't result in a valid name */\n         if (!unit_name_is_valid(s, UNIT_NAME_INSTANCE))\n                 return -EINVAL;\n "
    }
}