{
    "current_hash": "3cbb917b4714766030b28eba9fb41bb97ce9ee02",
    "parent_hash": "4eab87c67efe5eb14d8600237c1de5d131a1e4b1",
    "modified_file_0": {
        "mod_filename": "tensorflow/core/kernels/count_ops.cc",
        "status": "modified",
        "add_lines": 41,
        "dele_lines": 0,
        "patch": "@@ -178,10 +178,30 @@ class SparseCount : public OpKernel {\n     const Tensor& weights = context->input(3);\n     bool use_weights = weights.NumElements() > 0;\n \n+    OP_REQUIRES(context, TensorShapeUtils::IsMatrix(indices.shape()),\n+                errors::InvalidArgument(\n+                    \"Input indices must be a 2-dimensional tensor. Got: \",\n+                    indices.shape().DebugString()));\n+\n+    if (use_weights) {\n+      OP_REQUIRES(\n+          context, weights.shape() == values.shape(),\n+          errors::InvalidArgument(\n+              \"Weights and values must have the same shape. Weight shape: \",\n+              weights.shape().DebugString(),\n+              \"; values shape: \", values.shape().DebugString()));\n+    }\n+\n     bool is_1d = shape.NumElements() == 1;\n     int num_batches = is_1d ? 1 : shape.flat<int64>()(0);\n     int num_values = values.NumElements();\n \n+    OP_REQUIRES(context, num_values == indices.shape().dim_size(0),\n+                errors::InvalidArgument(\n+                    \"Number of values must match first dimension of indices.\",\n+                    \"Got \", num_values,\n+                    \" values, indices shape: \", indices.shape().DebugString()));\n+\n     const auto indices_values = indices.matrix<int64>();\n     const auto values_values = values.flat<T>();\n     const auto weight_values = weights.flat<W>();\n@@ -235,12 +255,33 @@ class RaggedCount : public OpKernel {\n     bool use_weights = weights.NumElements() > 0;\n     bool is_1d = false;\n \n+    if (use_weights) {\n+      OP_REQUIRES(\n+          context, weights.shape() == values.shape(),\n+          errors::InvalidArgument(\n+              \"Weights and values must have the same shape. Weight shape: \",\n+              weights.shape().DebugString(),\n+              \"; values shape: \", values.shape().DebugString()));\n+    }\n+\n     const auto splits_values = splits.flat<int64>();\n     const auto values_values = values.flat<T>();\n     const auto weight_values = weights.flat<W>();\n     int num_batches = splits.NumElements() - 1;\n     int num_values = values.NumElements();\n \n+    OP_REQUIRES(\n+        context, num_batches > 0,\n+        errors::InvalidArgument(\n+            \"Must provide at least 2 elements for the splits argument\"));\n+    OP_REQUIRES(context, splits_values(0) == 0,\n+                errors::InvalidArgument(\"Splits must start with 0, not with \",\n+                                        splits_values(0)));\n+    OP_REQUIRES(context, splits_values(num_batches) == num_values,\n+                errors::InvalidArgument(\n+                    \"Splits must end with the number of values, got \",\n+                    splits_values(num_batches), \" instead of \", num_values));\n+\n     auto per_batch_counts = BatchedMap<W>(num_batches);\n     T max_value = 0;\n     int batch_idx = 0;"
    },
    "modified_file_1": {
        "mod_filename": "tensorflow/python/ops/bincount_ops_test.py",
        "status": "modified",
        "add_lines": 118,
        "dele_lines": 0,
        "patch": "@@ -25,7 +25,9 @@\n from tensorflow.python.framework import errors\n from tensorflow.python.framework import ops\n from tensorflow.python.framework import sparse_tensor\n+from tensorflow.python.framework import test_util\n from tensorflow.python.ops import bincount_ops\n+from tensorflow.python.ops import gen_count_ops\n from tensorflow.python.ops import sparse_ops\n from tensorflow.python.ops.ragged import ragged_factory_ops\n from tensorflow.python.ops.ragged import ragged_tensor\n@@ -834,5 +836,121 @@ def test_ragged_input_different_shape_fails(self):\n       self.evaluate(bincount_ops.sparse_bincount(x, weights=weights, axis=-1))\n \n \n+@test_util.run_all_in_graph_and_eager_modes\n+@test_util.disable_tfrt\n+class RawOpsTest(test.TestCase, parameterized.TestCase):\n+\n+  def testSparseCountSparseOutputBadIndicesShape(self):\n+    indices = [[[0], [0]], [[0], [1]], [[1], [0]], [[1], [2]]]\n+    values = [1, 1, 1, 10]\n+    weights = [1, 2, 4, 6]\n+    dense_shape = [2, 3]\n+    with self.assertRaisesRegex(errors.InvalidArgumentError,\n+                                \"Input indices must be a 2-dimensional tensor\"):\n+      self.evaluate(\n+          gen_count_ops.SparseCountSparseOutput(\n+              indices=indices,\n+              values=values,\n+              dense_shape=dense_shape,\n+              weights=weights,\n+              binary_output=False))\n+\n+  def testSparseCountSparseOutputBadWeightsShape(self):\n+    indices = [[0, 0], [0, 1], [1, 0], [1, 2]]\n+    values = [1, 1, 1, 10]\n+    weights = [1, 2, 4]\n+    dense_shape = [2, 3]\n+    with self.assertRaisesRegex(errors.InvalidArgumentError,\n+                                \"Weights and values must have the same shape\"):\n+      self.evaluate(\n+          gen_count_ops.SparseCountSparseOutput(\n+              indices=indices,\n+              values=values,\n+              dense_shape=dense_shape,\n+              weights=weights,\n+              binary_output=False))\n+\n+  def testSparseCountSparseOutputBadNumberOfValues(self):\n+    indices = [[0, 0], [0, 1], [1, 0]]\n+    values = [1, 1, 1, 10]\n+    weights = [1, 2, 4, 6]\n+    dense_shape = [2, 3]\n+    with self.assertRaisesRegex(\n+        errors.InvalidArgumentError,\n+        \"Number of values must match first dimension of indices\"):\n+      self.evaluate(\n+          gen_count_ops.SparseCountSparseOutput(\n+              indices=indices,\n+              values=values,\n+              dense_shape=dense_shape,\n+              weights=weights,\n+              binary_output=False))\n+\n+  def testRaggedCountSparseOutput(self):\n+    splits = [0, 4, 7]\n+    values = [1, 1, 2, 1, 2, 10, 5]\n+    weights = [1, 2, 3, 4, 5, 6, 7]\n+    output_indices, output_values, output_shape = self.evaluate(\n+        gen_count_ops.RaggedCountSparseOutput(\n+            splits=splits, values=values, weights=weights, binary_output=False))\n+    self.assertAllEqual([[0, 1], [0, 2], [1, 2], [1, 5], [1, 10]],\n+                        output_indices)\n+    self.assertAllEqual([7, 3, 5, 7, 6], output_values)\n+    self.assertAllEqual([2, 11], output_shape)\n+\n+  def testRaggedCountSparseOutputBadWeightsShape(self):\n+    splits = [0, 4, 7]\n+    values = [1, 1, 2, 1, 2, 10, 5]\n+    weights = [1, 2, 3, 4, 5, 6]\n+    with self.assertRaisesRegex(errors.InvalidArgumentError,\n+                                \"Weights and values must have the same shape\"):\n+      self.evaluate(\n+          gen_count_ops.RaggedCountSparseOutput(\n+              splits=splits,\n+              values=values,\n+              weights=weights,\n+              binary_output=False))\n+\n+  def testRaggedCountSparseOutputEmptySplits(self):\n+    splits = []\n+    values = [1, 1, 2, 1, 2, 10, 5]\n+    weights = [1, 2, 3, 4, 5, 6, 7]\n+    with self.assertRaisesRegex(\n+        errors.InvalidArgumentError,\n+        \"Must provide at least 2 elements for the splits argument\"):\n+      self.evaluate(\n+          gen_count_ops.RaggedCountSparseOutput(\n+              splits=splits,\n+              values=values,\n+              weights=weights,\n+              binary_output=False))\n+\n+  def testRaggedCountSparseOutputBadSplitsStart(self):\n+    splits = [1, 7]\n+    values = [1, 1, 2, 1, 2, 10, 5]\n+    weights = [1, 2, 3, 4, 5, 6, 7]\n+    with self.assertRaisesRegex(errors.InvalidArgumentError,\n+                                \"Splits must start with 0\"):\n+      self.evaluate(\n+          gen_count_ops.RaggedCountSparseOutput(\n+              splits=splits,\n+              values=values,\n+              weights=weights,\n+              binary_output=False))\n+\n+  def testRaggedCountSparseOutputBadSplitsEnd(self):\n+    splits = [0, 5]\n+    values = [1, 1, 2, 1, 2, 10, 5]\n+    weights = [1, 2, 3, 4, 5, 6, 7]\n+    with self.assertRaisesRegex(errors.InvalidArgumentError,\n+                                \"Splits must end with the number of values\"):\n+      self.evaluate(\n+          gen_count_ops.RaggedCountSparseOutput(\n+              splits=splits,\n+              values=values,\n+              weights=weights,\n+              binary_output=False))\n+\n+\n if __name__ == \"__main__\":\n   test.main()"
    }
}