{
    "current_hash": "9a133d73ae4b4664d22bd1aa6d654fec13c52ee1",
    "parent_hash": "73b291b6ace69ca9063d086f05c0c4dc05cfcbbf",
    "modified_file_0": {
        "mod_filename": "tensorflow/core/kernels/session_ops.cc",
        "status": "modified",
        "add_lines": 7,
        "dele_lines": 1,
        "patch": "@@ -16,6 +16,7 @@ limitations under the License.\n // See docs in ../ops/data_flow_ops.cc.\n \n #include <limits.h>\n+\n #include <vector>\n \n #include \"tensorflow/core/common_runtime/device.h\"\n@@ -27,6 +28,7 @@ limitations under the License.\n #include \"tensorflow/core/framework/types.h\"\n #include \"tensorflow/core/lib/core/errors.h\"\n #include \"tensorflow/core/lib/gtl/map_util.h\"\n+#include \"tensorflow/core/platform/errors.h\"\n #include \"tensorflow/core/platform/logging.h\"\n #include \"tensorflow/core/platform/macros.h\"\n #include \"tensorflow/core/platform/mutex.h\"\n@@ -42,7 +44,11 @@ class GetSessionHandleOp : public OpKernel {\n \n   void Compute(OpKernelContext* ctx) override {\n     const Tensor& val = ctx->input(0);\n-    int64 id = ctx->session_state()->GetNewId();\n+    auto session_state = ctx->session_state();\n+    OP_REQUIRES(ctx, session_state != nullptr,\n+                errors::FailedPrecondition(\n+                    \"GetSessionHandle called on null session state\"));\n+    int64 id = session_state->GetNewId();\n     TensorStore::TensorAndKey tk{val, id, requested_device()};\n     OP_REQUIRES_OK(ctx, ctx->tensor_store()->AddTensor(name(), tk));\n "
    },
    "modified_file_1": {
        "mod_filename": "tensorflow/python/ops/raw_ops_test.py",
        "status": "modified",
        "add_lines": 8,
        "dele_lines": 0,
        "patch": "@@ -25,6 +25,7 @@\n from tensorflow.python.framework import errors\n from tensorflow.python.framework import ops\n from tensorflow.python.framework import test_util\n+from tensorflow.python.ops import gen_data_flow_ops\n from tensorflow.python.ops import gen_math_ops\n from tensorflow.python.ops import gen_string_ops\n from tensorflow.python.platform import test\n@@ -79,6 +80,13 @@ def testStringNGramsBadDataSplits(self, splits):\n               pad_width=0,\n               preserve_short_sequences=False))\n \n+  def testGetSessionHandle(self):\n+    if context.executing_eagerly():\n+      with self.assertRaisesRegex(\n+          errors.FailedPreconditionError,\n+          \"GetSessionHandle called on null session state\"):\n+        gen_data_flow_ops.GetSessionHandle(value=[1])\n+\n \n if __name__ == \"__main__\":\n   ops.enable_eager_execution()"
    }
}