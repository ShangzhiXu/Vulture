{
    "current_hash": "eccb7ec454e6617738554a255d77f08e60ee0808",
    "parent_hash": "0225022b725993bfc19b87a02a2faaad9a53bc17",
    "modified_file_0": {
        "mod_filename": "tensorflow/core/kernels/quantize_and_dequantize_op.cc",
        "status": "modified",
        "add_lines": 4,
        "dele_lines": 0,
        "patch": "@@ -71,6 +71,10 @@ class QuantizeAndDequantizeV2Op : public OpKernel {\n \n   void Compute(OpKernelContext* ctx) override {\n     const Tensor& input = ctx->input(0);\n+    OP_REQUIRES(\n+        ctx, (axis_ == -1 || axis_ < input.shape().dims()),\n+        errors::InvalidArgument(\"Shape must be at least rank \", axis_ + 1,\n+                                \" but is rank \", input.shape().dims()));\n     const int depth = (axis_ == -1) ? 1 : input.dim_size(axis_);\n     Tensor input_min_tensor;\n     Tensor input_max_tensor;"
    },
    "modified_file_1": {
        "mod_filename": "tensorflow/python/kernel_tests/array_ops_test.py",
        "status": "modified",
        "add_lines": 16,
        "dele_lines": 0,
        "patch": "@@ -1628,6 +1628,22 @@ def testAxis(self):\n                   axis=(axis - 4)))\n           self.assertAllClose(fake_quantized, expected)\n \n+  def testBadAxis(self):\n+    input_tensor = [2.5, 2.5]\n+    input_min = [0, 0]\n+    input_max = [1, 1]\n+    error_message_pattern = \"Shape must be at least rank 11 but is rank 1\"\n+    # TODO(b/171260356): Eager mode and graph mode throw different error types\n+    error = errors.InvalidArgumentError if context.executing_eagerly(\n+    ) else ValueError\n+    with self.assertRaisesRegex(error, error_message_pattern):\n+      self.evaluate(\n+          array_ops.quantize_and_dequantize_v2(\n+              input=input_tensor,\n+              input_min=input_min,\n+              input_max=input_max,\n+              axis=10))\n+\n   def testQuantizeDequantizeGrad(self):\n     shape = (2, 2)\n     max_threshold = 0"
    }
}