{
    "current_hash": "c1e1fc899ad5f8c725dcbb6470069890b5060bc7",
    "parent_hash": "acdf3c04fcfa767ae8d109b9e1f727ef050dba4d",
    "modified_file_0": {
        "mod_filename": "tensorflow/core/kernels/immutable_constant_op.cc",
        "status": "modified",
        "add_lines": 6,
        "dele_lines": 0,
        "patch": "@@ -62,6 +62,12 @@ class MemmappedTensorAllocator : public Allocator {\n \n   void set_delete_on_deallocate() { delete_on_deallocate_ = true; }\n \n+  // Make sure tensors or complex types (strings, variants, resources) don't get\n+  // their constructor called via a placement new since that would require\n+  // writing to immutable data.\n+  // See also: tensorflow/core/framework/typed_allocator.h\n+  bool AllocatesOpaqueHandle() const override { return true; }\n+\n  private:\n   std::unique_ptr<ReadOnlyMemoryRegion> memory_region_;\n   // If there is an error during allocation we keep it in this status."
    }
}