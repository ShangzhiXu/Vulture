{
    "current_hash": "a1eefe986065846b6c69dbc09afd9fa1a02c4a3d",
    "parent_hash": "071190f7a96d273fe79dc6f3ca12153d8db1de00",
    "modified_file_0": {
        "mod_filename": "print-chdlc.c",
        "status": "modified",
        "add_lines": 12,
        "dele_lines": 8,
        "patch": "@@ -46,21 +46,18 @@ static const struct tok chdlc_cast_values[] = {\n u_int\n chdlc_if_print(netdissect_options *ndo, const struct pcap_pkthdr *h, register const u_char *p)\n {\n-\tregister u_int length = h->len;\n-\tregister u_int caplen = h->caplen;\n-\n-\tif (caplen < CHDLC_HDRLEN) {\n-\t\tND_PRINT((ndo, \"[|chdlc]\"));\n-\t\treturn (caplen);\n-\t}\n-        return (chdlc_print(ndo, p,length));\n+\treturn chdlc_print(ndo, p, h->len);\n }\n \n u_int\n chdlc_print(netdissect_options *ndo, register const u_char *p, u_int length)\n {\n \tu_int proto;\n+\tconst u_char *bp = p;\n \n+\tif (length < CHDLC_HDRLEN)\n+\t\tgoto trunc;\n+\tND_TCHECK2(*p, CHDLC_HDRLEN);\n \tproto = EXTRACT_16BITS(&p[2]);\n \tif (ndo->ndo_eflag) {\n                 ND_PRINT((ndo, \"%s, ethertype %s (0x%04x), length %u: \",\n@@ -94,6 +91,9 @@ chdlc_print(netdissect_options *ndo, register const u_char *p, u_int length)\n \t\tbreak;\n         case ETHERTYPE_ISO:\n                 /* is the fudge byte set ? lets verify by spotting ISO headers */\n+                if (length < 2)\n+                    goto trunc;\n+                ND_TCHECK_16BITS(p);\n                 if (*(p+1) == 0x81 ||\n                     *(p+1) == 0x82 ||\n                     *(p+1) == 0x83)\n@@ -108,6 +108,10 @@ chdlc_print(netdissect_options *ndo, register const u_char *p, u_int length)\n \t}\n \n \treturn (CHDLC_HDRLEN);\n+\n+trunc:\n+\tND_PRINT((ndo, \"[|chdlc]\"));\n+\treturn ndo->ndo_snapend - bp;\n }\n \n /*"
    }
}