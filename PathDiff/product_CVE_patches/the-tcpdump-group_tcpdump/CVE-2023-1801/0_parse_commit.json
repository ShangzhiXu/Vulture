{
    "current_hash": "03c037bbd75588beba3ee09f26d17783d21e30bc",
    "parent_hash": "ea72743897e21aebc744b50eb535fc2d292bc81a",
    "modified_file_0": {
        "mod_filename": "netdissect.h",
        "status": "modified",
        "add_lines": 3,
        "dele_lines": 0,
        "patch": "@@ -423,6 +423,9 @@ extern void ts_print(netdissect_options *, const struct timeval *);\n extern void signed_relts_print(netdissect_options *, int32_t);\n extern void unsigned_relts_print(netdissect_options *, uint32_t);\n \n+extern const char *nd_format_time(char *buf, size_t bufsize,\n+    const char *format, const struct tm *timeptr);\n+\n extern void fn_print_char(netdissect_options *, u_char);\n extern void fn_print_str(netdissect_options *, const u_char *);\n extern u_int nd_printztn(netdissect_options *, const u_char *, u_int, const u_char *);"
    },
    "modified_file_1": {
        "mod_filename": "ntp.c",
        "status": "modified",
        "add_lines": 6,
        "dele_lines": 15,
        "patch": "@@ -54,30 +54,21 @@ p_ntp_time(netdissect_options *ndo,\n \tif (i) {\n \t    int64_t seconds_64bit = (int64_t)i - JAN_1970;\n \t    time_t seconds;\n-\t    struct tm *tm;\n \t    char time_buf[128];\n+\t    const char *time_string;\n \n \t    seconds = (time_t)seconds_64bit;\n \t    if (seconds != seconds_64bit) {\n \t\t/*\n \t\t * It doesn't fit into a time_t, so we can't hand it\n \t\t * to gmtime.\n \t\t */\n-\t\tND_PRINT(\" (unrepresentable)\");\n+\t\ttime_string = \"[Time is too large to fit into a time_t]\";\n \t    } else {\n-\t\ttm = gmtime(&seconds);\n-\t\tif (tm == NULL) {\n-\t\t    /*\n-\t\t     * gmtime() can't handle it.\n-\t\t     * (Yes, that might happen with some version of\n-\t\t     * Microsoft's C library.)\n-\t\t     */\n-\t\t    ND_PRINT(\" (unrepresentable)\");\n-\t\t} else {\n-\t\t    /* use ISO 8601 (RFC3339) format */\n-\t\t    strftime(time_buf, sizeof (time_buf), \"%Y-%m-%dT%H:%M:%SZ\", tm);\n-\t\t    ND_PRINT(\" (%s)\", time_buf);\n-\t\t}\n+\t\t/* use ISO 8601 (RFC3339) format */\n+\t\ttime_string = nd_format_time(time_buf, sizeof (time_buf),\n+\t\t  \"%Y-%m-%dT%H:%M:%SZ\", gmtime(&seconds));\n \t    }\n+\t    ND_PRINT(\" (%s)\", time_string);\n \t}\n }"
    },
    "modified_file_2": {
        "mod_filename": "print-ahcp.c",
        "status": "modified",
        "add_lines": 4,
        "dele_lines": 8,
        "patch": "@@ -102,18 +102,14 @@ ahcp_time_print(netdissect_options *ndo,\n                 const u_char *cp, uint8_t len)\n {\n \ttime_t t;\n-\tstruct tm *tm;\n-\tchar buf[BUFSIZE];\n+\tchar buf[sizeof(\"-yyyyyyyyyy-mm-dd hh:mm:ss UTC\")];\n \n \tif (len != 4)\n \t\tgoto invalid;\n \tt = GET_BE_U_4(cp);\n-\tif (NULL == (tm = gmtime(&t)))\n-\t\tND_PRINT(\": gmtime() error\");\n-\telse if (0 == strftime(buf, sizeof(buf), \"%Y-%m-%d %H:%M:%S\", tm))\n-\t\tND_PRINT(\": strftime() error\");\n-\telse\n-\t\tND_PRINT(\": %s UTC\", buf);\n+\tND_PRINT(\": %s\",\n+\t    nd_format_time(buf, sizeof(buf), \"%Y-%m-%d %H:%M:%S UTC\",\n+\t      gmtime(&t)));\n \treturn;\n \n invalid:"
    },
    "modified_file_3": {
        "mod_filename": "print-arista.c",
        "status": "modified",
        "add_lines": 4,
        "dele_lines": 9,
        "patch": "@@ -10,7 +10,6 @@\n \n #include \"netdissect.h\"\n #include \"extract.h\"\n-#include \"addrtoname.h\"\n \n /*\n \n@@ -93,17 +92,13 @@ arista_print_date_hms_time(netdissect_options *ndo, uint32_t seconds,\n \t\tuint32_t nanoseconds)\n {\n \ttime_t ts;\n-\tstruct tm *tm;\n-\tchar buf[BUFSIZE];\n+\tchar buf[sizeof(\"-yyyyyyyyyy-mm-dd hh:mm:ss\")];\n \n \tts = seconds + (nanoseconds / 1000000000);\n \tnanoseconds %= 1000000000;\n-\tif (NULL == (tm = gmtime(&ts)))\n-\t\tND_PRINT(\"gmtime() error\");\n-\telse if (0 == strftime(buf, sizeof(buf), \"%Y-%m-%d %H:%M:%S\", tm))\n-\t\tND_PRINT(\"strftime() error\");\n-\telse\n-\t\tND_PRINT(\"%s.%09u\", buf, nanoseconds);\n+\tND_PRINT(\"%s.%09u\",\n+\t    nd_format_time(buf, sizeof(buf), \"%Y-%m-%d %H:%M:%S\",\n+\t       gmtime(&ts)), nanoseconds);\n }\n \n int"
    },
    "modified_file_4": {
        "mod_filename": "print-rx.c",
        "status": "modified",
        "add_lines": 4,
        "dele_lines": 4,
        "patch": "@@ -794,12 +794,12 @@ rx_cache_find(netdissect_options *ndo, const struct rx_header *rxh,\n \t\t\tND_PRINT(\" %\" PRIu64, _i); \\\n \t\t}\n \n-#define DATEOUT() { time_t _t; struct tm *tm; char str[256]; \\\n+#define DATEOUT() { time_t _t; char str[256]; \\\n \t\t\t_t = (time_t) GET_BE_S_4(bp); \\\n \t\t\tbp += sizeof(int32_t); \\\n-\t\t\ttm = localtime(&_t); \\\n-\t\t\tstrftime(str, 256, \"%Y/%m/%d %H:%M:%S\", tm); \\\n-\t\t\tND_PRINT(\" %s\", str); \\\n+\t\t\tND_PRINT(\" %s\", \\\n+\t\t\t    nd_format_time(str, sizeof(str), \\\n+\t\t\t      \"%Y/%m/%d %H:%M:%S\", localtime(&_t))); \\\n \t\t}\n \n #define STOREATTROUT() { uint32_t mask, _i; \\"
    },
    "modified_file_5": {
        "mod_filename": "print-zep.c",
        "status": "modified",
        "add_lines": 3,
        "dele_lines": 4,
        "patch": "@@ -82,12 +82,11 @@ static void zep_print_ts(netdissect_options *ndo, const u_char *p)\n \t */\n \tif (i) {\n \t\ttime_t seconds = i - JAN_1970;\n-\t\tstruct tm *tm;\n \t\tchar time_buf[128];\n \n-\t\ttm = localtime(&seconds);\n-\t\tstrftime(time_buf, sizeof (time_buf), \"%Y/%m/%d %H:%M:%S\", tm);\n-\t\tND_PRINT(\" (%s)\", time_buf);\n+\t\tND_PRINT(\" (%s)\",\n+\t\t    nd_format_time(time_buf, sizeof (time_buf), \"%Y/%m/%d %H:%M:%S\",\n+\t\t      localtime(&seconds)));\n \t}\n }\n "
    },
    "modified_file_6": {
        "mod_filename": "smbutil.c",
        "status": "modified",
        "add_lines": 5,
        "dele_lines": 11,
        "patch": "@@ -768,9 +768,8 @@ smb_fdata1(netdissect_options *ndo,\n \tcase 'T':\n \t  {\n \t    time_t t;\n-\t    struct tm *lt;\n \t    const char *tstring;\n-\t    char buffer[sizeof(\"Www Mmm dd hh:mm:ss yyyyy\\n\")];\n+\t    char buffer[sizeof(\"Www Mmm dd hh:mm:ss yyyyy\")];\n \t    uint32_t x;\n \n \t    switch (atoi(fmt + 1)) {\n@@ -800,16 +799,11 @@ smb_fdata1(netdissect_options *ndo,\n \t\tbreak;\n \t    }\n \t    if (t != 0) {\n-\t\tlt = localtime(&t);\n-\t\tif (lt != NULL) {\n-\t\t    strftime(buffer, sizeof(buffer), \"%a %b %e %T %Y%n\", lt);\n-\t\t    tstring = buffer;\n-\t\t}\n-\t\telse\n-\t\t    tstring = \"(Can't convert time)\\n\";\n+\t\t    tstring = nd_format_time(buffer, sizeof(buffer), \"%a %b %e %T %Y\",\n+\t\t    localtime(&t));\n \t    } else\n-\t\ttstring = \"NULL\\n\";\n-\t    ND_PRINT(\"%s\", tstring);\n+\t\ttstring = \"NULL\";\n+\t    ND_PRINT(\"%s\\n\", tstring);\n \t    fmt++;\n \t    while (ND_ASCII_ISDIGIT(*fmt))\n \t\tfmt++;"
    },
    "modified_file_7": {
        "mod_filename": "tcpdump.c",
        "status": "modified",
        "add_lines": 20,
        "dele_lines": 2,
        "patch": "@@ -843,6 +843,8 @@ MakeFilename(char *buffer, char *orig_name, int cnt, int max_chars)\n         char *filename = malloc(PATH_MAX + 1);\n         if (filename == NULL)\n             error(\"%s: malloc\", __func__);\n+        if (strlen(orig_name) == 0)\n+            error(\"an empty string is not a valid file name\");\n \n         /* Process with strftime if Gflag is set. */\n         if (Gflag != 0) {\n@@ -854,9 +856,25 @@ MakeFilename(char *buffer, char *orig_name, int cnt, int max_chars)\n           }\n \n           /* There's no good way to detect an error in strftime since a return\n-           * value of 0 isn't necessarily failure.\n+           * value of 0 isn't necessarily failure; if orig_name is an empty\n+           * string, the formatted string will be empty.\n+           *\n+           * However, the C90 standard says that, if there *is* a\n+           * buffer overflow, the content of the buffer is undefined,\n+           * so we must check for a buffer overflow.\n+           *\n+           * So we check above for an empty orig_name, and only call\n+           * strftime() if it's non-empty, in which case the return\n+           * value will only be 0 if the formatted date doesn't fit\n+           * in the buffer.\n+           *\n+           * (We check above because, even if we don't use -G, we\n+           * want a better error message than \"tcpdump: : No such\n+           * file or directory\" for this case.)\n            */\n-          strftime(filename, PATH_MAX, orig_name, local_tm);\n+          if (strftime(filename, PATH_MAX, orig_name, local_tm) == 0) {\n+            error(\"%s: strftime\", __func__);\n+          }\n         } else {\n           strncpy(filename, orig_name, PATH_MAX);\n         }"
    },
    "modified_file_8": {
        "mod_filename": "util-print.c",
        "status": "modified",
        "add_lines": 28,
        "dele_lines": 8,
        "patch": "@@ -230,7 +230,8 @@ ts_date_hmsfrac_print(netdissect_options *ndo, long sec, long usec,\n {\n \ttime_t Time = sec;\n \tstruct tm *tm;\n-\tchar timestr[32];\n+\tchar timebuf[32];\n+\tconst char *timestr;\n \n \tif ((unsigned)sec & 0x80000000) {\n \t\tND_PRINT(\"[Error converting time]\");\n@@ -242,14 +243,13 @@ ts_date_hmsfrac_print(netdissect_options *ndo, long sec, long usec,\n \telse\n \t\ttm = gmtime(&Time);\n \n-\tif (!tm) {\n-\t\tND_PRINT(\"[Error converting time]\");\n-\t\treturn;\n+\tif (date_flag == WITH_DATE) {\n+\t\ttimestr = nd_format_time(timebuf, sizeof(timebuf),\n+\t\t    \"%Y-%m-%d %H:%M:%S\", tm);\n+\t} else {\n+\t\ttimestr = nd_format_time(timebuf, sizeof(timebuf),\n+\t\t    \"%H:%M:%S\", tm);\n \t}\n-\tif (date_flag == WITH_DATE)\n-\t\tstrftime(timestr, sizeof(timestr), \"%Y-%m-%d %H:%M:%S\", tm);\n-\telse\n-\t\tstrftime(timestr, sizeof(timestr), \"%H:%M:%S\", tm);\n \tND_PRINT(\"%s\", timestr);\n \n \tts_frac_print(ndo, usec);\n@@ -405,6 +405,26 @@ signed_relts_print(netdissect_options *ndo,\n \tunsigned_relts_print(ndo, secs);\n }\n \n+/*\n+ * Format a struct tm with strftime().\n+ * If the pointer to the struct tm is null, that means that the\n+ * routine to convert a time_t to a struct tm failed; the localtime()\n+ * and gmtime() in the Microsoft Visual Studio C library will fail,\n+ * returning null, if the value is before the UNIX Epoch.\n+ */\n+const char *\n+nd_format_time(char *buf, size_t bufsize, const char *format,\n+         const struct tm *timeptr)\n+{\n+\tif (timeptr != NULL) {\n+\t\tif (strftime(buf, bufsize, format, timeptr) != 0)\n+\t\t\treturn (buf);\n+\t\telse\n+\t\t\treturn (\"[nd_format_time() buffer is too small]\");\n+\t} else\n+\t\treturn (\"[localtime() or gmtime() couldn't convert the date and time]\");\n+}\n+\n /* Print the truncated string */\n void nd_print_trunc(netdissect_options *ndo)\n {"
    }
}