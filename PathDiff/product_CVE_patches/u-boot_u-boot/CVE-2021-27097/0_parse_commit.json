{
    "current_hash": "6f3c2d8aa5e6cbd80b5e869bbbddecb66c329d01",
    "parent_hash": "c5819701a3de61e2ba2ef7ad0b616565b32305e5",
    "modified_file_0": {
        "mod_filename": "common/Kconfig.boot",
        "status": "modified",
        "add_lines": 20,
        "dele_lines": 0,
        "patch": "@@ -63,13 +63,23 @@ config FIT_ENABLE_SHA512_SUPPORT\n \t  SHA512 checksum is a 512-bit (64-byte) hash value used to check that\n \t  the image contents have not been corrupted.\n \n+config FIT_FULL_CHECK\n+\tbool \"Do a full check of the FIT before using it\"\n+\tdefault y\n+\thelp\n+\t  Enable this do a full check of the FIT to make sure it is valid. This\n+\t  helps to protect against carefully crafted FITs which take advantage\n+\t  of bugs or omissions in the code. This includes a bad structure,\n+\t  multiple root nodes and the like.\n+\n config FIT_SIGNATURE\n \tbool \"Enable signature verification of FIT uImages\"\n \tdepends on DM\n \tselect HASH\n \tselect RSA\n \tselect RSA_VERIFY\n \tselect IMAGE_SIGN_INFO\n+\tselect FIT_FULL_CHECK\n \thelp\n \t  This option enables signature verification of FIT uImages,\n \t  using a hash signed and verified using RSA. If\n@@ -159,6 +169,15 @@ config SPL_FIT_PRINT\n \thelp\n \t  Support printing the content of the fitImage in a verbose manner in SPL.\n \n+config SPL_FIT_FULL_CHECK\n+\tbool \"Do a full check of the FIT before using it\"\n+\thelp\n+\t  Enable this do a full check of the FIT to make sure it is valid. This\n+\t  helps to protect against carefully crafted FITs which take advantage\n+\t  of bugs or omissions in the code. This includes a bad structure,\n+\t  multiple root nodes and the like.\n+\n+\n config SPL_FIT_SIGNATURE\n \tbool \"Enable signature verification of FIT firmware within SPL\"\n \tdepends on SPL_DM\n@@ -168,6 +187,7 @@ config SPL_FIT_SIGNATURE\n \tselect SPL_RSA\n \tselect SPL_RSA_VERIFY\n \tselect SPL_IMAGE_SIGN_INFO\n+\tselect SPL_FIT_FULL_CHECK\n \n config SPL_LOAD_FIT\n \tbool \"Enable SPL loading U-Boot as a FIT (basic fitImage features)\""
    },
    "modified_file_1": {
        "mod_filename": "common/image-fit.c",
        "status": "modified",
        "add_lines": 16,
        "dele_lines": 0,
        "patch": "@@ -1580,6 +1580,22 @@ int fit_check_format(const void *fit, ulong size)\n \t\treturn -ENOEXEC;\n \t}\n \n+\tif (CONFIG_IS_ENABLED(FIT_FULL_CHECK)) {\n+\t\t/*\n+\t\t * If we are not given the size, make do wtih calculating it.\n+\t\t * This is not as secure, so we should consider a flag to\n+\t\t * control this.\n+\t\t */\n+\t\tif (size == IMAGE_SIZE_INVAL)\n+\t\t\tsize = fdt_totalsize(fit);\n+\t\tret = fdt_check_full(fit, size);\n+\n+\t\tif (ret) {\n+\t\t\tlog_debug(\"FIT check error %d\\n\", ret);\n+\t\t\treturn -EINVAL;\n+\t\t}\n+\t}\n+\n \t/* mandatory / node 'description' property */\n \tif (!fdt_getprop(fit, 0, FIT_DESC_PROP, NULL)) {\n \t\tlog_debug(\"Wrong FIT format: no description\\n\");"
    }
}