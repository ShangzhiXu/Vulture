{
    "current_hash": "3f04db891a353f4b127ed57279279f851c6b4917",
    "parent_hash": "124c255731c76a2b09587378b2bcce561bcd3f2d",
    "modified_file_0": {
        "mod_filename": "common/image-fit.c",
        "status": "modified",
        "add_lines": 52,
        "dele_lines": 4,
        "patch": "@@ -1568,6 +1568,34 @@ int fit_image_check_comp(const void *fit, int noffset, uint8_t comp)\n \treturn (comp == image_comp);\n }\n \n+/**\n+ * fdt_check_no_at() - Check for nodes whose names contain '@'\n+ *\n+ * This checks the parent node and all subnodes recursively\n+ *\n+ * @fit: FIT to check\n+ * @parent: Parent node to check\n+ * @return 0 if OK, -EADDRNOTAVAIL is a node has a name containing '@'\n+ */\n+static int fdt_check_no_at(const void *fit, int parent)\n+{\n+\tconst char *name;\n+\tint node;\n+\tint ret;\n+\n+\tname = fdt_get_name(fit, parent, NULL);\n+\tif (!name || strchr(name, '@'))\n+\t\treturn -EADDRNOTAVAIL;\n+\n+\tfdt_for_each_subnode(node, fit, parent) {\n+\t\tret = fdt_check_no_at(fit, node);\n+\t\tif (ret)\n+\t\t\treturn ret;\n+\t}\n+\n+\treturn 0;\n+}\n+\n int fit_check_format(const void *fit, ulong size)\n {\n \tint ret;\n@@ -1589,10 +1617,27 @@ int fit_check_format(const void *fit, ulong size)\n \t\tif (size == IMAGE_SIZE_INVAL)\n \t\t\tsize = fdt_totalsize(fit);\n \t\tret = fdt_check_full(fit, size);\n+\t\tif (ret)\n+\t\t\tret = -EINVAL;\n+\n+\t\t/*\n+\t\t * U-Boot stopped using unit addressed in 2017. Since libfdt\n+\t\t * can match nodes ignoring any unit address, signature\n+\t\t * verification can see the wrong node if one is inserted with\n+\t\t * the same name as a valid node but with a unit address\n+\t\t * attached. Protect against this by disallowing unit addresses.\n+\t\t */\n+\t\tif (!ret && CONFIG_IS_ENABLED(FIT_SIGNATURE)) {\n+\t\t\tret = fdt_check_no_at(fit, 0);\n \n+\t\t\tif (ret) {\n+\t\t\t\tlog_debug(\"FIT check error %d\\n\", ret);\n+\t\t\t\treturn ret;\n+\t\t\t}\n+\t\t}\n \t\tif (ret) {\n \t\t\tlog_debug(\"FIT check error %d\\n\", ret);\n-\t\t\treturn -EINVAL;\n+\t\t\treturn ret;\n \t\t}\n \t}\n \n@@ -1955,10 +2000,13 @@ int fit_image_load(bootm_headers_t *images, ulong addr,\n \tprintf(\"## Loading %s from FIT Image at %08lx ...\\n\", prop_name, addr);\n \n \tbootstage_mark(bootstage_id + BOOTSTAGE_SUB_FORMAT);\n-\tif (fit_check_format(fit, IMAGE_SIZE_INVAL)) {\n-\t\tprintf(\"Bad FIT %s image format!\\n\", prop_name);\n+\tret = fit_check_format(fit, IMAGE_SIZE_INVAL);\n+\tif (ret) {\n+\t\tprintf(\"Bad FIT %s image format! (err=%d)\\n\", prop_name, ret);\n+\t\tif (CONFIG_IS_ENABLED(FIT_SIGNATURE) && ret == -EADDRNOTAVAIL)\n+\t\t\tprintf(\"Signature checking prevents use of unit addresses (@) in nodes\\n\");\n \t\tbootstage_error(bootstage_id + BOOTSTAGE_SUB_FORMAT);\n-\t\treturn -ENOEXEC;\n+\t\treturn ret;\n \t}\n \tbootstage_mark(bootstage_id + BOOTSTAGE_SUB_FORMAT_OK);\n \tif (fit_uname) {"
    },
    "modified_file_1": {
        "mod_filename": "test/py/tests/test_vboot.py",
        "status": "modified",
        "add_lines": 5,
        "dele_lines": 4,
        "patch": "@@ -232,8 +232,8 @@ def test_with_algo(sha_algo, padding, sign_options):\n         util.run_and_log(cons, [fit_check_sign, '-f', fit, '-k', dtb])\n \n         if full_test:\n-            # Make sure that U-Boot checks that the config is in the list of hashed\n-            # nodes. If it isn't, a security bypass is possible.\n+            # Make sure that U-Boot checks that the config is in the list of\n+            # hashed nodes. If it isn't, a security bypass is possible.\n             ffit = '%stest.forged.fit' % tmpdir\n             shutil.copyfile(fit, ffit)\n             with open(ffit, 'rb') as fd:\n@@ -263,10 +263,11 @@ def test_with_algo(sha_algo, padding, sign_options):\n             shutil.copyfile(fit, efit)\n             vboot_evil.add_evil_node(fit, efit, evil_kernel, 'kernel@')\n \n+            msg = 'Signature checking prevents use of unit addresses (@) in nodes'\n             util.run_and_log_expect_exception(\n                 cons, [fit_check_sign, '-f', efit, '-k', dtb],\n-                1, 'Node name contains @')\n-            run_bootm(sha_algo, 'evil kernel@', 'Bad Data Hash', False, efit)\n+                1, msg)\n+            run_bootm(sha_algo, 'evil kernel@', msg, False, efit)\n \n         # Create a new properly signed fit and replace header bytes\n         make_fit('sign-configs-%s%s.its' % (sha_algo, padding))"
    }
}