{
    "current_hash": "79af75f7776fc20b0d7eb6afe1e27c00fdb4b9b4",
    "parent_hash": "8a7d4cf9820ea16fabd25a6379351b4dc291204b",
    "modified_file_0": {
        "mod_filename": "common/image-fit-sig.c",
        "status": "modified",
        "add_lines": 20,
        "dele_lines": 2,
        "patch": "@@ -149,6 +149,14 @@ static int fit_image_verify_sig(const void *fit, int image_noffset,\n \tfdt_for_each_subnode(noffset, fit, image_noffset) {\n \t\tconst char *name = fit_get_name(fit, noffset, NULL);\n \n+\t\t/*\n+\t\t * We don't support this since libfdt considers names with the\n+\t\t * name root but different @ suffix to be equal\n+\t\t */\n+\t\tif (strchr(name, '@')) {\n+\t\t\terr_msg = \"Node name contains @\";\n+\t\t\tgoto error;\n+\t\t}\n \t\tif (!strncmp(name, FIT_SIG_NODENAME,\n \t\t\t     strlen(FIT_SIG_NODENAME))) {\n \t\t\tret = fit_image_check_sig(fit, noffset, data,\n@@ -398,16 +406,26 @@ static int fit_config_verify_sig(const void *fit, int conf_noffset,\n \treturn -EPERM;\n }\n \n-int fit_config_verify_required_sigs(const void *fit, int conf_noffset,\n-\t\t\t\t    const void *sig_blob)\n+static int fit_config_verify_required_sigs(const void *fit, int conf_noffset,\n+\t\t\t\t\t   const void *sig_blob)\n {\n+\tconst char *name = fit_get_name(fit, conf_noffset, NULL);\n \tint noffset;\n \tint sig_node;\n \tint verified = 0;\n \tint reqd_sigs = 0;\n \tbool reqd_policy_all = true;\n \tconst char *reqd_mode;\n \n+\t/*\n+\t * We don't support this since libfdt considers names with the\n+\t * name root but different @ suffix to be equal\n+\t */\n+\tif (strchr(name, '@')) {\n+\t\tprintf(\"Configuration node '%s' contains '@'\\n\", name);\n+\t\treturn -EPERM;\n+\t}\n+\n \t/* Work out what we need to verify */\n \tsig_node = fdt_subnode_offset(sig_blob, 0, FIT_SIG_NODENAME);\n \tif (sig_node < 0) {"
    },
    "modified_file_1": {
        "mod_filename": "common/image-fit.c",
        "status": "modified",
        "add_lines": 15,
        "dele_lines": 5,
        "patch": "@@ -1369,21 +1369,31 @@ int fit_image_verify_with_data(const void *fit, int image_noffset,\n  */\n int fit_image_verify(const void *fit, int image_noffset)\n {\n+\tconst char *name = fit_get_name(fit, image_noffset, NULL);\n \tconst void\t*data;\n \tsize_t\t\tsize;\n-\tint\t\tnoffset = 0;\n \tchar\t\t*err_msg = \"\";\n \n+\tif (strchr(name, '@')) {\n+\t\t/*\n+\t\t * We don't support this since libfdt considers names with the\n+\t\t * name root but different @ suffix to be equal\n+\t\t */\n+\t\terr_msg = \"Node name contains @\";\n+\t\tgoto err;\n+\t}\n \t/* Get image data and data length */\n \tif (fit_image_get_data_and_size(fit, image_noffset, &data, &size)) {\n \t\terr_msg = \"Can't get image data/size\";\n-\t\tprintf(\"error!\\n%s for '%s' hash node in '%s' image node\\n\",\n-\t\t       err_msg, fit_get_name(fit, noffset, NULL),\n-\t\t       fit_get_name(fit, image_noffset, NULL));\n-\t\treturn 0;\n+\t\tgoto err;\n \t}\n \n \treturn fit_image_verify_with_data(fit, image_noffset, data, size);\n+\n+err:\n+\tprintf(\"error!\\n%s in '%s' image node\\n\", err_msg,\n+\t       fit_get_name(fit, image_noffset, NULL));\n+\treturn 0;\n }\n \n /**"
    },
    "modified_file_2": {
        "mod_filename": "test/py/tests/test_fit.py",
        "status": "modified",
        "add_lines": 12,
        "dele_lines": 12,
        "patch": "@@ -17,7 +17,7 @@\n         #address-cells = <1>;\n \n         images {\n-                kernel@1 {\n+                kernel-1 {\n                         data = /incbin/(\"%(kernel)s\");\n                         type = \"kernel\";\n                         arch = \"sandbox\";\n@@ -26,7 +26,7 @@\n                         load = <0x40000>;\n                         entry = <0x8>;\n                 };\n-                kernel@2 {\n+                kernel-2 {\n                         data = /incbin/(\"%(loadables1)s\");\n                         type = \"kernel\";\n                         arch = \"sandbox\";\n@@ -35,19 +35,19 @@\n                         %(loadables1_load)s\n                         entry = <0x0>;\n                 };\n-                fdt@1 {\n+                fdt-1 {\n                         description = \"snow\";\n                         data = /incbin/(\"%(fdt)s\");\n                         type = \"flat_dt\";\n                         arch = \"sandbox\";\n                         %(fdt_load)s\n                         compression = \"%(compression)s\";\n-                        signature@1 {\n+                        signature-1 {\n                                 algo = \"sha1,rsa2048\";\n                                 key-name-hint = \"dev\";\n                         };\n                 };\n-                ramdisk@1 {\n+                ramdisk-1 {\n                         description = \"snow\";\n                         data = /incbin/(\"%(ramdisk)s\");\n                         type = \"ramdisk\";\n@@ -56,7 +56,7 @@\n                         %(ramdisk_load)s\n                         compression = \"%(compression)s\";\n                 };\n-                ramdisk@2 {\n+                ramdisk-2 {\n                         description = \"snow\";\n                         data = /incbin/(\"%(loadables2)s\");\n                         type = \"ramdisk\";\n@@ -67,10 +67,10 @@\n                 };\n         };\n         configurations {\n-                default = \"conf@1\";\n-                conf@1 {\n-                        kernel = \"kernel@1\";\n-                        fdt = \"fdt@1\";\n+                default = \"conf-1\";\n+                conf-1 {\n+                        kernel = \"kernel-1\";\n+                        fdt = \"fdt-1\";\n                         %(ramdisk_config)s\n                         %(loadables_config)s\n                 };\n@@ -410,7 +410,7 @@ def run_fit_test(mkimage):\n \n         # Try a ramdisk\n         with cons.log.section('Kernel + FDT + Ramdisk load'):\n-            params['ramdisk_config'] = 'ramdisk = \"ramdisk@1\";'\n+            params['ramdisk_config'] = 'ramdisk = \"ramdisk-1\";'\n             params['ramdisk_load'] = 'load = <%#x>;' % params['ramdisk_addr']\n             fit = make_fit(mkimage, params)\n             cons.restart_uboot()\n@@ -419,7 +419,7 @@ def run_fit_test(mkimage):\n \n         # Configuration with some Loadables\n         with cons.log.section('Kernel + FDT + Ramdisk load + Loadables'):\n-            params['loadables_config'] = 'loadables = \"kernel@2\", \"ramdisk@2\";'\n+            params['loadables_config'] = 'loadables = \"kernel-2\", \"ramdisk-2\";'\n             params['loadables1_load'] = ('load = <%#x>;' %\n                                          params['loadables1_addr'])\n             params['loadables2_load'] = ('load = <%#x>;' %"
    },
    "modified_file_3": {
        "mod_filename": "test/py/tests/vboot_forge.py",
        "status": "modified",
        "add_lines": 6,
        "dele_lines": 6,
        "patch": "@@ -376,12 +376,12 @@ def manipulate(root, strblock):\n     \"\"\"\n     Maliciously manipulates the structure to create a crafted FIT file\n     \"\"\"\n-    # locate /images/kernel@1 (frankly, it just expects it to be the first one)\n+    # locate /images/kernel-1 (frankly, it just expects it to be the first one)\n     kernel_node = root[0][0]\n     # clone it to save time filling all the properties\n     fake_kernel = kernel_node.clone()\n     # rename the node\n-    fake_kernel.name = b'kernel@2'\n+    fake_kernel.name = b'kernel-2'\n     # get rid of signatures/hashes\n     fake_kernel.children = []\n     # NOTE: this simply replaces the first prop... either description or data\n@@ -391,13 +391,13 @@ def manipulate(root, strblock):\n     root[0].children.append(fake_kernel)\n \n     # modify the default configuration\n-    root[1].props[0].value = b'conf@2\\x00'\n+    root[1].props[0].value = b'conf-2\\x00'\n     # clone the first (only?) configuration\n     fake_conf = root[1][0].clone()\n     # rename and change kernel and fdt properties to select the crafted kernel\n-    fake_conf.name = b'conf@2'\n-    fake_conf.props[0].value = b'kernel@2\\x00'\n-    fake_conf.props[1].value = b'fdt@1\\x00'\n+    fake_conf.name = b'conf-2'\n+    fake_conf.props[0].value = b'kernel-2\\x00'\n+    fake_conf.props[1].value = b'fdt-1\\x00'\n     # insert the new configuration under /configurations\n     root[1].children.append(fake_conf)\n "
    }
}