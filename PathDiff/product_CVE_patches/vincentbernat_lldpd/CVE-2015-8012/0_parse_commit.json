{
    "current_hash": "793526f8884455f43daecd0a2c46772388417a00",
    "parent_hash": "479c1a61ffc652aa713f371d969f4645052fac4f",
    "modified_file_0": {
        "mod_filename": "src/daemon/lldpd.c",
        "status": "modified",
        "add_lines": 0,
        "dele_lines": 1,
        "patch": "@@ -198,7 +198,6 @@ lldpd_alloc_mgmt(int family, void *addrptr, size_t addrsize, u_int32_t iface)\n \t\treturn NULL;\n \t}\n \tmgmt->m_family = family;\n-\tassert(addrsize <= LLDPD_MGMT_MAXADDRSIZE);\n \tmemcpy(&mgmt->m_addr, addrptr, addrsize);\n \tmgmt->m_addrsize = addrsize;\n \tmgmt->m_iface = iface;"
    },
    "modified_file_1": {
        "mod_filename": "src/daemon/protocols/cdp.c",
        "status": "modified",
        "add_lines": 7,
        "dele_lines": 3,
        "patch": "@@ -25,7 +25,6 @@\n #include <unistd.h>\n #include <errno.h>\n #include <arpa/inet.h>\n-#include <assert.h>\n \n static int\n cdp_send(struct lldpd *global,\n@@ -438,8 +437,13 @@ cdp_decode(struct lldpd *cfg, char *frame, int s,\n \t\t\t\t\t\tmgmt = lldpd_alloc_mgmt(LLDPD_AF_IPV4, &addr, \n \t\t\t\t\t\t\t\t\tsizeof(struct in_addr), 0);\n \t\t\t\t\t\tif (mgmt == NULL) {\n-\t\t\t\t\t\t\tassert(errno == ENOMEM);\n-\t\t\t\t\t\t\tlog_warn(\"cdp\", \"unable to allocate memory for management address\");\n+\t\t\t\t\t\t\tif (errno == ENOMEM)\n+\t\t\t\t\t\t\t\tlog_warn(\"cdp\",\n+\t\t\t\t\t\t\t\t    \"unable to allocate memory for management address\");\n+\t\t\t\t\t\t\telse\n+\t\t\t\t\t\t\t\tlog_warn(\"cdp\",\n+\t\t\t\t\t\t\t\t    \"too large management address received on %s\",\n+\t\t\t\t\t\t\t\t    hardware->h_ifname);\n \t\t\t\t\t\t\tgoto malformed;\n \t\t\t\t\t\t}\n \t\t\t\t\t\tTAILQ_INSERT_TAIL(&chassis->c_mgmt, mgmt, m_entries);"
    },
    "modified_file_2": {
        "mod_filename": "src/daemon/protocols/edp.c",
        "status": "modified",
        "add_lines": 0,
        "dele_lines": 1,
        "patch": "@@ -25,7 +25,6 @@\n #include <errno.h>\n #include <arpa/inet.h>\n #include <fnmatch.h>\n-#include <assert.h>\n \n static int seq = 0;\n "
    },
    "modified_file_3": {
        "mod_filename": "src/daemon/protocols/lldp.c",
        "status": "modified",
        "add_lines": 8,
        "dele_lines": 6,
        "patch": "@@ -20,7 +20,6 @@\n \n #include <unistd.h>\n #include <errno.h>\n-#include <assert.h>\n #include <time.h>\n #include <sys/types.h>\n #include <sys/socket.h>\n@@ -161,7 +160,7 @@ static int _lldp_send(struct lldpd *global,\n \t/* Management addresses */\n \tTAILQ_FOREACH(mgmt, &chassis->c_mgmt, m_entries) {\n \t\tproto = lldpd_af_to_lldp_proto(mgmt->m_family);\n-\t\tassert(proto != LLDP_MGMT_ADDR_NONE);\n+\t\tif (proto == LLDP_MGMT_ADDR_NONE) continue;\n \t\tif (!(\n \t\t\t  POKE_START_LLDP_TLV(LLDP_TLV_MGMT_ADDR) &&\n \t\t\t  /* Size of the address, including its type */\n@@ -749,10 +748,13 @@ lldp_decode(struct lldpd *cfg, char *frame, int s,\n \t\t\t\tiface = 0;\n \t\t\tmgmt = lldpd_alloc_mgmt(af, addr_ptr, addr_length, iface);\n \t\t\tif (mgmt == NULL) {\n-\t\t\t\tassert(errno == ENOMEM);\n-\t\t\t\tlog_warn(\"lldp\", \"unable to allocate memory \"\n-\t\t\t\t\t\t\t\"for management address\");\n-\t\t\t\t\t\tgoto malformed;\n+\t\t\t\tif (errno == ENOMEM)\n+\t\t\t\t\tlog_warn(\"lldp\", \"unable to allocate memory \"\n+\t\t\t\t\t    \"for management address\");\n+\t\t\t\telse\n+\t\t\t\t\tlog_warn(\"lldp\", \"too large management address \"\n+\t\t\t\t\t    \"received on %s\", hardware->h_ifname);\n+\t\t\t\tgoto malformed;\n \t\t\t}\n \t\t\tTAILQ_INSERT_TAIL(&chassis->c_mgmt, mgmt, m_entries);\n \t\t\tbreak;"
    },
    "modified_file_4": {
        "mod_filename": "src/daemon/protocols/sonmp.c",
        "status": "modified",
        "add_lines": 5,
        "dele_lines": 3,
        "patch": "@@ -24,7 +24,6 @@\n #include <unistd.h>\n #include <errno.h>\n #include <arpa/inet.h>\n-#include <assert.h>\n \n static struct sonmp_chassis sonmp_chassis_types[] = {\n \t{1, \"unknown (via SONMP)\"},\n@@ -358,8 +357,11 @@ sonmp_decode(struct lldpd *cfg, char *frame, int s,\n \t}\n \tmgmt = lldpd_alloc_mgmt(LLDPD_AF_IPV4, &address, sizeof(struct in_addr), 0);\n \tif (mgmt == NULL) {\n-\t\tassert(errno == ENOMEM);\n-\t\tlog_warn(\"sonmp\", \"unable to allocate memory for management address\");\n+\t\tif (errno == ENOMEM)\n+\t\t\tlog_warn(\"sonmp\", \"unable to allocate memory for management address\");\n+\t\telse\n+\t\t\tlog_warn(\"sonmp\", \"too large management address received on %s\",\n+\t\t\t    hardware->h_ifname);\n \t\tgoto malformed;\n \t}\n \tTAILQ_INSERT_TAIL(&chassis->c_mgmt, mgmt, m_entries);"
    }
}