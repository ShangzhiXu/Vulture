{
    "current_hash": "7e391f0fd57f2ef375b1174d752a56ce34b2b190",
    "parent_hash": "4b31a180c8c46080e98dafc2b3ce1dfc15a038b5",
    "modified_file_0": {
        "mod_filename": "wolfcrypt/src/dsa.c",
        "status": "modified",
        "add_lines": 84,
        "dele_lines": 0,
        "patch": "@@ -663,6 +663,9 @@ int wc_DsaExportKeyRaw(DsaKey* dsa, byte* x, word32* xSz, byte* y, word32* ySz)\n int wc_DsaSign(const byte* digest, byte* out, DsaKey* key, WC_RNG* rng)\n {\n     mp_int  k, kInv, r, s, H;\n+#ifndef WOLFSSL_MP_INVMOD_CONSTANT_TIME\n+    mp_int  b;\n+#endif\n     mp_int* qMinus1;\n     int     ret = 0, sz;\n     byte    buffer[DSA_HALF_SIZE];\n@@ -676,8 +679,14 @@ int wc_DsaSign(const byte* digest, byte* out, DsaKey* key, WC_RNG* rng)\n \n     sz = min((int)sizeof(buffer), mp_unsigned_bin_size(&key->q));\n \n+#ifdef WOLFSSL_MP_INVMOD_CONSTANT_TIME\n     if (mp_init_multi(&k, &kInv, &r, &s, &H, 0) != MP_OKAY)\n+#else\n+    if (mp_init_multi(&k, &kInv, &r, &s, &H, &b) != MP_OKAY)\n+#endif\n+    {\n         return MP_INIT_E;\n+    }\n     qMinus1 = &kInv;\n \n     /* NIST FIPS 186-4: B.2.2\n@@ -708,6 +717,7 @@ int wc_DsaSign(const byte* digest, byte* out, DsaKey* key, WC_RNG* rng)\n     if (ret == 0 && mp_add_d(&k, 1, &k) != MP_OKAY)\n         ret = MP_MOD_E;\n \n+#ifdef WOLFSSL_MP_INVMOD_CONSTANT_TIME\n     /* inverse k mod q */\n     if (ret == 0 && mp_invmod(&k, &key->q, &kInv) != MP_OKAY)\n         ret = MP_INVMOD_E;\n@@ -734,6 +744,72 @@ int wc_DsaSign(const byte* digest, byte* out, DsaKey* key, WC_RNG* rng)\n \n     if (ret == 0 && mp_mulmod(&s, &kInv, &key->q, &s) != MP_OKAY)\n         ret = MP_MULMOD_E;\n+#else\n+    /* Blinding value\n+     * Generate b in range [1, q-1].\n+     */\n+    if (ret == 0) {\n+        do {\n+            ret = wc_RNG_GenerateBlock(rng, buffer, sz);\n+            if (ret == 0 && mp_read_unsigned_bin(&b, buffer, sz) != MP_OKAY)\n+                ret = MP_READ_E;\n+        } while (ret == 0 && mp_cmp(&b, qMinus1) != MP_LT);\n+    }\n+    if (ret == 0 && mp_add_d(&b, 1, &b) != MP_OKAY)\n+        ret = MP_MOD_E;\n+\n+    /* set H from sha digest */\n+    if (ret == 0 && mp_read_unsigned_bin(&H, digest,\n+                                               WC_SHA_DIGEST_SIZE) != MP_OKAY) {\n+        ret = MP_READ_E;\n+    }\n+\n+    /* generate r, r = (g exp k mod p) mod q */\n+    if (ret == 0 && mp_exptmod_ex(&key->g, &k, key->q.used, &key->p,\n+                                                               &r) != MP_OKAY) {\n+        ret = MP_EXPTMOD_E;\n+    }\n+\n+    /* calculate s = (H + xr)/k\n+                   = b.(H/k.b + x.r/k.b) */\n+\n+    /* k = k.b */\n+    if (ret == 0 && mp_mulmod(&k, &b, &key->q, &k) != MP_OKAY)\n+        ret = MP_MULMOD_E;\n+\n+    /* kInv = 1/k.b mod q */\n+    if (ret == 0 && mp_invmod(&k, &key->q, &kInv) != MP_OKAY)\n+        ret = MP_INVMOD_E;\n+\n+    if (ret == 0 && mp_mod(&r, &key->q, &r) != MP_OKAY)\n+        ret = MP_MOD_E;\n+\n+    /* s = x.r */\n+    if (ret == 0 && mp_mul(&key->x, &r, &s) != MP_OKAY)\n+        ret = MP_MUL_E;\n+\n+    /* s = x.r/k.b */\n+    if (ret == 0 && mp_mulmod(&s, &kInv, &key->q, &s) != MP_OKAY)\n+        ret = MP_MULMOD_E;\n+\n+    /* H = H/k.b */\n+    if (ret == 0 && mp_mulmod(&H, &kInv, &key->q, &H) != MP_OKAY)\n+        ret = MP_MULMOD_E;\n+\n+    /* s = H/k.b + x.r/k.b\n+         = (H + x.r)/k.b */\n+    if (ret == 0 && mp_add(&s, &H, &s) != MP_OKAY)\n+        ret = MP_ADD_E;\n+\n+    /* s = b.(e + x.r)/k.b\n+         = (e + x.r)/k */\n+    if (ret == 0 && mp_mulmod(&s, &b, &key->q, &s) != MP_OKAY)\n+        ret = MP_MULMOD_E;\n+\n+    /* s = (e + x.r)/k */\n+    if (ret == 0 && mp_mod(&s, &key->q, &s) != MP_OKAY)\n+        ret = MP_MOD_E;\n+#endif\n \n     /* detect zero r or s */\n     if (ret == 0 && (mp_iszero(&r) == MP_YES || mp_iszero(&s) == MP_YES))\n@@ -759,6 +835,14 @@ int wc_DsaSign(const byte* digest, byte* out, DsaKey* key, WC_RNG* rng)\n         }\n     }\n \n+    ForceZero(buffer, sz);\n+    mp_forcezero(&kInv);\n+    mp_forcezero(&k);\n+#ifndef WOLFSSL_MP_INVMOD_CONSTANT_TIME\n+    mp_forcezero(&b);\n+\n+    mp_clear(&b);\n+#endif\n     mp_clear(&H);\n     mp_clear(&s);\n     mp_clear(&r);"
    }
}