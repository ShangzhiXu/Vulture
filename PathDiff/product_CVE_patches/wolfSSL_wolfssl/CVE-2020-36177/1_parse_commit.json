{
    "current_hash": "fb2288c46dd4c864b78f00a47a364b96a09a5c0f",
    "parent_hash": "2ebb47ec32a05014e47e0e88ea8da8b42b1cf32a",
    "modified_file_0": {
        "mod_filename": "wolfcrypt/src/rsa.c",
        "status": "modified",
        "add_lines": 25,
        "dele_lines": 13,
        "patch": "@@ -1116,12 +1116,13 @@ static int RsaPad_PSS(const byte* input, word32 inputLen, byte* pkcsBlock,\n     int   hLen, i, o, maskLen, hiBits;\n     byte* m;\n     byte* s;\n+#if defined(WOLFSSL_NO_MALLOC) && !defined(WOLFSSL_STATIC_MEMORY)\n+    byte msg[RSA_MAX_SIZE/8 + RSA_PSS_PAD_SZ];\n+#else\n+    byte* msg = NULL;\n+#endif\n #if defined(WOLFSSL_PSS_LONG_SALT) || defined(WOLFSSL_PSS_SALT_LEN_DISCOVER)\n-    #if defined(WOLFSSL_NO_MALLOC) && !defined(WOLFSSL_STATIC_MEMORY)\n-        byte salt[RSA_MAX_SIZE/8 + RSA_PSS_PAD_SZ];\n-    #else\n-        byte* salt = NULL;\n-    #endif\n+    byte* salt;\n #else\n     byte salt[WC_MAX_DIGEST_SIZE];\n #endif\n@@ -1184,13 +1185,13 @@ static int RsaPad_PSS(const byte* input, word32 inputLen, byte* pkcsBlock,\n \n #if defined(WOLFSSL_PSS_LONG_SALT) || defined(WOLFSSL_PSS_SALT_LEN_DISCOVER)\n     #if !defined(WOLFSSL_NO_MALLOC) || defined(WOLFSSL_STATIC_MEMORY)\n-        salt = (byte*)XMALLOC(RSA_PSS_PAD_SZ + inputLen + saltLen, heap,\n+        msg = (byte*)XMALLOC(RSA_PSS_PAD_SZ + inputLen + saltLen, heap,\n                                                        DYNAMIC_TYPE_RSA_BUFFER);\n-        if (salt == NULL) {\n+        if (msg == NULL) {\n             return MEMORY_E;\n         }\n     #endif\n-    s = m = salt;\n+    salt = s = m = msg;\n     XMEMSET(m, 0, RSA_PSS_PAD_SZ);\n     m += RSA_PSS_PAD_SZ;\n     XMEMCPY(m, input, inputLen);\n@@ -1203,7 +1204,20 @@ static int RsaPad_PSS(const byte* input, word32 inputLen, byte* pkcsBlock,\n         }\n     }\n #else\n-    s = m = pkcsBlock;\n+    if (pkcsBlockLen < RSA_PSS_PAD_SZ + inputLen + saltLen) {\n+    #if !defined(WOLFSSL_NO_MALLOC) || defined(WOLFSSL_STATIC_MEMORY)\n+        msg = (byte*)XMALLOC(RSA_PSS_PAD_SZ + inputLen + saltLen, heap,\n+                                                       DYNAMIC_TYPE_RSA_BUFFER);\n+        if (msg == NULL) {\n+            return MEMORY_E;\n+        }\n+    #endif\n+        m = msg;\n+    }\n+    else {\n+        m = pkcsBlock;\n+    }\n+    s = m;\n     XMEMSET(m, 0, RSA_PSS_PAD_SZ);\n     m += RSA_PSS_PAD_SZ;\n     XMEMCPY(m, input, inputLen);\n@@ -1240,13 +1254,11 @@ static int RsaPad_PSS(const byte* input, word32 inputLen, byte* pkcsBlock,\n         }\n     }\n \n-#if defined(WOLFSSL_PSS_LONG_SALT) || defined(WOLFSSL_PSS_SALT_LEN_DISCOVER)\n     #if !defined(WOLFSSL_NO_MALLOC) || defined(WOLFSSL_STATIC_MEMORY)\n-        if (salt != NULL) {\n-            XFREE(salt, heap, DYNAMIC_TYPE_RSA_BUFFER);\n+        if (msg != NULL) {\n+            XFREE(msg, heap, DYNAMIC_TYPE_RSA_BUFFER);\n         }\n     #endif\n-#endif\n     return ret;\n }\n #endif /* WC_RSA_PSS */"
    }
}