{
    "current_hash": "f93083be72a3b3d956b52a7ec13f307a27b6e093",
    "parent_hash": "f82fd012834c8e4216a086653ce1c9e79628de53",
    "modified_file_0": {
        "mod_filename": "wolfcrypt/src/asn.c",
        "status": "modified",
        "add_lines": 8,
        "dele_lines": 4,
        "patch": "@@ -10212,9 +10212,13 @@ int ParseCertRelative(DecodedCert* cert, int type, int verify, void* cm)\n             }\n \n         #ifdef HAVE_OCSP\n-            /* trust for the lifetime of the responder's cert*/\n-            if (cert->ocspNoCheckSet && verify == VERIFY_OCSP)\n-                verify = NO_VERIFY;\n+            if (verify == VERIFY_OCSP_CERT) {\n+                /* trust for the lifetime of the responder's cert*/\n+                if (cert->ocspNoCheckSet)\n+                    verify = VERIFY;\n+                else\n+                    verify = VERIFY_OCSP;\n+            }\n         #endif\n             /* advance past extensions */\n             cert->srcIdx = cert->sigIndex;\n@@ -17957,7 +17961,7 @@ static int DecodeBasicOcspResponse(byte* source, word32* ioIndex,\n \n         /* Don't verify if we don't have access to Cert Manager. */\n         ret = ParseCertRelative(&cert, CERT_TYPE,\n-                                noVerify ? NO_VERIFY : VERIFY_OCSP, cm);\n+                                noVerify ? NO_VERIFY : VERIFY_OCSP_CERT, cm);\n         if (ret < 0) {\n             WOLFSSL_MSG(\"\\tOCSP Responder certificate parsing failed\");\n             FreeDecodedCert(&cert);"
    },
    "modified_file_1": {
        "mod_filename": "wolfssl/wolfcrypt/asn.h",
        "status": "modified",
        "add_lines": 1,
        "dele_lines": 0,
        "patch": "@@ -599,6 +599,7 @@ enum VerifyType {\n     VERIFY_OCSP = 3,\n     VERIFY_NAME = 4,\n     VERIFY_SKIP_DATE = 5,\n+    VERIFY_OCSP_CERT = 6,\n };\n \n #ifdef WOLFSSL_CERT_EXT"
    }
}